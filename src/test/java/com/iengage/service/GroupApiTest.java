/*
 * Stakeholder engagement API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiException;
import com.iengage.client.model.VerveResponseGroup;
import com.iengage.client.model.VerveResponseGroupList;
import com.iengage.client.model.VerveResponseIdeaList;
import com.iengage.client.model.VerveResponseUserList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupApi
 */
@Ignore
public class GroupApiTest {

    private final GroupApi api = new GroupApi();

    
    /**
     * Create group
     *
     * Allows the uer to create a group. Returns the created group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        Long organizationId = null;
        String title = null;
        String description = null;
        Long managerId = null;
        String accessType = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        VerveResponseGroup response = api.createGroup(organizationId, title, description, managerId, accessType, loggedInUserId, accessToken, clientToken);

        // TODO: test validations
    }
    
    /**
     * Delete group
     *
     * Allows the user to delete a group. Returns the deleted group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        Long groupId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseGroup response = api.deleteGroup(groupId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Follow group
     *
     * Allows the user to follow a group. Returns the followed group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void followGroupTest() throws ApiException {
        Long groupId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseGroup response = api.followGroup(groupId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get the list of followers for the group
     *
     * Returns the list of followers for the group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupFollowersTest() throws ApiException {
        Long groupId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseUserList response = api.getGroupFollowers(groupId, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of all ideas in a group
     *
     * Returns the list of all ideas in a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupIdeasTest() throws ApiException {
        Long groupId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseIdeaList response = api.getGroupIdeas(groupId, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get the list of groups visible for user
     *
     * Returns the list of groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupsTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseGroupList response = api.getGroups(start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended groups
     *
     * Returns the list of recommended groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendationGroupTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseGroupList response = api.getRecommendationGroup(start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of groups that a user is following
     *
     * Returns the list of groups the user is following
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserFollowingGroupsTest() throws ApiException {
        Long userId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseGroupList response = api.getUserFollowingGroups(userId, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of matching groups
     *
     * Returns the list of matching group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchGroupsTest() throws ApiException {
        String query = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseGroupList response = api.searchGroups(query, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Unfollow group
     *
     * Allows the user to unfollow a group. Returns the unfollowed group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unfollowGroupTest() throws ApiException {
        Long groupId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseGroup response = api.unfollowGroup(groupId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Update group
     *
     * Allows the user to update the group. Returns the updated group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupTest() throws ApiException {
        Long groupId = null;
        String title = null;
        String description = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseGroup response = api.updateGroup(groupId, title, description, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
}
