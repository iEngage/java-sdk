/*
 * Stakeholder engagement API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.Configuration;
import com.iengage.auth.OAuth;
import com.iengage.client.model.Attachment;
import com.iengage.client.model.VerveResponseInteraction;
import com.iengage.client.model.VerveResponseInteractionCategory;
import com.iengage.client.model.VerveResponseInteractionCategoryList;
import com.iengage.client.model.VerveResponseInteractionList;
import com.iengage.client.model.VerveResponseInteractionResponse;
import com.iengage.client.model.VerveResponseInteractionResponseList;
import com.iengage.client.model.VerveResponseUserList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InteractionApi
 */

public class InteractionApiTest {

    private final InteractionApi api = new InteractionApi();

    
    /**
     * Share interaction without attachment
     *
     * Allows the user to share interaction without attachment. Returns the interaction object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInteractionTest() throws ApiException {
    	ApiClient defaultClient = Configuration.getDefaultApiClient();
    	OAuth defaultAuth = (OAuth) defaultClient.getAuthentication("default");
    	defaultAuth.setAccessToken("");
        String loggedInUserId = "";
        String accessToken = "";
        String clientToken = "";
        
        String interactionTitle = "How are you? How is going?";
        Long categoryId = null;
        String interactionType = null;
        String interactionDescription = "This is not working fine for me... how I will do it.........";
        try{
        	 VerveResponseInteraction response = api.addInteraction(interactionTitle, loggedInUserId, accessToken, clientToken, categoryId, interactionType, interactionDescription);

             System.out.println("response>>>>>>>>>>>>>>>>>>>>>>>>"+response);
        }catch(Exception ex){
        	ex.printStackTrace();
        }
        // TODO: test validations
    }
    
    /**
     * Share interaction with attachment
     *
     * Allows the user to share interaction with attachment. Returns the interaction object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInteraction_0Test() throws ApiException {
        String body3 = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long body = null;
        String body2 = null;
        String body4 = null;
        List<Attachment> body5 = null;
        VerveResponseInteraction response = api.addInteraction_0(body3, loggedInUserId, accessToken, clientToken, body, body2, body4, body5);

        // TODO: test validations
    }
    
    /**
     * Response the specified interaction
     *
     * Allows the user to response the interaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addResponseTest() throws ApiException {
        Long interactionId = null;
        String responseText = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteractionResponse response = api.addResponse(interactionId, responseText, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Create interaction category
     *
     * Creates a interaction category. Returns the created interaction category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInteractionCategoryTest() throws ApiException {
        String interactionType = null;
        String name = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long organizationId = null;
        String description = null;
        String fields = null;
        VerveResponseInteractionCategory response = api.createInteractionCategory(interactionType, name, loggedInUserId, accessToken, clientToken, organizationId, description, fields);

        // TODO: test validations
    }
    
    /**
     * Delete interaction
     *
     * Allows the user to delete a interaction. Returns the deleted response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInteractionTest() throws ApiException {
        Long interactionId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteraction response = api.deleteInteraction(interactionId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Delete interaction category
     *
     * Allows the user to delete the interaction category. Returns the deleted interaction category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInteractionCategoryTest() throws ApiException {
        Long categoryId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteractionCategory response = api.deleteInteractionCategory(categoryId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Delete response
     *
     * Allows the user to delete an response. Returns the deleted response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteResponseTest() throws ApiException {
        Long responseId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteractionResponse response = api.deleteResponse(responseId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Dislike response
     *
     * Allows the user to dislike the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dislikeResponseTest() throws ApiException {
        Long interactionId = null;
        Long responseId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteractionResponse response = api.dislikeResponse(interactionId, responseId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of interactions shared by friends
     *
     * Returns the list of interactions shared by friends
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFriendsInteractionsTest() throws ApiException {
        String interactionStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String interactionType = null;
        Long categoryId = null;
        String fields = null;
        VerveResponseInteractionList response = api.getFriendsInteractions(interactionStatus, start, end, loggedInUserId, accessToken, clientToken, interactionType, categoryId, fields);

        // TODO: test validations
    }
    
    /**
     * Get interaction by id
     *
     * Returns the interaction by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInteractionTest() throws ApiException {
        Long interactionId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteraction response = api.getInteraction(interactionId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get the list of interaction categories
     *
     * Returns the list of interaction categories
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInteractionCategoriesTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String interactionType = null;
        String fields = null;
        VerveResponseInteractionCategoryList response = api.getInteractionCategories(start, end, loggedInUserId, accessToken, clientToken, interactionType, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of all interactions visible to the user
     *
     * Returns the list of all interactions visible to the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInteractionsForUserTest() throws ApiException {
        String interactionStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long categoryId = null;
        String interactionType = null;
        String fields = null;
        VerveResponseInteractionList response = api.getInteractionsForUser(interactionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, interactionType, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended interactions
     *
     * Returns the list of recommended interactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendInteractionsTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String interactionType = null;
        String fields = null;
        VerveResponseInteractionList response = api.getRecommendInteractions(start, end, loggedInUserId, accessToken, clientToken, interactionType, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended interactions from DB
     *
     * Returns the list of recommended interactions from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendedInteractinsFromDBTest() throws ApiException {
        Long userId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String interactionType = null;
        String fields = null;
        VerveResponseInteractionList response = api.getRecommendedInteractinsFromDB(userId, start, end, loggedInUserId, accessToken, clientToken, interactionType, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended Users from DB
     *
     * Returns the list of recommended users from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendedUsersFromDBTest() throws ApiException {
        Long interactionId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseUserList response = api.getRecommendedUsersFromDB(interactionId, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of responses by interactionId
     *
     * Returns the list of responses by interactionId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResponsesTest() throws ApiException {
        Long interactionId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteractionResponseList response = api.getResponses(interactionId, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of interactions shared by user
     *
     * Returns the list of interactions shared by specific user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserInteractionsTest() throws ApiException {
        Long userId = null;
        String interactionStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long categoryId = null;
        String interactionType = null;
        String fields = null;
        VerveResponseInteractionList response = api.getUserInteractions(userId, interactionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, interactionType, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of interaction categories subscribed by the user
     *
     * Returns the list of interaction categories subscribed by the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserSubscribedInteractionCategoriesTest() throws ApiException {
        Long userId = null;
        String interactionType = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteractionCategoryList response = api.getUserSubscribedInteractionCategories(userId, interactionType, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of interactions subscribed by user
     *
     * Returns the list of interactions subscribed by specific user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserSubscribedInteractionsTest() throws ApiException {
        Long userId = null;
        String interactionStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long categoryId = null;
        String interactionType = null;
        String fields = null;
        VerveResponseInteractionList response = api.getUserSubscribedInteractions(userId, interactionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, interactionType, fields);

        // TODO: test validations
    }
    
    /**
     * Like response
     *
     * Allows the user to like the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void likeResponseTest() throws ApiException {
        Long interactionId = null;
        Long responseId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteractionResponse response = api.likeResponse(interactionId, responseId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Mark response as a response
     *
     * Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markAsAnResponseTest() throws ApiException {
        Long interactionId = null;
        Long responseId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteractionResponse response = api.markAsAnResponse(interactionId, responseId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of matching interactions
     *
     * Returns the list of matching interactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchInteractionsTest() throws ApiException {
        String searchText = null;
        String interactionStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String interactionType = null;
        String fields = null;
        VerveResponseInteractionList response = api.searchInteractions(searchText, interactionStatus, start, end, loggedInUserId, accessToken, clientToken, interactionType, fields);

        // TODO: test validations
    }
    
    /**
     * Subscribe interaction category
     *
     * Returns the subscribed interaction category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeInteractinCategoryTest() throws ApiException {
        Long categoryId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteractionCategory response = api.subscribeInteractinCategory(categoryId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Subscribe interaction
     *
     * Allows the user to subscribe a interaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeInteractionTest() throws ApiException {
        Long interactionId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteraction response = api.subscribeInteraction(interactionId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Unmark response as a response
     *
     * Unmarks the response. This will remove the marked response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmarkAsAnResponseTest() throws ApiException {
        Long interactionId = null;
        Long responseId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteractionResponse response = api.unmarkAsAnResponse(interactionId, responseId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe interaction category
     *
     * Returns the unsubscribed interaction category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeInteractinCategoryTest() throws ApiException {
        Long categoryId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteractionCategory response = api.unsubscribeInteractinCategory(categoryId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe interaction
     *
     * Allows the user to unsubscribe a interaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeInteractionTest() throws ApiException {
        Long interactionId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteraction response = api.unsubscribeInteraction(interactionId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Update interaction
     *
     * Allows the user to update interaction. Returns the updated interaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInteractionTest() throws ApiException {
        Long interactionId = null;
        String interactionTitle = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String interactionDescription = null;
        String fields = null;
        VerveResponseInteraction response = api.updateInteraction(interactionId, interactionTitle, loggedInUserId, accessToken, clientToken, interactionDescription, fields);

        // TODO: test validations
    }
    
    /**
     * Update interaction category
     *
     * Allows the user to update the interaction category. Returns the updated interaction category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInteractionCategoryTest() throws ApiException {
        Long categoryId = null;
        String categoryName = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String categoryDescription = null;
        String fields = null;
        VerveResponseInteractionCategory response = api.updateInteractionCategory(categoryId, categoryName, loggedInUserId, accessToken, clientToken, categoryDescription, fields);

        // TODO: test validations
    }
    
    /**
     * Update response
     *
     * Allows the user to update an response. Returns the updated response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateResponseTest() throws ApiException {
        Long responseId = null;
        String responseText = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseInteractionResponse response = api.updateResponse(responseId, responseText, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
}
