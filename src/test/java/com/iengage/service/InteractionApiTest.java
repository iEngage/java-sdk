/*
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiException;
import java.io.File;
import com.iengage.client.model.InteractionCategory;
import com.iengage.client.model.InteractionInputModel;
import com.iengage.client.model.InteractionResponse;
import com.iengage.client.model.VerveResponseInteraction;
import com.iengage.client.model.VerveResponseInteractionCategory;
import com.iengage.client.model.VerveResponseInteractionCategoryList;
import com.iengage.client.model.VerveResponseInteractionList;
import com.iengage.client.model.VerveResponseInteractionResponse;
import com.iengage.client.model.VerveResponseInteractionResponseList;
import com.iengage.client.model.VerveResponseUserList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InteractionApi
 */
@Ignore
public class InteractionApiTest {

    private final InteractionApi api = new InteractionApi();

    
    /**
     * Share interaction without attachment
     *
     * This service allows a user to post an interaction. The following fields(key:value) are required to be present in the Interaction JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. interactionTitle &lt;/br&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInteractionTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;
        InteractionInputModel body = null;
        String accessToken = null;
        VerveResponseInteraction response = api.addInteraction(requesterId, clientToken, body, accessToken);

        // TODO: test validations
    }
    
    /**
     * Share interaction with attachment
     *
     * Allows the user to share interaction with attachment. Returns the interaction object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInteraction_0Test() throws ApiException {
        String interactionTitle = null;
        File file = null;
        String requesterId = null;
        String clientToken = null;
        String categoryId = null;
        String interactionType = null;
        String interactionDescription = null;
        String association = null;
        String accessToken = null;
        VerveResponseInteraction response = api.addInteraction_0(interactionTitle, file, requesterId, clientToken, categoryId, interactionType, interactionDescription, association, accessToken);

        // TODO: test validations
    }
    
    /**
     * Response the specified interaction
     *
     * This service allows a user to post a response on an interaction. The following fields(key:value) are required to be present in the Response JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. interactionId (Path Parameter)&lt;/br&gt;2. responseDescription &lt;/br&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addResponseTest() throws ApiException {
        Long interactionId = null;
        String requesterId = null;
        String clientToken = null;
        InteractionResponse body = null;
        String accessToken = null;
        VerveResponseInteractionResponse response = api.addResponse(interactionId, requesterId, clientToken, body, accessToken);

        // TODO: test validations
    }
    
    /**
     * Change interaction category
     *
     * Allows the user to change the interaction category.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeInteractionCategoryTest() throws ApiException {
        Long interactionId = null;
        Long categoryId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteraction response = api.changeInteractionCategory(interactionId, categoryId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Change interaction type
     *
     * Allows the user to change the interaction type. Boolean value
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeInteractionTypeTest() throws ApiException {
        Long interactionId = null;
        String interactionType = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteraction response = api.changeInteractionType(interactionId, interactionType, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Create interaction category
     *
     * This service allows a user to create a category. The following fields(key:value) are required to be present in the Category JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. associationId &lt;/br&gt;2. categoryName &lt;/br&gt;3. interactionType &lt;/br&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInteractionCategoryTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;
        InteractionCategory body = null;
        String accessToken = null;
        VerveResponseInteractionCategory response = api.createInteractionCategory(requesterId, clientToken, body, accessToken);

        // TODO: test validations
    }
    
    /**
     * Delete interaction
     *
     * Allows the user to delete a interaction. Returns the deleted response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInteractionTest() throws ApiException {
        Long interactionId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteraction response = api.deleteInteraction(interactionId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Delete interaction category
     *
     * Allows the user to delete the interaction category. Returns the deleted interaction category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInteractionCategoryTest() throws ApiException {
        Long categoryId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionCategory response = api.deleteInteractionCategory(categoryId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Delete response
     *
     * Allows the user to delete an response. Returns the deleted response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteResponseTest() throws ApiException {
        Long responseId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionResponse response = api.deleteResponse(responseId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Dislike response
     *
     * Allows the user to dislike the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dislikeResponseTest() throws ApiException {
        Long interactionId = null;
        Long responseId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionResponse response = api.dislikeResponse(interactionId, responseId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of interactions shared by friends
     *
     * Returns the list of interactions shared by friends
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFriendsInteractionsTest() throws ApiException {
        String interactionStatus = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String interactionType = null;
        Long categoryId = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionList response = api.getFriendsInteractions(interactionStatus, start, end, requesterId, clientToken, interactionType, categoryId, association, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get interaction by id
     *
     * Returns the interaction by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInteractionTest() throws ApiException {
        Long interactionId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteraction response = api.getInteraction(interactionId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get the list of interaction categories
     *
     * Returns the list of interaction categories
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInteractionCategoriesTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionCategoryList response = api.getInteractionCategories(start, end, requesterId, clientToken, interactionType, association, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of all interactions visible to the user
     *
     * Returns the list of all interactions visible to the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInteractionsForUserTest() throws ApiException {
        String interactionStatus = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        Long categoryId = null;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionList response = api.getInteractionsForUser(interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended interactions
     *
     * Returns the list of recommended interactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendInteractionsTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionList response = api.getRecommendInteractions(start, end, requesterId, clientToken, interactionType, association, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended interactions from DB
     *
     * Returns the list of recommended interactions from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendedInteractinsFromDBTest() throws ApiException {
        Long userId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionList response = api.getRecommendedInteractinsFromDB(userId, start, end, requesterId, clientToken, interactionType, association, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended Users from DB
     *
     * Returns the list of recommended users from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendedUsersFromDBTest() throws ApiException {
        Long interactionId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        VerveResponseUserList response = api.getRecommendedUsersFromDB(interactionId, start, end, requesterId, clientToken, association, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of responses by interactionId
     *
     * Returns the list of responses by interactionId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResponsesTest() throws ApiException {
        Long interactionId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionResponseList response = api.getResponses(interactionId, start, end, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of interactions shared by user
     *
     * Returns the list of interactions shared by specific user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserInteractionsTest() throws ApiException {
        Long userId = null;
        String interactionStatus = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        Long categoryId = null;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionList response = api.getUserInteractions(userId, interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of interaction categories subscribed by the user
     *
     * Returns the list of interaction categories subscribed by the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserSubscribedInteractionCategoriesTest() throws ApiException {
        Long userId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionCategoryList response = api.getUserSubscribedInteractionCategories(userId, start, end, requesterId, clientToken, interactionType, association, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of interactions subscribed by user
     *
     * Returns the list of interactions subscribed by specific user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserSubscribedInteractionsTest() throws ApiException {
        Long userId = null;
        String interactionStatus = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        Long categoryId = null;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionList response = api.getUserSubscribedInteractions(userId, interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Like response
     *
     * Allows the user to like the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void likeResponseTest() throws ApiException {
        Long interactionId = null;
        Long responseId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionResponse response = api.likeResponse(interactionId, responseId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Mark response as a response
     *
     * Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markAsAnResponseTest() throws ApiException {
        Long interactionId = null;
        Long responseId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionResponse response = api.markAsAnResponse(interactionId, responseId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of matching interactions
     *
     * Returns the list of matching interactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchInteractionsTest() throws ApiException {
        String searchText = null;
        String interactionStatus = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionList response = api.searchInteractions(searchText, interactionStatus, start, end, requesterId, clientToken, interactionType, association, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Subscribe interaction category
     *
     * Returns the subscribed interaction category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeInteractinCategoryTest() throws ApiException {
        Long categoryId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionCategory response = api.subscribeInteractinCategory(categoryId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Subscribe interaction
     *
     * Allows the user to subscribe a interaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeInteractionTest() throws ApiException {
        Long interactionId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteraction response = api.subscribeInteraction(interactionId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Unmark response as a response
     *
     * Unmarks the response. This will remove the marked response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmarkAsAnResponseTest() throws ApiException {
        Long interactionId = null;
        Long responseId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionResponse response = api.unmarkAsAnResponse(interactionId, responseId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe interaction category
     *
     * Returns the unsubscribed interaction category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeInteractinCategoryTest() throws ApiException {
        Long categoryId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionCategory response = api.unsubscribeInteractinCategory(categoryId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe interaction
     *
     * Allows the user to unsubscribe a interaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeInteractionTest() throws ApiException {
        Long interactionId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteraction response = api.unsubscribeInteraction(interactionId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Update interaction
     *
     * Allows the user to update interaction. Returns the updated interaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInteractionTest() throws ApiException {
        Long interactionId = null;
        String interactionTitle = null;
        String requesterId = null;
        String clientToken = null;
        String interactionDescription = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteraction response = api.updateInteraction(interactionId, interactionTitle, requesterId, clientToken, interactionDescription, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Update interaction category
     *
     * Allows the user to update the interaction category. Returns the updated interaction category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInteractionCategoryTest() throws ApiException {
        Long categoryId = null;
        String categoryName = null;
        String requesterId = null;
        String clientToken = null;
        String categoryDescription = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionCategory response = api.updateInteractionCategory(categoryId, categoryName, requesterId, clientToken, categoryDescription, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Update response
     *
     * Allows the user to update an response. Returns the updated response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateResponseTest() throws ApiException {
        Long responseId = null;
        String response = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseInteractionResponse response = api.updateResponse(responseId, response, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
}
