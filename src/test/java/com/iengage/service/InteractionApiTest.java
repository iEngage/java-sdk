/**
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.iengage.service;

import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.Configuration;
import com.iengage.client.model.VerveResponseInteraction;
import com.iengage.client.model.InteractionInputModel;
import java.io.File;
import com.iengage.client.model.InteractionResponse;
import com.iengage.client.model.VerveResponseInteractionResponse;
import com.iengage.client.model.Attachment;
import com.iengage.client.model.Interaction;
import com.iengage.client.model.InteractionCategory;
import com.iengage.client.model.VerveResponseInteractionCategory;
import com.iengage.client.model.VerveResponseInteractionList;
import com.iengage.client.model.VerveResponseInteractionCategoryList;
import com.iengage.client.model.VerveResponseUserList;
import com.iengage.client.model.VerveResponseInteractionResponseList;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InteractionApi
 */
public class InteractionApiTest {

    private InteractionApi api = null;
    
    private final ApiClient defaultClient = Configuration.getDefaultApiClient();

    
    /**
     * Share interaction without attachment
     *
     * This service allows a user to post an interaction. The following fields(key:value) are required to be present in the Interaction JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.      **Required fields**      1. interactionTitle     
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInteractionTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;;
        InteractionInputModel body = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        try{
			VerveResponseInteraction response = api.addInteraction(requesterId, clientToken, body, accessToken);
			if(response!=null){
				System.out.println(response.getData().getInteractionId());
				assert true;
			}
			else{
				assert false;
			}
		}catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Share interaction with attachment
     *
     * Allows the user to share interaction with attachment. Returns the interaction object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInteraction_0Test() throws ApiException {
        String interactionTitle = null;
        File file = null;
        String requesterId = null;
        String clientToken = null;;
        String categoryId = null;
        String interactionType = null;
        String interactionDescription = null;
        String association = null;
        String accessToken = null;
        // VerveResponseInteraction response = api.addInteraction_0(interactionTitle, file, requesterId, clientToken, categoryId, interactionType, interactionDescription, association, accessToken);

        // TODO: test validations
    }
    
    /**
     * Response the specified interaction
     *
     * This service allows a user to post a response on an interaction. The following fields(key:value) are required to be present in the Response JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.      **Required fields**     1. interactionId (Path Parameter)     2. responseDescription     
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addResponseTest() throws ApiException {
        Long interactionId = null;
        String requesterId = null;
        String clientToken = null;;
        InteractionResponse body = null;
        String accessToken = null;
        
        body.setResponseDescription(null);
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n<<<<<<<<<<<<<< add response test >>>>>>>>>>>>>");
        try {
	        VerveResponseInteractionResponse response = api.addResponse(interactionId, requesterId, clientToken, body, accessToken);
	        if(response!=null){
	        	System.out.println("<<<<<<<<<<ADD RESPONSE >>>>>>>>>>");
	        	System.out.println(response);
	        	assert true;
	        }
	        else{
	        	assert false;
	        }
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Response the specified interaction
     *
     * Allows the user to response the interaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addResponse_0Test() throws ApiException {
        Long body = null;
        String body2 = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;;
        String body3 = null;
        List<Attachment> body4 = null;
        // VerveResponseInteractionResponse response = api.addResponse_0(body, body2, loggedInUserId, accessToken, clientToken, body3, body4);

        // TODO: test validations
    }
    
    /**
     * Change interaction category
     *
     * Allows the user to change the interaction category.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeInteractionCategoryTest() throws ApiException {
        Long interactionId = null;
        Long categoryId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        
        System.out.println("\n\n\n>>>>>>>>>>>>> Change Interaction Category Test >>>>>>>>>>>>>>");
        try{
        	VerveResponseInteraction response = api.changeInteractionCategory(interactionId, categoryId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Change interaction type
     *
     * Allows the user to change the interaction type. Boolean value
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeInteractionTypeTest() throws ApiException {
        Long interactionId = null;
        String interactionType = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n>>>>>>>>>Change Interaction Type test>>>>>>>>>>>>>");
        try{
        	VerveResponseInteraction response = api.changeInteractionType(interactionId, interactionType, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
    }
    
    /**
     * Create interaction category
     *
     * This service allows a user to create a category. The following fields(key:value) are required to be present in the Category JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.      **Required fields**      1. associationId      2. categoryName      3. interactionType     
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInteractionCategoryTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;;
        InteractionCategory body = null;
        String accessToken = null;
        
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n <<<<<< Create Interaction Category Test >>>>>>>>>>>>");
        
        try{
        	VerveResponseInteractionCategory response = api.createInteractionCategory(requesterId, clientToken, body, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
		}catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        
        // TODO: test validations
    }
    
    /**
     * Delete interaction
     *
     * Allows the user to delete a interaction. Returns the deleted response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInteractionTest() throws ApiException {
        Long interactionId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        
        System.out.println("\n\n\n>>>>>>>>>> delete interaction test <<<<<<<<<<<<<< ");
        try {
        	VerveResponseInteraction response = api.deleteInteraction(interactionId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
         
         
         System.out.println("");
         
        // TODO: test validations
    }
    
    /**
     * Delete interaction category
     *
     * Allows the user to delete the interaction category. Returns the deleted interaction category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInteractionCategoryTest() throws ApiException {
        Long categoryId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n>>>>>>>>>Delete Interaction Category>>>>>>>>>>>>>");
        try{
        	VerveResponseInteractionCategory response = api.deleteInteractionCategory(categoryId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Delete response
     *
     * Allows the user to delete an response. Returns the deleted response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteResponseTest() throws ApiException {
        Long responseId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n<<<<<<<<<<<<<<<<<< Delete response test >>>>>>>>>>>>>>>>>");
        try {
        	VerveResponseInteractionResponse response = api.deleteResponse(responseId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else {
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }

        // TODO: test validations
    }
    
    /**
     * Dislike response
     *
     * Allows the user to dislike the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dislikeResponseTest() throws ApiException {
        Long interactionId = null;
        Long responseId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n<<<<<<<<<<<<<<<<<< Dislike response test >>>>>>>>>>>>>>>>>");
        
        try{
        	VerveResponseInteractionResponse response = api.dislikeResponse(interactionId, responseId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get list of interactions shared by friends
     *
     * Returns the list of interactions shared by friends
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFriendsInteractionsTest() throws ApiException {
        String interactionStatus = null;
        Integer start = 0;
        Integer end = 10;
        String requesterId = null;
        String clientToken = null;;
        String interactionType = null;
        Long categoryId = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n>>>>>>>>>Get Friends Interactions  test>>>>>>>>>>>>>");
        try{
        	VerveResponseInteractionList response = api.getFriendsInteractions(interactionStatus, start, end, requesterId, clientToken, interactionType, categoryId, association, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        
        // VerveResponseInteractionList response = api.getFriendsInteractions(interactionStatus, start, end, requesterId, clientToken, interactionType, categoryId, association, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get interaction by id
     *
     * Returns the interaction by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInteractionTest() throws ApiException {
        
    	Long interactionId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        try{
        	VerveResponseInteraction response = api.getInteraction(interactionId, requesterId, clientToken, fields, accessToken);
      
			if(response!=null){
				System.out.println("<<<<<<<<<<Get Interaction List:"+response.getRecords()+">>>>>>>>>>>>>>");
				assert true;
			}
			else {
				assert false;
			}
		}catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get the list of interaction categories
     *
     * Returns the list of interaction categories
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInteractionCategoriesTest() throws ApiException {
        Integer start = 0;
        Integer end = 10;
        String requesterId = null;
        String clientToken = null;;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n>>>>>>>>>Get Interaction categories  test>>>>>>>>>>>>>");
        try{
        	VerveResponseInteractionCategoryList response = api.getInteractionCategories(start, end, requesterId, clientToken, interactionType, association, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }

        
        
        
        
        
    }
    
    /**
     * Get list of all interactions visible to the user
     *
     * Returns the list of all interactions visible to the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInteractionsForUserTest() throws ApiException {
        String interactionStatus = null;
        Integer start = 0;
        Integer end = 10;
        String requesterId = null;
        String clientToken = null;;
        Long categoryId = null;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        
        System.out.println("\n\n\n>>>>>>>>>>>>> Get Interactions for User test >>>>>>>>>>>>>>");
        try {
        	VerveResponseInteractionList response = api.getInteractionsForUser(interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }

        // TODO: test validations
    }
    
    /**
     * Get list of recommended interactions
     *
     * Returns the list of recommended interactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendInteractionsTest() throws ApiException {
        Integer start = 0;
        Integer end = 10;
        String requesterId = null;
        String clientToken = null;;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n>>>>>>>>>Get Recommend Interactions  test>>>>>>>>>>>>>");
        try{
        	VerveResponseInteractionList response = api.getRecommendInteractions(start, end, requesterId, clientToken, interactionType, association, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }

        
        // VerveResponseInteractionList response = api.getRecommendInteractions(start, end, requesterId, clientToken, interactionType, association, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended interactions from DB
     *
     * Returns the list of recommended interactions from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendedInteractinsFromDBTest() throws ApiException {
        Long userId = null;
        Integer start = 0;
        Integer end = 10;
        String requesterId = null;
        String clientToken = null;;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
		try{
			VerveResponseInteractionList response = api.getRecommendedInteractinsFromDB(userId, start, end, requesterId, clientToken, interactionType, association, fields, accessToken);
			
			if(response!=null){
				System.out.println("<<<<<<<Get Recommended Interactions From DBTest>>>>>>>>>>>>>>>>>");
				System.out.println(response);
				assert true;
			}
			else{
				assert false;
			}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get list of recommended Users from DB
     *
     * Returns the list of recommended users from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendedUsersFromDBTest() throws ApiException {
        Long interactionId = null;
        Integer start = 0;
        Integer end = 10;
        String requesterId = null;
        String clientToken = null;;
        String association = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n<<<<<<<<<<<<<Get Recommendeded Users from DB test>>>>>>>>>>>>>");
        try {
        	VerveResponseUserList response = api.getRecommendedUsersFromDB(interactionId, start, end, requesterId, clientToken, association, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
    }
    
    /**
     * Get list of responses by interactionId
     *
     * Returns the list of responses by interactionId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResponsesTest() throws ApiException {
        Long interactionId = null;
        Integer start = 0;
        Integer end = 10;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        
        System.out.println("\n\n\n>>>>>>>>>>>>>Get responses test <<<<<<<<<<<<<<<<<<");
        
        try{
        	VerveResponseInteractionResponseList response = api.getResponses(interactionId, start, end, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get list of interactions shared by user
     *
     * Returns the list of interactions shared by specific user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserInteractionsTest() throws ApiException {
        Long userId = null;
        String interactionStatus = null;
        Integer start = 0;
        Integer end = 10;
        String requesterId = null;
        String clientToken = null;;
        Long categoryId = null;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
		try{
			VerveResponseInteractionList response = api.getUserInteractions(userId, interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken);
        
			if(response!=null){
				System.out.println("<<<<<<<<<<<<<get user interactions>>>>>>>>>>>>>>");
				for(Interaction a:response.getList()){
					System.out.println(a.getInteractionId()+":"+a.getInteractionTitle());
				}
				assert true;
			}
			else{
				assert false;
			}
		}catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get list of interaction categories subscribed by the user
     *
     * Returns the list of interaction categories subscribed by the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserSubscribedInteractionCategoriesTest() throws ApiException {
        Long userId = null;
        Integer start = 0;
        Integer end = 10;
        String requesterId = null;
        String clientToken = null;;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n>>>>>>>>>Get User Subscribed Interactions  test>>>>>>>>>>>>>");
        try{
        	VerveResponseInteractionCategoryList response = api.getUserSubscribedInteractionCategories(userId, start, end, requesterId, clientToken, interactionType, association, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        
        // VerveResponseInteractionCategoryList response = api.getUserSubscribedInteractionCategories(userId, start, end, requesterId, clientToken, interactionType, association, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of interactions subscribed by user
     *
     * Returns the list of interactions subscribed by specific user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserSubscribedInteractionsTest() throws ApiException {
        Long userId = null;
        String interactionStatus = null;
        Integer start = 0;
        Integer end = 10;
        String requesterId = null;
        String clientToken = null;;
        Long categoryId = null;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n<<<<<<<< Get User Subscribed Interactions Test >>>>>>>>>>>>>");
        try{
        	VerveResponseInteractionList response = api.getUserSubscribedInteractions(userId, interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken);

	        if(response!=null){
	        	System.out.println(response);
	        	assert true;
	        }
	        else{
	        	assert false;
	        }
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        }
        // TODO: test validations
    }
    
    /**
     * Like response
     *
     * Allows the user to like the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void likeResponseTest() throws ApiException {
        Long interactionId = null;
        Long responseId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        
        System.out.println("\n\n\n>>>>>>>>>>>>> Like Response Test >>>>>>>>>>>>>>");
        try {
        	VerveResponseInteractionResponse response = api.likeResponse(interactionId, responseId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Mark response as a response
     *
     * Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markAsAnResponseTest() throws ApiException {
        Long interactionId = null;
        Long responseId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        
        System.out.println("\n\n\n <<<<<<<<<<<<<<<<<<<<Mark as an Response test>>>>>>>>>>>>>>>>>>>");
        try{
        	VerveResponseInteractionResponse response = api.markAsAnResponse(interactionId, responseId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        
        // TODO: test validations
    }
    
    /**
     * Get list of matching interactions
     *
     * Returns the list of matching interactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchInteractionsTest() throws ApiException {
        String searchText = null;
        String interactionStatus = null;
        Integer start = 0;
        Integer end = 10;
        String requesterId = null;
        String clientToken = null;;
        String interactionType = null;
        String association = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n <<<<<<< Search Interaction Test >>>>>>>>");
        try {
        	VerveResponseInteractionList response = api.searchInteractions(searchText, interactionStatus, start, end, requesterId, clientToken, interactionType, association, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Subscribe interaction category
     *
     * Returns the subscribed interaction category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeInteractinCategoryTest() throws ApiException {
        Long categoryId = null; //General Category
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n<<<<<<<<<< Subscribe Interaction Category Test >>>>>>>>");
        try {
        	VerveResponseInteractionCategory response = api.subscribeInteractinCategory(categoryId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Subscribe interaction
     *
     * Allows the user to subscribe a interaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeInteractionTest() throws ApiException {
        Long interactionId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n>>>>>>>>>Subscribe Interactions  test>>>>>>>>>>>>>");
        try{
        	VerveResponseInteraction response = api.subscribeInteraction(interactionId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        
        // VerveResponseInteraction response = api.subscribeInteraction(interactionId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Unmark response as a response
     *
     * Unmarks the response. This will remove the marked response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmarkAsAnResponseTest() throws ApiException {
        Long interactionId = null;
        Long responseId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        
        System.out.println("\n\n\n >>>>>>>>> Unmark as an response test >>>>>>>>>>>>>>>");
        try{
	        VerveResponseInteractionResponse response = api.unmarkAsAnResponse(interactionId, responseId, requesterId, clientToken, fields, accessToken);
	        
	        if(response!=null){
	        	System.out.println("<<<<<<<<< Unmark as an response test >>>>>>>>>");
	        	System.out.println(response);
	        	assert true;
	        }
	        else{
	        	assert false;
	        }
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
	        // TODO: test validations
    }
    
    /**
     * Unsubscribe interaction category
     *
     * Returns the unsubscribed interaction category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeInteractinCategoryTest() throws ApiException {
        Long categoryId = null; //General Category
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        
        System.out.println("\n\n\n<<<<<<<<<<< Unsubscribe Interaction Category >>>>>>>>>>>");
        try{
        	VerveResponseInteractionCategory response = api.unsubscribeInteractinCategory(categoryId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Unsubscribe interaction
     *
     * Allows the user to unsubscribe a interaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeInteractionTest() throws ApiException {
        Long interactionId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n<<<<<<<<<<<<<<<<<< Unsubscribe Interaction test >>>>>>>>>>>>>>>>>");
        
        try{
        	VerveResponseInteraction response = api.unsubscribeInteraction(interactionId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
    }
    
    /**
     * Update interaction
     *
     * Allows the user to update interaction. Returns the updated interaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInteractionTest() throws ApiException {
        Long interactionId = null;
        String interactionTitle = null;
        String requesterId = null;
        String clientToken = null;;
        String interactionDescription = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n>>>>>>>>>>>>>>> Update Interaction Test <<<<<<<<<<<<<<");
        
        try{
        	VerveResponseInteraction response = api.updateInteraction(interactionId, interactionTitle, requesterId, clientToken, interactionDescription, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Update interaction category
     *
     * Allows the user to update the interaction category. Returns the updated interaction category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInteractionCategoryTest() throws ApiException {
        Long categoryId = null;
        String categoryName = null;
        String requesterId = null;
        String clientToken = null;;
        String categoryDescription = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        try{
			VerveResponseInteractionCategory response = api.updateInteractionCategory(categoryId, categoryName, requesterId, clientToken, categoryDescription, fields, accessToken);
			System.out.println("\n\n\n>>>>>>>Update Interaction Category >>>>>>>>>>>>");
			System.out.println(response);
			if(response!=null){
				assert true;
			}
			else{
				assert false;
			}
		}catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Update response
     *
     * Allows the user to update an response. Returns the updated response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateResponseTest() throws ApiException {
        Long responseId = null;
        String response = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new InteractionApi(defaultClient);
        
        System.out.println("\n\n\n<<<<<<<<<<<<<<<<<< Update Response test >>>>>>>>>>>>>>>>>");
        
        try{
        	
        	VerveResponseInteractionResponse resp = api.updateResponse(responseId, response, requesterId, clientToken, fields, accessToken);
        	if(resp!=null){
        		System.out.println(resp);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
}
