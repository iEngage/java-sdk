/*
 * Stakeholder engagement API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiException;
import com.iengage.client.model.Attachment;
import com.iengage.client.model.VerveResponseAnswer;
import com.iengage.client.model.VerveResponseAnswerList;
import com.iengage.client.model.VerveResponseQuestion;
import com.iengage.client.model.VerveResponseQuestionCategory;
import com.iengage.client.model.VerveResponseQuestionCategoryList;
import com.iengage.client.model.VerveResponseQuestionList;
import com.iengage.client.model.VerveResponseUserList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuestionApi
 */
@Ignore
public class QuestionApiTest {

    private final QuestionApi api = new QuestionApi();

    
    /**
     * Answer the specified question
     *
     * Allows the user to answer the question
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAnswerTest() throws ApiException {
        Long questionId = null;
        String answer = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseAnswer response = api.addAnswer(questionId, answer, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Share question without attachment
     *
     * Allows the user to share question without attachment. Returns the question object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addQuestionTest() throws ApiException {
        Long categoryId = null;
        String questionTitle = null;
        String questionDescription = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        VerveResponseQuestion response = api.addQuestion(categoryId, questionTitle, questionDescription, loggedInUserId, accessToken, clientToken);

        // TODO: test validations
    }
    
    /**
     * Share question with attachment
     *
     * Allows the user to share question with attachment. Returns the question object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addQuestion_0Test() throws ApiException {
        Long body = null;
        String body2 = null;
        String body3 = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        List<Attachment> body4 = null;
        VerveResponseQuestion response = api.addQuestion_0(body, body2, body3, loggedInUserId, accessToken, clientToken, body4);

        // TODO: test validations
    }
    
    /**
     * Create question category
     *
     * Creates a question category. Returns the created question category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createQuestionCategoryTest() throws ApiException {
        String name = null;
        String description = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long organizationId = null;
        String fields = null;
        VerveResponseQuestionCategory response = api.createQuestionCategory(name, description, loggedInUserId, accessToken, clientToken, organizationId, fields);

        // TODO: test validations
    }
    
    /**
     * Delete answer
     *
     * Allows the user to delete an answer. Returns the deleted answer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnswerTest() throws ApiException {
        Long answerId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseAnswer response = api.deleteAnswer(answerId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Delete question
     *
     * Allows the user to delete a question. Returns the deleted answer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuestionTest() throws ApiException {
        Long questionId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestion response = api.deleteQuestion(questionId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Delete question category
     *
     * Allows the user to delete the question category. Returns the deleted question category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuestionCategoryTest() throws ApiException {
        Long categoryId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestionCategory response = api.deleteQuestionCategory(categoryId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Dislike answer
     *
     * Allows the user to dislike the answer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dislikeAnswerTest() throws ApiException {
        Long questionId = null;
        Long answerId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseAnswer response = api.dislikeAnswer(questionId, answerId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of answers by questionId
     *
     * Returns the list of answers by questionId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnswersTest() throws ApiException {
        Long questionId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseAnswerList response = api.getAnswers(questionId, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of questions shared by friends
     *
     * Returns the list of questions shared by friends
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFriendsQuestionsTest() throws ApiException {
        String questionStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long categoryId = null;
        String fields = null;
        VerveResponseQuestionList response = api.getFriendsQuestions(questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields);

        // TODO: test validations
    }
    
    /**
     * Get question by id
     *
     * Returns the question by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuestionTest() throws ApiException {
        Long questionId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestion response = api.getQuestion(questionId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get the list of question categories
     *
     * Returns the list of question categories
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuestionCategoriesTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestionCategoryList response = api.getQuestionCategories(start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of all questions visible to the user
     *
     * Returns the list of all questions visible to the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuestionsForUserTest() throws ApiException {
        String questionStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long categoryId = null;
        String fields = null;
        VerveResponseQuestionList response = api.getQuestionsForUser(questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended questions
     *
     * Returns the list of recommended questions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendQuestionTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestionList response = api.getRecommendQuestion(start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended questions from DB
     *
     * Returns the list of recommended questions from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendedQuestionsFromDBTest() throws ApiException {
        Long userId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestionList response = api.getRecommendedQuestionsFromDB(userId, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended Users from DB
     *
     * Returns the list of recommended users from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendedUsersFromDBTest() throws ApiException {
        Long questionId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseUserList response = api.getRecommendedUsersFromDB(questionId, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of questions shared by user
     *
     * Returns the list of questions shared by specific user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserQuestionsTest() throws ApiException {
        Long userId = null;
        String questionStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long categoryId = null;
        String fields = null;
        VerveResponseQuestionList response = api.getUserQuestions(userId, questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of question categories subscribed by the user
     *
     * Returns the list of question categories subscribed by the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserSubscribedQuestionCategoriesTest() throws ApiException {
        Long userId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestionCategoryList response = api.getUserSubscribedQuestionCategories(userId, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of questions subscribed by user
     *
     * Returns the list of questions subscribed by specific user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserSubscribedQuestionsTest() throws ApiException {
        Long userId = null;
        String questionStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long categoryId = null;
        String fields = null;
        VerveResponseQuestionList response = api.getUserSubscribedQuestions(userId, questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields);

        // TODO: test validations
    }
    
    /**
     * Like answer
     *
     * Allows the user to like the answer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void likeAnswerTest() throws ApiException {
        Long questionId = null;
        Long answerId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseAnswer response = api.likeAnswer(questionId, answerId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Mark answer as a answer
     *
     * Marks the answer as accepted. This means the user is satisfied with the answer &amp; then the question will go into closed state
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markAsAnAnswerTest() throws ApiException {
        Long questionId = null;
        Long answerId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseAnswer response = api.markAsAnAnswer(questionId, answerId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of matching questions
     *
     * Returns the list of matching questions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchQuestionsTest() throws ApiException {
        String searchText = null;
        String questionStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestionList response = api.searchQuestions(searchText, questionStatus, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Subscribe question
     *
     * Allows the user to subscribe a question
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeQuestionTest() throws ApiException {
        Long questionId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestion response = api.subscribeQuestion(questionId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Subscribe question category
     *
     * Returns the subscribed question category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeQuestionCategoryTest() throws ApiException {
        Long categoryId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestionCategory response = api.subscribeQuestionCategory(categoryId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Unmark answer as a answer
     *
     * Unmarks the answer. This will remove the marked answer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmarkAsAnAnswerTest() throws ApiException {
        Long questionId = null;
        Long answerId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseAnswer response = api.unmarkAsAnAnswer(questionId, answerId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe question
     *
     * Allows the user to unsubscribe a question
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeQuestionTest() throws ApiException {
        Long questionId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestion response = api.unsubscribeQuestion(questionId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe question category
     *
     * Returns the unsubscribed question category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeQuestionCategoryTest() throws ApiException {
        Long categoryId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestionCategory response = api.unsubscribeQuestionCategory(categoryId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Update answer
     *
     * Allows the user to update an answer. Returns the updated answer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnswerTest() throws ApiException {
        Long answerId = null;
        String answer = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseAnswer response = api.updateAnswer(answerId, answer, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Update question
     *
     * Allows the user to update question. Returns the updated question
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateQuestionTest() throws ApiException {
        Long questionId = null;
        String questionTitle = null;
        String questionDescription = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestion response = api.updateQuestion(questionId, questionTitle, questionDescription, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Update question category
     *
     * Allows the user to update the question category. Returns the updated question category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateQuestionCategoryTest() throws ApiException {
        Long categoryId = null;
        String categoryName = null;
        String categoryDescription = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseQuestionCategory response = api.updateQuestionCategory(categoryId, categoryName, categoryDescription, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
}
