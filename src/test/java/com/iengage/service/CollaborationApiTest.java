/*
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiException;
import com.iengage.client.model.Blog;
import com.iengage.client.model.Comment;
import com.iengage.client.model.Discussion;
import com.iengage.client.model.VerveResponseBlog;
import com.iengage.client.model.VerveResponseBlogList;
import com.iengage.client.model.VerveResponseComment;
import com.iengage.client.model.VerveResponseCommentList;
import com.iengage.client.model.VerveResponseDiscussion;
import com.iengage.client.model.VerveResponseDiscussionList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CollaborationApi
 */
@Ignore
public class CollaborationApiTest {

    private final CollaborationApi api = new CollaborationApi();

    
    /**
     * Comment on posted blog
     *
     * This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. blogId (Path Parameter)&lt;/br&gt;2. commentText &lt;/br&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCommentBlogTest() throws ApiException {
        Long blogId = null;
        String requesterId = null;
        String clientToken = null;
        Comment body = null;
        String accessToken = null;
        VerveResponseComment response = api.addCommentBlog(blogId, requesterId, clientToken, body, accessToken);

        // TODO: test validations
    }
    
    /**
     * Comment on discussion
     *
     * This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. discussionId (Path Parameter)&lt;/br&gt;2. commentText &lt;/br&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCommentDiscussionTest() throws ApiException {
        Long discussionId = null;
        String requesterId = null;
        String clientToken = null;
        Comment body = null;
        String accessToken = null;
        VerveResponseComment response = api.addCommentDiscussion(discussionId, requesterId, clientToken, body, accessToken);

        // TODO: test validations
    }
    
    /**
     * Delete blog
     *
     * Allows the user to delete blog. Returns the deleted blog
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBlogTest() throws ApiException {
        Long blogId = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseBlog response = api.deleteBlog(blogId, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Delete blog comment
     *
     * Allows the user to delete blog comment.  Returns the deleted blog comment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBlogCommentTest() throws ApiException {
        Long commentId = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseComment response = api.deleteBlogComment(commentId, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Delete discussion
     *
     * Allows the user to delete discussion. Returns the deleted discussion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDiscussionTest() throws ApiException {
        Long discussionId = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseDiscussion response = api.deleteDiscussion(discussionId, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Delete discussion comment
     *
     * Allows the user to delete discussion comment. Returns the deleted discussion comment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDiscussionCommentTest() throws ApiException {
        Long commentId = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseComment response = api.deleteDiscussionComment(commentId, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of comments on blog
     *
     * Returns the list of comments on blog
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlogCommentsTest() throws ApiException {
        Long blogId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseCommentList response = api.getBlogComments(blogId, start, end, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of blogs
     *
     * Returns the list of blogs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlogsTest() throws ApiException {
        Long association = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseBlogList response = api.getBlogs(association, start, end, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of comments on discussion
     *
     * Returns the list of comments on discussion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscussionCommentsTest() throws ApiException {
        Long discussionId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseCommentList response = api.getDiscussionComments(discussionId, start, end, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of discussions
     *
     * Returns the list of discussions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscussionsTest() throws ApiException {
        Long association = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseDiscussionList response = api.getDiscussions(association, start, end, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of blogs subscribed by user
     *
     * Returns the list of blogs subscribed by user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserSubscribedBlogsTest() throws ApiException {
        Long userId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseBlog response = api.getUserSubscribedBlogs(userId, start, end, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of discussions subscribed by user
     *
     * Returns the list of discussions subscribed by user 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserSubscribedDiscussionsTest() throws ApiException {
        Long userId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseDiscussionList response = api.getUserSubscribedDiscussions(userId, start, end, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Post blog
     *
     * This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. association &lt;/br&gt;2. title &lt;/br&gt;3. description &lt;/br&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postBlogTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;
        Blog body = null;
        String accessToken = null;
        VerveResponseBlog response = api.postBlog(requesterId, clientToken, body, accessToken);

        // TODO: test validations
    }
    
    /**
     * Start discussion
     *
     * This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. association &lt;/br&gt;2. subject &lt;/br&gt;3. description &lt;/br&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startDiscussionTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;
        Discussion body = null;
        String accessToken = null;
        VerveResponseDiscussion response = api.startDiscussion(requesterId, clientToken, body, accessToken);

        // TODO: test validations
    }
    
    /**
     * Subscribe blog
     *
     * Allows the user to subscribe to blog. Returns the subscribed blog
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeBlogTest() throws ApiException {
        Long blogId = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseBlog response = api.subscribeBlog(blogId, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Subscribe discussion
     *
     * Allows the user to subscribe to a discussion. Returns the subscribed discussion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeDiscussionTest() throws ApiException {
        Long discussionId = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseDiscussion response = api.subscribeDiscussion(discussionId, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe blog
     *
     * Allows the user to unsubscribe blog. Returns the unsubscribed blog
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeBlogTest() throws ApiException {
        Long blogId = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseBlog response = api.unsubscribeBlog(blogId, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe discussion
     *
     * Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeDiscussionTest() throws ApiException {
        Long discussionId = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseDiscussion response = api.unsubscribeDiscussion(discussionId, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Update blog
     *
     * Allows the user to update blog. Returns the updated blog
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBlogTest() throws ApiException {
        Long blogId = null;
        String blogTitle = null;
        String blogDescription = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseBlog response = api.updateBlog(blogId, blogTitle, blogDescription, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Update blog comment
     *
     * Allows the user to update blog comment. Returns the updated blog comment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBlogCommentTest() throws ApiException {
        Long commentId = null;
        String commentText = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseComment response = api.updateBlogComment(commentId, commentText, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Update discussion
     *
     * Allows the user to update discussion. Returns the updated discussion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDiscussionTest() throws ApiException {
        Long discussionId = null;
        String subject = null;
        String discussionDescription = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseDiscussion response = api.updateDiscussion(discussionId, subject, discussionDescription, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Update discussion comment
     *
     * Allows the user to update discussion comment. Returns the updated discussion comment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDiscussionCommentTest() throws ApiException {
        Long commentId = null;
        String commentText = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseDiscussion response = api.updateDiscussionComment(commentId, commentText, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
}
