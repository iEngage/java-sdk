/*
 * Stakeholder engagement API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiException;
import com.iengage.client.model.VerveResponseComment;
import com.iengage.client.model.VerveResponseCommentList;
import com.iengage.client.model.VerveResponseMilestone;
import com.iengage.client.model.VerveResponseMilestoneList;
import com.iengage.client.model.VerveResponseTask;
import com.iengage.client.model.VerveResponseTaskList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectManagementApi
 */
@Ignore
public class ProjectManagementApiTest {

    private final ProjectManagementApi api = new ProjectManagementApi();

    
    /**
     * Comment on milestone
     *
     * Allows the user to comment on milestone. Returns the comments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMilestoneCommentTest() throws ApiException {
        Long milestoneId = null;
        String commentText = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        VerveResponseComment response = api.addMilestoneComment(milestoneId, commentText, loggedInUserId, accessToken, clientToken);

        // TODO: test validations
    }
    
    /**
     * Comment on task
     *
     * Allows  the user to comment on task. Returns the task comment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTaskCommentTest() throws ApiException {
        Long taskId = null;
        String commentText = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        VerveResponseComment response = api.addTaskComment(taskId, commentText, loggedInUserId, accessToken, clientToken);

        // TODO: test validations
    }
    
    /**
     * Create milestone
     *
     * Allows the user to create milestone. Returns the created milestone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMilestoneTest() throws ApiException {
        String title = null;
        String description = null;
        String dueDate = null;
        Boolean neverDue = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long organizationId = null;
        String fields = null;
        VerveResponseMilestone response = api.createMilestone(title, description, dueDate, neverDue, loggedInUserId, accessToken, clientToken, organizationId, fields);

        // TODO: test validations
    }
    
    /**
     * Create task
     *
     * Allows user to create task. Returns the created task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTaskTest() throws ApiException {
        String title = null;
        String description = null;
        Integer priority = null;
        Long assigneeUserId = null;
        String dueDate = null;
        Boolean neverDue = null;
        Long milestoneId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseTask response = api.createTask(title, description, priority, assigneeUserId, dueDate, neverDue, milestoneId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Delete milestone
     *
     * Allows the user to delete milestone. Returns the deleted milestone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMilestoneTest() throws ApiException {
        Long milestoneId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseMilestone response = api.deleteMilestone(milestoneId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Delete task
     *
     * Allows the user to delete task. Returns the deleted task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaskTest() throws ApiException {
        Long taskId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseTask response = api.deleteTask(taskId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of milestones
     *
     * Returns the list of milestones
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMilestonesTest() throws ApiException {
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long organizationId = null;
        String fields = null;
        VerveResponseMilestoneList response = api.getMilestones(loggedInUserId, accessToken, clientToken, organizationId, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of comments written on Milestones
     *
     * Returns the list comments written on milestone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMilestonesCommentsTest() throws ApiException {
        Long milestoneId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        VerveResponseCommentList response = api.getMilestonesComments(milestoneId, loggedInUserId, accessToken, clientToken);

        // TODO: test validations
    }
    
    /**
     * Get list of Comments written on task
     *
     * Returns the list of comments written on task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskCommentsTest() throws ApiException {
        Long taskId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        VerveResponseCommentList response = api.getTaskComments(taskId, loggedInUserId, accessToken, clientToken);

        // TODO: test validations
    }
    
    /**
     * Get list of task assigned to user
     *
     * Returns the list of task assigned to user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTasksTest() throws ApiException {
        Long userId = null;
        Integer status = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseTaskList response = api.getUserTasks(userId, status, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Update milestone
     *
     * Allows the user to update milestone. Returns the updated milestone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMilestoneTest() throws ApiException {
        Long milestoneId = null;
        String title = null;
        String description = null;
        String dueDate = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseMilestone response = api.updateMilestone(milestoneId, title, description, dueDate, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Update task
     *
     * Allows the user to update task. Returns the updated task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskTest() throws ApiException {
        Long taskId = null;
        String title = null;
        String description = null;
        String dueDate = null;
        Integer status = null;
        Long reAssigneeUserId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseTask response = api.updateTask(taskId, title, description, dueDate, status, reAssigneeUserId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Update task status
     *
     * Allows the user to update task status. Returns the updated task status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskStatusTest() throws ApiException {
        Long taskId = null;
        Integer status = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseTask response = api.updateTaskStatus(taskId, status, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
}
