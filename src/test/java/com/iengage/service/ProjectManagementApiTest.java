/**
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.iengage.service;

import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.Configuration;
import com.iengage.client.model.VerveResponseComment;
import com.iengage.client.model.Comment;
import com.iengage.client.model.Milestone;
import com.iengage.client.model.VerveResponseMilestone;
import com.iengage.client.model.VerveResponseTask;
import com.iengage.client.model.Task;
import com.iengage.client.model.User;
import com.iengage.client.model.VerveResponseMilestoneList;
import com.iengage.client.model.VerveResponseCommentList;
import com.iengage.client.model.VerveResponseTaskList;

import org.joda.time.DateTime;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectManagementApi
 */

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ProjectManagementApiTest {

	private final ApiClient defaultClient = Configuration.getDefaultApiClient();
    private ProjectManagementApi api = null;
    
    
    

    /**
     * Create milestone
     *
     * This service allows a user to create a milestone. The following fields(key:value) are required to be present in the Milestone JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  **Required fields**  1. **milestoneTitle**  2. **milestoneDescription**  3. **dueDate**  4. **neverDue**  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMilestoneTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;;
        Milestone body = null;
        String accessToken= null;
        
        defaultClient.setAccessToken(null);
        api = new ProjectManagementApi(defaultClient);
        
        
        System.out.println("\n\n\n >>>>>>>>>>>> Create MileStone Test >>>>>>>>>>>>>>");
        
        try{
        	VerveResponseMilestone response = api.createMilestone(requesterId, clientToken, body, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    
    
    
    /**
     * Create task
     *
     * This service allows a user to create a task. The following fields(key:value) are required to be present in the Task JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.   **Required fields**  1. **taskTitle**  2. **taskDescription**  3. **priority**  4. **dueDate**  5. **assigneeUserId**  6. **neverDue**  7. **user: { userId }**
     *
     * @throws ApiException
     *          if the Api call fails
     */
    
    @Test
    public void createTaskTest() throws ApiException {
        Long milestoneId = null;
        String requesterId = null;
        String clientToken = null;;
        Task body = null;
        String accessToken= null;
        
       //**Required fields** 1. **taskTitle** 2. **taskDescription** 3. **priority** 4. **dueDate** 5. **assigneeUserId** 6. **neverDue** 7. **user: { userId }
       
        User user = null;
        
        defaultClient.setAccessToken(null);
        api = new ProjectManagementApi(defaultClient);
        
        System.out.println("\n\n\n >>>>>>>>>>>> Create Task Test >>>>>>>>>>>>>>");
        try {
        	VerveResponseTask response = api.createTask(milestoneId, requesterId, clientToken, body, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    
    
    
    /**
     * Get list of milestones
     *
     * Returns the list of milestones
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMilestonesTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;;
        Long organizationId = null;
        String fields = null;
        String accessToken= null;
        defaultClient.setAccessToken(null);
        api = new ProjectManagementApi(defaultClient);
        
        System.out.println("\n\n\n Get Milestones Test >>>>>>>>>>>>>>>");
        
        try {
        	VerveResponseMilestoneList response = api.getMilestones(requesterId, clientToken, organizationId, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get list of task assigned to user
     *
     * Returns the list of task assigned to user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTasksTest() throws ApiException {
        Long userId = null;
        Integer status = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken= null;
        defaultClient.setAccessToken(null);
        api = new ProjectManagementApi(defaultClient);
        
        System.out.println("\n\n\n>>>>>>>>>>>>>> Get User Tasks Test >>>>>>>>>>>>>>>>");
        try {
        	VerveResponseTaskList response = api.getUserTasks(userId, status, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }

        // TODO: test validations
    }
    
    /**
     * Comment on task
     *
     * This service allows a user to comment on a task. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  **Required fields**  1. **taskId (Path Parameter)**  2. **commentText**  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTaskCommentTest() throws ApiException {
        Long taskId = null;
        String requesterId = null;
        String clientToken = null;;
        Comment body = null;
        String accessToken= null;
        
        defaultClient.setAccessToken(null);
        api = new ProjectManagementApi(defaultClient);
        
        
        System.out.println("\n\n\n>>>>>>>>>>>> Add Task Comment Test >>>>>>>>>>>");
        try {
        	VerveResponseComment response = api.addTaskComment(taskId, requesterId, clientToken, body, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
            		assert false;
            }
        }catch(ApiException e){
           	System.out.println(e.getResponseBody());
          	assert false;
        }catch(Exception e){
           	e.printStackTrace();
          	assert false;
        }
        // 

        // TODO: test validations
    }

    
    /**
     * Comment on milestone
     *
     * This service allows a user to comment on a milestone. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  **Required fields**  1. milestoneId (Path Parameter) 2. commentText  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test()
    public void addMilestoneCommentTest() throws ApiException {
        Long milestoneId = null;
        String requesterId = null;
        String clientToken = null;;
        Comment body = null;
        String accessToken= null;
       
        defaultClient.setAccessToken(null);
        api = new ProjectManagementApi(defaultClient);

        System.out.println("\n\n\n>>>>>>>>> Add MileStone Comment Test >>>>>>>>>>>>>>>>");
        try{
        	VerveResponseComment response = api.addMilestoneComment(milestoneId, requesterId, clientToken, body, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
            	assert false;
            }
        }catch(ApiException e){
           	System.out.println(e.getResponseBody());
          	assert false;
        }catch(Exception e){
           	e.printStackTrace();
          	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get list of comments written on Milestones
     *
     * Returns the list comments written on milestone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMilestonesCommentsTest() throws ApiException {
        Long milestoneId = null;
        String requesterId = null;
        String clientToken = null;;
        String accessToken= null;
        
        defaultClient.setAccessToken(null);
        api = new ProjectManagementApi(defaultClient);
        
        System.out.println("\n\n\n Get Milestones Comments test >>>>>>>>>>>>>>>");
        try{
        	VerveResponseCommentList response = api.getMilestonesComments(milestoneId, requesterId, clientToken, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
            	assert false;
            }
        }catch(ApiException e){
           	System.out.println(e.getResponseBody());
          	assert false;
        }catch(Exception e){
           	e.printStackTrace();
          	assert false;
        }

        // TODO: test validations
    }
    
    /**
     * Get list of Comments written on task
     *
     * Returns the list of comments written on task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskCommentsTest() throws ApiException {
        Long taskId = null;
        String requesterId = null;
        String clientToken = null;;
        String accessToken= null;
        
        defaultClient.setAccessToken(null);
        api = new ProjectManagementApi(defaultClient);
        
        System.out.println("\n\n\n >>>>>>>> Get Task Comments Test >>>>>>>>>>>>>>>>>>");
        try{
        	VerveResponseCommentList response = api.getTaskComments(taskId, requesterId, clientToken, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
            	assert false;
            }
        }catch(ApiException e){
           	System.out.println(e.getResponseBody());
          	assert false;
        }catch(Exception e){
           	e.printStackTrace();
          	assert false;
        }

        // TODO: test validations
    }
    
    /**
     * Update milestone
     *
     * Allows the user to update milestone. Returns the updated milestone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMilestoneTest() throws ApiException {
        Long milestoneId = null;
        String title = null;
        String description = null;
       // String dueDate = "12-22-2019 12:01:39";
        String dueDate = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken= null;
        defaultClient.setAccessToken(null);
        api = new ProjectManagementApi(defaultClient);
        
        System.out.println("\n\n\n >>>>>>>>> Update Milestone test >>>>>>>>>>");
        try{
        	VerveResponseMilestone response = api.updateMilestone(milestoneId, title, description, dueDate, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
            	assert false;
            }
        }catch(ApiException e){
           	System.out.println(e.getResponseBody());
          	assert false;
        }catch(Exception e){
           	e.printStackTrace();
          	assert false;
        }

        // TODO: test validations
    }
    
    /**
     * Update task
     *
     * Allows the user to update task. Returns the updated task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskTest() throws ApiException {
        Long taskId = null;
        String title = null;
        String description = null;
      
        String dueDate = null;
        Integer status = null;
        Long reAssigneeUserId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken= null;
        
        System.out.println("\n\n\n >>>>>>>>>>>>>>>>> Update Task Test >>>>>>>>>>>>>>>>");
        
        defaultClient.setAccessToken(null);
        api = new ProjectManagementApi(defaultClient);
        try{
        	VerveResponseTask response = api.updateTask(taskId, title, description, dueDate, status, reAssigneeUserId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Update task status
     *
     * Allows the user to update task status. Returns the updated task status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskStatusTest() throws ApiException {
        Long taskId = null;
        Integer status = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken= null;
        
        System.out.println("\n\n\n >>>>>>>>>>>>>>>>> Update Task Status >>>>>>>>>>>>>>>>");
        
        
        defaultClient.setAccessToken(null);
        api = new ProjectManagementApi(defaultClient);
        try{
        	VerveResponseTask response = api.updateTaskStatus(taskId, status, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    
    
    
    
    
    /**
     * Delete milestone
     *
     * Allows the user to delete milestone. Returns the deleted milestone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMilestoneTest() throws ApiException {
        Long milestoneId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken= null;
        
        defaultClient.setAccessToken(null);
        api = new ProjectManagementApi(defaultClient);
        
        System.out.println("\n\n\n >>>>>>>>>>>>>>> Delete Milestone test >>>>>>>>>>>>>");
        try{
        	VerveResponseMilestone response = api.deleteMilestone(milestoneId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }

        // TODO: test validations
    }
    
    /**
     * Delete task
     *
     * Allows the user to delete task. Returns the deleted task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaskTest() throws ApiException {
        Long taskId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken= null;
        
        defaultClient.setAccessToken(null);
        api = new ProjectManagementApi(defaultClient);
        
        System.out.println("\n\n\n >>>>>>> Delete Task Test >>>>>>>>>>>>>>");
        try{
        	VerveResponseTask response = api.deleteTask(taskId, requesterId, clientToken, fields, accessToken);
        if(response!=null){
    		System.out.println(response);
    		assert true;
    	}
    	else{
    		assert false;
    	}
    }catch(ApiException e){
    	System.out.println(e.getResponseBody());
    	assert false;
    }catch(Exception e){
    	e.printStackTrace();
    	assert false;
    }
        // TODO: test validations
    }
}
