/*
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiException;
import com.iengage.client.model.Comment;
import com.iengage.client.model.Milestone;
import com.iengage.client.model.Task;
import com.iengage.client.model.VerveResponseComment;
import com.iengage.client.model.VerveResponseCommentList;
import com.iengage.client.model.VerveResponseMilestone;
import com.iengage.client.model.VerveResponseMilestoneList;
import com.iengage.client.model.VerveResponseTask;
import com.iengage.client.model.VerveResponseTaskList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectManagementApi
 */
@Ignore
public class ProjectManagementApiTest {

    private final ProjectManagementApi api = new ProjectManagementApi();

    
    /**
     * Comment on milestone
     *
     * This service allows a user to comment on a milestone. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. milestoneId (Path Parameter)&lt;/br&gt;2. commentText &lt;/br&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMilestoneCommentTest() throws ApiException {
        Long milestoneId = null;
        String requesterId = null;
        String clientToken = null;
        Comment body = null;
        String accessToken = null;
        VerveResponseComment response = api.addMilestoneComment(milestoneId, requesterId, clientToken, body, accessToken);

        // TODO: test validations
    }
    
    /**
     * Comment on task
     *
     * This service allows a user to comment on a task. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. taskId (Path Parameter)&lt;/br&gt;2. commentText &lt;/br&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTaskCommentTest() throws ApiException {
        Long taskId = null;
        String requesterId = null;
        String clientToken = null;
        Comment body = null;
        String accessToken = null;
        VerveResponseComment response = api.addTaskComment(taskId, requesterId, clientToken, body, accessToken);

        // TODO: test validations
    }
    
    /**
     * Create milestone
     *
     * This service allows a user to create a milestone. The following fields(key:value) are required to be present in the Milestone JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. milestoneTitle &lt;/br&gt;2. milestoneDescription &lt;/br&gt;3. dueDate &lt;/br&gt;4. neverDue &lt;/br&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMilestoneTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;
        Milestone body = null;
        String accessToken = null;
        VerveResponseMilestone response = api.createMilestone(requesterId, clientToken, body, accessToken);

        // TODO: test validations
    }
    
    /**
     * Create task
     *
     * This service allows a user to create a task. The following fields(key:value) are required to be present in the Task JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt; &lt;b&gt;Required fields &lt;/br&gt;1. taskTitle &lt;/br&gt;2. taskDescription &lt;/br&gt;3. priority &lt;/br&gt;4. dueDate &lt;/br&gt;5. assigneeUserId &lt;/br&gt;6. neverDue &lt;/br&gt;7. user: { userId }&lt;/b&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTaskTest() throws ApiException {
        Long milestoneId = null;
        String requesterId = null;
        String clientToken = null;
        Task body = null;
        String accessToken = null;
        VerveResponseTask response = api.createTask(milestoneId, requesterId, clientToken, body, accessToken);

        // TODO: test validations
    }
    
    /**
     * Delete milestone
     *
     * Allows the user to delete milestone. Returns the deleted milestone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMilestoneTest() throws ApiException {
        Long milestoneId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseMilestone response = api.deleteMilestone(milestoneId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Delete task
     *
     * Allows the user to delete task. Returns the deleted task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaskTest() throws ApiException {
        Long taskId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseTask response = api.deleteTask(taskId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of milestones
     *
     * Returns the list of milestones
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMilestonesTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;
        Long organizationId = null;
        String fields = null;
        String accessToken = null;
        VerveResponseMilestoneList response = api.getMilestones(requesterId, clientToken, organizationId, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of comments written on Milestones
     *
     * Returns the list comments written on milestone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMilestonesCommentsTest() throws ApiException {
        Long milestoneId = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseCommentList response = api.getMilestonesComments(milestoneId, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of Comments written on task
     *
     * Returns the list of comments written on task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskCommentsTest() throws ApiException {
        Long taskId = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseCommentList response = api.getTaskComments(taskId, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of task assigned to user
     *
     * Returns the list of task assigned to user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTasksTest() throws ApiException {
        Long userId = null;
        Integer status = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseTaskList response = api.getUserTasks(userId, status, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Update milestone
     *
     * Allows the user to update milestone. Returns the updated milestone
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMilestoneTest() throws ApiException {
        Long milestoneId = null;
        String title = null;
        String description = null;
        String dueDate = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseMilestone response = api.updateMilestone(milestoneId, title, description, dueDate, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Update task
     *
     * Allows the user to update task. Returns the updated task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskTest() throws ApiException {
        Long taskId = null;
        String title = null;
        String description = null;
        String dueDate = null;
        Integer status = null;
        Long reAssigneeUserId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseTask response = api.updateTask(taskId, title, description, dueDate, status, reAssigneeUserId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Update task status
     *
     * Allows the user to update task status. Returns the updated task status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskStatusTest() throws ApiException {
        Long taskId = null;
        Integer status = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseTask response = api.updateTaskStatus(taskId, status, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
}
