/*
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiException;
import com.iengage.client.model.VerveResponseEntitiesClassifiedList;
import com.iengage.client.model.VerveResponseEntitySentimentList;
import com.iengage.client.model.VerveResponseFlowFinder;
import com.iengage.client.model.VerveResponseKeyword;
import com.iengage.client.model.VerveResponseSentiment;
import com.iengage.client.model.VerveResponseSentimentAnalytics;
import com.iengage.client.model.VerveResponseTagList;
import com.iengage.client.model.VerveResponseTextClassificationList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AugmentedIntelligenceApi
 */
@Ignore
public class AugmentedIntelligenceApiTest {

    private final AugmentedIntelligenceApi api = new AugmentedIntelligenceApi();

    
    /**
     * Classifies using your classifier
     *
     * Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void classifyTest() throws ApiException {
        String text = null;
        Long id = null;
        String clientToken = null;
        VerveResponseTextClassificationList response = api.classify(text, id, clientToken);

        // TODO: test validations
    }
    
    /**
     * Extracts entities from text
     *
     * Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEntitiesTest() throws ApiException {
        Long id = null;
        String text = null;
        String clientToken = null;
        VerveResponseEntitiesClassifiedList response = api.getEntities(id, text, clientToken);

        // TODO: test validations
    }
    
    /**
     * Returns the type of interaction
     *
     * Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInteractionTypeTest() throws ApiException {
        String text = null;
        String clientToken = null;
        VerveResponseFlowFinder response = api.getInteractionType(text, clientToken);

        // TODO: test validations
    }
    
    /**
     * Returns the keywords of the sentence
     *
     * Extracts the keywords of a sentence. This could be used for example as tags.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKeywordsTest() throws ApiException {
        String text = null;
        String clientToken = null;
        VerveResponseKeyword response = api.getKeywords(text, clientToken);

        // TODO: test validations
    }
    
    /**
     * Get list of popular tag of interactions
     *
     * Return the most popular tag of given interaction type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPopularTagTest() throws ApiException {
        Long startTime = null;
        Long endTime = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String interactionType = null;
        String sentimentType = null;
        String additionalInformation = null;
        String association = null;
        Long categoryId = null;
        String accessToken = null;
        VerveResponseTagList response = api.getPopularTag(startTime, endTime, start, end, requesterId, clientToken, interactionType, sentimentType, additionalInformation, association, categoryId, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get sentiment count of interactions
     *
     * Returns the sum of the sentiment count of given interaction type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSentimentTest() throws ApiException {
        Long startTime = null;
        Long endTime = null;
        String requesterId = null;
        String clientToken = null;
        String interactionType = null;
        String additionalInformation = null;
        String association = null;
        Long categoryId = null;
        String accessToken = null;
        VerveResponseSentimentAnalytics response = api.getSentiment(startTime, endTime, requesterId, clientToken, interactionType, additionalInformation, association, categoryId, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of tag entity sentiment
     *
     * Return the list of tag entity sentiments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagEntitySentimentsTest() throws ApiException {
        String tagName = null;
        Long startTime = null;
        Long endTime = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String sentimentType = null;
        String additionalInformation = null;
        String association = null;
        String interactionType = null;
        Long categoryId = null;
        String accessToken = null;
        VerveResponseEntitySentimentList response = api.getTagEntitySentiments(tagName, startTime, endTime, start, end, requesterId, clientToken, sentimentType, additionalInformation, association, interactionType, categoryId, accessToken);

        // TODO: test validations
    }
    
    /**
     * Analyzes the sentiment of the content
     *
     * The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sentimentTest() throws ApiException {
        String text = null;
        String clientToken = null;
        VerveResponseSentiment response = api.sentiment(text, clientToken);

        // TODO: test validations
    }
    
}
