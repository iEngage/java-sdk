/*
 * Stakeholder engagement API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiException;
import com.iengage.client.model.VerveResponseEntitySentimentList;
import com.iengage.client.model.VerveResponseNLCList;
import com.iengage.client.model.VerveResponseSentimentAnalytics;
import com.iengage.client.model.VerveResponseTagList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AugmentedIntelligenceApi
 */
@Ignore
public class AugmentedIntelligenceApiTest {

    private final AugmentedIntelligenceApi api = new AugmentedIntelligenceApi();

    
    /**
     * Get the type of interaction
     *
     * Classifies text to question, complaint or suggestion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInteractionTest() throws ApiException {
        String text = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        VerveResponseNLCList response = api.getInteraction(text, loggedInUserId, accessToken, clientToken);

        // TODO: test validations
    }
    
    /**
     * Get list of popular tag of interactions
     *
     * Return the most popular tag of given interaction type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPopularTagTest() throws ApiException {
        Long startTime = null;
        Long endTime = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String interactionType = null;
        String sentimentType = null;
        String additionalInformation = null;
        VerveResponseTagList response = api.getPopularTag(startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, interactionType, sentimentType, additionalInformation);

        // TODO: test validations
    }
    
    /**
     * Get sentiment count of interactions
     *
     * Returns the sum of the sentiment count of given interaction type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSentimentTest() throws ApiException {
        Long startTime = null;
        Long endTime = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String interactionType = null;
        String additionalInformation = null;
        VerveResponseSentimentAnalytics response = api.getSentiment(startTime, endTime, loggedInUserId, accessToken, clientToken, interactionType, additionalInformation);

        // TODO: test validations
    }
    
    /**
     * Get list of tag entity sentiment
     *
     * Return the list of tag entity sentiments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagEntitySentimentsTest() throws ApiException {
        String tagName = null;
        Long startTime = null;
        Long endTime = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String sentimentType = null;
        String additionalInformation = null;
        VerveResponseEntitySentimentList response = api.getTagEntitySentiments(tagName, startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, sentimentType, additionalInformation);

        // TODO: test validations
    }
    
}
