/**
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.iengage.service;

import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.Configuration;
import com.iengage.client.model.VerveResponseWFTask;
import com.iengage.client.model.VerveResponseWFTaskList;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BPMApi
 */
public class BPMApiTest {

	private final ApiClient defaultClient = Configuration.getDefaultApiClient();
    private  BPMApi api = null;

    /**
     * Assign task
     *
     * Assign BPM task, It will return task object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assignWFTaskTest() throws ApiException {
        Long assigneeUserId = null;
        Long taskId = null;
        String requesterId = null;
        String clientToken = null;;
        String comment = null;
        Long dueDate = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new BPMApi(defaultClient);
        
        System.out.println("\n\n\n<<<<<<<<<<<< Assign WF Task Test>>>>>>>>>>>>>>>>");
        
        try{
        	VerveResponseWFTask response = api.assignWFTask(assigneeUserId, taskId, requesterId, clientToken, comment, dueDate, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Complete task
     *
     * Complete BPM task, It will return task object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void completeWFTaskTest() throws ApiException {
        Long userId = null;
        Long taskId = null;
        String requesterId = null;
        String clientToken = null;;
        String transition = null;
        String comment = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new BPMApi(defaultClient);
        
        System.out.println("\n\n\n>>>>>>>>>>>>>> Complete WF Task test >>>>>>>>>>>>>>>>");
        try{
        	VerveResponseWFTask response = api.completeWFTask(userId, taskId, requesterId, clientToken, transition, comment, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }

        // TODO: test validations
    }
    
    /**
     * Get task by task id
     *
     * Return the BPM task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBPMTasksTest() throws ApiException {
        Long userId = null;
        Long taskId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new BPMApi(defaultClient);
        
        System.out.println("\n\n\n >>>>>>>>>> GEt BPM Tasks Test>>>>>>>>>>>>>>");
        try{
        	VerveResponseWFTask response = api.getBPMTasks(userId, taskId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get list of BPM task assigned to user
     *
     * Return the list of BPM task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSearchTaskTest() throws ApiException {
        Long userId = null;
        String searchString = null;
        Boolean completed = false;
        Boolean searchByUserRoles = false;
        Integer start = 0;
        Integer end = 10;
        String requesterId = null;
        String clientToken = null;;
        String type = null;
        Long organizationId = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new BPMApi(defaultClient);
        
        System.out.println("\n\n\n >>>>>>>>>> GEt Search Tasks Test>>>>>>>>>>>>>>");
        try{
        	VerveResponseWFTaskList response = api.getSearchTask(userId, searchString, completed, searchByUserRoles, start, end, requesterId, clientToken, type, organizationId, fields, accessToken);
        	if(response!=null){
	    		System.out.println(response);
	    		assert true;
	    	}
	    	else{
	    		assert false;
	    	}
	    }catch(ApiException e){
	    	System.out.println(e.getResponseBody());
	    	assert false;
	    }catch(Exception e){
	    	e.printStackTrace();
	    	assert false;
	    }
        // TODO: test validations
    }
    
    /**
     * Get list of BPM task assigned to user
     *
     * Return the list of BPM task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTasksByEntityTest() throws ApiException {
        Long userId = null;
        Long entityId = null;
        Boolean completed = null;
        Boolean searchByUserRoles = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        defaultClient.setAccessToken(null);
        api = new BPMApi(defaultClient);
        
        System.out.println("\n\n\n >>>>>>>>>> GEt Tasks bY Entity Test>>>>>>>>>>>>>>");
        
        try{
        	VerveResponseWFTaskList response = api.getTasksByEntity(userId, entityId, completed, searchByUserRoles, start, end, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }

        // TODO: test validations
    }
    
    /**
     * Get list of BPM task assigned to user
     *
     * Return the list of BPM task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserBPMTasksTest() throws ApiException {
        Long userId = null;
        Boolean completed = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;;
        String type = null;
        Long organizationId = null;
        String fields = null;
        String accessToken = null;
        defaultClient.setAccessToken(null);
        api = new BPMApi(defaultClient);
        
        System.out.println("\n\n\n >>>>>>>>>> GEt User BPM Tasks Test>>>>>>>>>>>>>>");
        
        try{
        	VerveResponseWFTaskList response = api.getUserBPMTasks(userId, completed, start, end, requesterId, clientToken, type, organizationId, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }

        // TODO: test validations
    }
    
    /**
     * Get list of BPM task assigned to user roles
     *
     * Return the list of BPM task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserRolesBPMTasksTest() throws ApiException {
        Long userId = null;
        Boolean completed = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;;
        String type = null;
        Long organizationId = null;
        String fields = null;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new BPMApi(defaultClient);
        
        System.out.println("\n\n\n >>>>>>>>>> GEt User Roles BPM Tasks Test>>>>>>>>>>>>>>");
        try{
        	VerveResponseWFTaskList response = api.getUserRolesBPMTasks(userId, completed, start, end, requesterId, clientToken, type, organizationId, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }

        // TODO: test validations
    }
    
}
