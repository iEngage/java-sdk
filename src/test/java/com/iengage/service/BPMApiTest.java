/*
 * Stakeholder engagement API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiException;
import com.iengage.client.model.VerveResponseWFTask;
import com.iengage.client.model.VerveResponseWFTaskList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BPMApi
 */
@Ignore
public class BPMApiTest {

    private final BPMApi api = new BPMApi();

    
    /**
     * Assign task
     *
     * Assign BPM task, It will return task object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assignWFTaskTest() throws ApiException {
        Long assigneeUserId = null;
        Long taskId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String comment = null;
        Long dueDate = null;
        String fields = null;
        VerveResponseWFTask response = api.assignWFTask(assigneeUserId, taskId, loggedInUserId, accessToken, clientToken, comment, dueDate, fields);

        // TODO: test validations
    }
    
    /**
     * Complete task
     *
     * Complete BPM task, It will return task object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void completeWFTaskTest() throws ApiException {
        Long userId = null;
        Long taskId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String transition = null;
        String comment = null;
        String fields = null;
        VerveResponseWFTask response = api.completeWFTask(userId, taskId, loggedInUserId, accessToken, clientToken, transition, comment, fields);

        // TODO: test validations
    }
    
    /**
     * Get task by task id
     *
     * Return the BPM task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBPMTasksTest() throws ApiException {
        Long userId = null;
        Long taskId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseWFTask response = api.getBPMTasks(userId, taskId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of BPM task assigned to user
     *
     * Return the list of BPM task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSearchTaskTest() throws ApiException {
        Long userId = null;
        String searchString = null;
        Boolean completed = null;
        Boolean searchByUserRoles = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String type = null;
        Long organizationId = null;
        String fields = null;
        VerveResponseWFTaskList response = api.getSearchTask(userId, searchString, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of BPM task assigned to user
     *
     * Return the list of BPM task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTasksByEntityTest() throws ApiException {
        Long userId = null;
        Long entityId = null;
        Boolean completed = null;
        Boolean searchByUserRoles = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseWFTaskList response = api.getTasksByEntity(userId, entityId, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of BPM task assigned to user
     *
     * Return the list of BPM task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserBPMTasksTest() throws ApiException {
        Long userId = null;
        Boolean completed = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String type = null;
        Long organizationId = null;
        String fields = null;
        VerveResponseWFTaskList response = api.getUserBPMTasks(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of BPM task assigned to user roles
     *
     * Return the list of BPM task
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserRolesBPMTasksTest() throws ApiException {
        Long userId = null;
        Boolean completed = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String type = null;
        Long organizationId = null;
        String fields = null;
        VerveResponseWFTaskList response = api.getUserRolesBPMTasks(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields);

        // TODO: test validations
    }
    
}
