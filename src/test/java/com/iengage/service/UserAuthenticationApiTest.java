/*
 * Stakeholder engagement API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.client.model.User;
import com.iengage.client.model.VerveResponseOrganizationList;
import com.iengage.client.model.VerveResponseUser;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserAuthenticationApi
 */

public class UserAuthenticationApiTest {

    private final UserAuthenticationApi api = new UserAuthenticationApi();

    
    /**
     * Add device token
     *
     * Add device token to push notification from server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addNotificationRegisteredIdTest() throws ApiException {
        String registeredId = null;
        String type = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Boolean response = api.addNotificationRegisteredId(registeredId, type, loggedInUserId, accessToken, clientToken);

        // TODO: test validations
    }
    
    /**
     * Add/Register new user
     *
     * Add/Register new user. Returns the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserTest() throws ApiException {
        String screenName = null;
        String emailId = null;
        String password = null;
        String clientToken = null;
        String firstName = null;
        String middleName = null;
        String lastName = null;
        Integer birthDay = null;
        Integer birthMonth = null;
        Integer birthYear = null;
        String additionInformation = null;
        VerveResponseUser response = api.addUser(screenName, emailId, password, clientToken, firstName, middleName, lastName, birthDay, birthMonth, birthYear, additionInformation);

        // TODO: test validations
    }
    
    /**
     * Authenticate User
     *
     * Authenticate with username &amp; password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Ignore
    public void authenticateTest() throws ApiException {
    	String userName = "";
        String password = "";
        String clientToken = "";
        ApiClient apiClient = api.getApiClient();
        apiClient.setAccessToken("");
        api.setApiClient(apiClient);
        User response = api.authenticate(userName, password, clientToken);
        System.out.println("Access token::"+response.getAccessToken());
        System.out.println("User ID::"+response.getUserId());
        
        // TODO: test validations
    }
    
    /**
     * Change password
     *
     * Allows the user to change password. Returns true if successful
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        String currentPassword = null;
        String newPassword = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Boolean response = api.changePassword(currentPassword, newPassword, loggedInUserId, accessToken, clientToken);

        // TODO: test validations
    }
    
    /**
     * Delete user
     *
     * Allows the user to delete user. Returns the deleted user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        Long userId = null;
        String clientToken = null;
        VerveResponseUser response = api.deleteUser(userId, clientToken);

        // TODO: test validations
    }
    
    /**
     * Get list of organizations
     *
     * Return the list of organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrganizationsTest() throws ApiException {
        String loggedInUserId = "";
        String accessToken = "";
        String clientToken = "";
        ApiClient apiClient = api.getApiClient();
        apiClient.setAccessToken("");
        api.setApiClient(apiClient);
        VerveResponseOrganizationList response = api.getOrganizations(loggedInUserId, accessToken, clientToken);
        System.out.println("response.getRecords:::"+response.getRecords());
        // TODO: test validations
    }
    
    /**
     * Logout
     *
     * Logout rest api session. Returns true if successful
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logoutTest() throws ApiException {
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Boolean response = api.logout(loggedInUserId, accessToken, clientToken);

        // TODO: test validations
    }
    
}
