/**
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.iengage.service;

import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.Configuration;
import com.iengage.auth.OAuth;
import com.iengage.client.model.VerveResponseUser;
import com.iengage.client.model.Association;
import com.iengage.client.model.User;
import com.iengage.client.model.VerveResponseAssociation;
import com.iengage.client.model.VerveResponseAssociationList;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserAuthenticationApi
 */
public class UserAuthenticationApiTest {

	private final ApiClient defaultClient = Configuration.getDefaultApiClient();
    private UserAuthenticationApi api = null;
    

    
    /**
     * Add device token
     *
     * Add device token to push notification from server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addNotificationRegisteredIdTest() throws ApiException {
        String registeredId = null;
        String type = null;
        String clientToken = null;;
        String requesterId = null;
        String accessToken = null;
		try{
			Boolean response = api.addNotificationRegisteredId(registeredId, type, clientToken, requesterId, accessToken);
			if(response == true){
				assert true;
			}
			else {
				assert false;
			}
		}catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
   
    }
    
    /**
     * Add/Register new user
     *
     * Add/Register new user. Returns the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addUserTest() throws ApiException {
        String screenName = null;
        String emailId = null;
        String password = null;
        String clientToken = null;;
        String firstName = null;
        String middleName = null;
        String lastName = null;
        Integer birthDay = null;
        Integer birthMonth = null;
        Integer birthYear = null;
        String additionInformation = null;
        defaultClient.setAccessToken(null);
        api = new UserAuthenticationApi(defaultClient);
        try {
			
			VerveResponseUser response = api.addUser(screenName, emailId, password, clientToken, firstName, middleName, lastName, birthDay, birthMonth, birthYear, additionInformation);
			if(response != null){
				System.out.println(response.getData().toString());
				assert true;
			}
			else {
				assert false;
			}
		}catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Authenticate User
     *
     * Authenticate with username &amp; password
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authenticateTest() throws ApiException {
        //ApiClient defaultClient = Configuration.getDefaultApiClient();
        
        // Configure OAuth2 access token for authorization: default
        defaultClient.setAccessToken(null);
        api = new UserAuthenticationApi(defaultClient);
        String userName = "satyaranjannaik2142@gmail.com";
        String password = "Tendulkar@2142#";
        String clientToken = null;;
        
		try{
			User response = api.authenticate(userName, password, clientToken);			
			if(response!=null){
				if(response.getEmailId().equals(userName)){
					assert true;
				}
			}
			else {
				assert false;
			}
		}catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Change password
     *
     * Allows the user to change password. Returns true if successful
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        String currentPassword = null;
        String newPassword = null;
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;
        defaultClient.setAccessToken(null);
        api = new UserAuthenticationApi(defaultClient);
        try{
			Boolean response = api.changePassword(currentPassword, newPassword, requesterId, clientToken, accessToken);
			if(response==true){
				assert true;
			}
			else {
				assert false;
			}
		}catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
			
    }
    
    /**
     * Create association
     *
     * Create association. Returns the association
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAssociationTest() throws ApiException {
        String name = null;
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;
        defaultClient.setAccessToken(null);
        api = new UserAuthenticationApi(defaultClient);
		try{
			VerveResponseAssociation response = api.createAssociation(name, requesterId, clientToken, accessToken);
			if(response!=null){
				System.out.println(response.getData().getName());
				assert true;
			}
			else{
				assert false;
			}
		}catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Delete user
     *
     * Allows the user to delete user. Returns the deleted user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        Long userId = null;
        String clientToken = null;;
        defaultClient.setAccessToken(null);
        api = new UserAuthenticationApi(defaultClient);
        try{
			VerveResponseUser response = api.deleteUser(userId, clientToken);
			if(response!=null){
				System.out.println("Deleting user");
				System.out.println(response.getMessage());
				assert true;
			}
			else{
				assert false;
			}
		}catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get list of associations
     *
     * Return the list of association
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAssociationsTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;
        defaultClient.setAccessToken(null);
        
		
		api = new UserAuthenticationApi(defaultClient);
        
		try{
			VerveResponseAssociationList response = api.getAssociations(requesterId, clientToken, accessToken);
			
			if(response!=null){
				System.out.println("Listing assocications");
				for(Association a:response.getList()){
					System.out.println(a.getAssociationId()+":"+a.getName());
				}
				assert true;
			}
			else{
				assert false;
			}
		}catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Logout
     *
     * Logout rest api session. Returns true if successful
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logoutTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;
        defaultClient.setAccessToken(null);
        api = new UserAuthenticationApi(defaultClient);
        User response = api.authenticate(requesterId, "Tendulkar@2142#", clientToken);
        System.out.println(response.getAccessToken());
       try{
		   Boolean resp = api.logout(requesterId, clientToken, accessToken);
			if(response == true)
				assert true;
			else
				assert false;
		}catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
       
        // TODO: test validations
    }
    
}
