/**
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.iengage.service;

import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.Configuration;
import com.iengage.client.model.VerveResponseUser;
import com.iengage.client.model.VerveResponseUserDetail;
import com.iengage.client.model.VerveResponseUserList;
import com.iengage.client.model.VerveResponseRequestForMeList;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SocialApi
 */

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class SocialApiTest {

    private  SocialApi api = null;
    private final ApiClient defaultClient = Configuration.getDefaultApiClient();

    
    /**
     * Add Friend
     *
     * Allows the user to add friend. Returns true if successful
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void b_addFriendTest() throws ApiException {
        String id1 = null;
        String id2 = null;
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;
        

        defaultClient.setAccessToken(null);
        api = new SocialApi(defaultClient);
        
        
        System.out.println("\n\n\n >>>>>>>>>> Add Friend Test >>>>>>>>>>>>>>");
        try{
        	Boolean response = api.addFriend(id1, id2, requesterId, clientToken, accessToken);
        	if(response==true){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * confirm/ignore friend request
     *
     * Allows the user to confirm/ignore friend request. Returns true if successful
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void c_confirmFriendRequestTest() throws ApiException {
        Long userId = null;
        Integer status = 1;
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;


        defaultClient.setAccessToken(null);
        api = new SocialApi(defaultClient);
        
        
        System.out.println("\n\n\n >>>>>>>>>> Confirm Friend Test >>>>>>>>>>>>>>");
        try{
        	Boolean response = api.confirmFriendRequest(userId, status, requesterId, clientToken, accessToken);
        	if(response==true){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Follow user
     *
     * Allows to follow a user. Returns true if successful
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void d_followTest() throws ApiException {
        String follower = null;
        String followee = null;
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;
        

        defaultClient.setAccessToken(null);
        api = new SocialApi(defaultClient);
        
        
        System.out.println("\n\n\n >>>>>>>>>> Follow Friend Test >>>>>>>>>>>>>>");
        try{
        	Boolean response = api.follow(follower, followee, requesterId, clientToken, accessToken);
        	if(response==true){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get user by id 
     *
     * Returns the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void e_getUserTest() throws ApiException {
        Long userId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
        

        defaultClient.setAccessToken(null);
        api = new SocialApi(defaultClient);
        
        
        System.out.println("\n\n\n >>>>>>>>>> Get User Test >>>>>>>>>>>>>>");
        try{
        	VerveResponseUser response = api.getUser(userId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get user details 
     *
     * Returns the user details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void f_getUserDetailTest() throws ApiException {
        Long userId = null;
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;
        

        defaultClient.setAccessToken(null);
        api = new SocialApi(defaultClient);
        
        
        System.out.println("\n\n\n >>>>>>>>>> Get User Detail Test >>>>>>>>>>>>>>");
        try{
        	VerveResponseUserDetail response = api.getUserDetail(userId, requesterId, clientToken, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get list of followers
     *
     * Returns the list of followers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void g_getUserFollowersTest() throws ApiException {
        Long userId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
       

        defaultClient.setAccessToken(null);
        api = new SocialApi(defaultClient);
        
        
        System.out.println("\n\n\n >>>>>>>>>> Get User Followers Test >>>>>>>>>>>>>>");
        try{
        	VerveResponseUserList response = api.getUserFollowers(userId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get list of users that are being followed
     *
     * Returns the list of users that are being followed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void h_getUserFollowingTest() throws ApiException {
        Long userId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
       

        defaultClient.setAccessToken(null);
        api = new SocialApi(defaultClient);
        
        
        System.out.println("\n\n\n >>>>>>>>>> Get User Following Test >>>>>>>>>>>>>>");
        try{
        	VerveResponseUserList response = api.getUserFollowing(userId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get list of friends
     *
     * Returns the list of friends
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void i_getUserFriendsTest() throws ApiException {
        Long userId = null;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;
       
        defaultClient.setAccessToken(null);
        api = new SocialApi(defaultClient);
         
        System.out.println("\n\n\n >>>>>>>>>> Get User Friends Test >>>>>>>>>>>>>>");
        try{
        	VerveResponseUserList response = api.getUserFriends(userId, requesterId, clientToken, fields, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Remove friend 
     *
     * Allows the user to remove friend. Returns true if successful
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void l_removeFriendTest() throws ApiException {
        String id1 = null;
        String id2 = null;
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;
        
        defaultClient.setAccessToken(null);
        api = new SocialApi(defaultClient);
        
        System.out.println("\n\n\n >>>>>>>>>> Remove Friend Test >>>>>>>>>>>>>>");
        try{
        	Boolean response = api.removeFriend(id1, id2, requesterId, clientToken, accessToken);
        	if(response==true){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Send friend request
     *
     * Allows user to send a friend request. Returns true if successful
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void a_requestFriendTest() throws ApiException {
        Long userId = null;
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;

        defaultClient.setAccessToken(null);
        api = new SocialApi(defaultClient);
        
        
        System.out.println("\n\n\n >>>>>>>>>> Request Friend Test >>>>>>>>>>>>>>");
        try{
        	Boolean response = api.requestFriend(userId, requesterId, clientToken, accessToken);
        	if(response==true){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get list of friend requests
     *
     * Returns the list of friend requests
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void j_requestsForMeTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;

        defaultClient.setAccessToken(null);
        api = new SocialApi(defaultClient);
        
        
        System.out.println("\n\n\n >>>>>>>>>> Requests for me test >>>>>>>>>>>>>>");
        try{
        	VerveResponseRequestForMeList response = api.requestsForMe(requesterId, clientToken, accessToken);
        	if(response!=null){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Unfollow user
     *
     * Allows to unfollow user. Returns true if successful
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void k_unfollowTest() throws ApiException {
        String unfollower = null;
        String unfollowee = null;
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;

        defaultClient.setAccessToken(null);
        api = new SocialApi(defaultClient);
        
        
        System.out.println("\n\n\n >>>>>>>>>> Unfollow Test >>>>>>>>>>>>>>");
        try{
        	Boolean response = api.unfollow(unfollower, unfollowee, requesterId, clientToken, accessToken);
        	if(response==true){
        		System.out.println(response);
        		assert true;
        	}
        	else{
        		assert false;
        	}
        }catch(ApiException e){
        	System.out.println(e.getResponseBody());
        	assert false;
        }catch(Exception e){
        	e.printStackTrace();
        	assert false;
        }
        // TODO: test validations
    }
    
}
