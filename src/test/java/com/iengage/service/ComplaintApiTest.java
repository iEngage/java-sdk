/*
 * Stakeholder engagement API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiException;
import com.iengage.client.model.Attachment;
import com.iengage.client.model.VerveResponseComplaint;
import com.iengage.client.model.VerveResponseComplaintCategory;
import com.iengage.client.model.VerveResponseComplaintCategoryList;
import com.iengage.client.model.VerveResponseComplaintList;
import com.iengage.client.model.VerveResponseSolution;
import com.iengage.client.model.VerveResponseSolutionList;
import com.iengage.client.model.VerveResponseUserList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ComplaintApi
 */
@Ignore
public class ComplaintApiTest {

    private final ComplaintApi api = new ComplaintApi();

    
    /**
     * Share complaint without attachment
     *
     * Allows the user to share complaint. Returns complaint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addComplaintTest() throws ApiException {
        Long categoryId = null;
        String complaintTitle = null;
        String complaintDescription = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        VerveResponseComplaint response = api.addComplaint(categoryId, complaintTitle, complaintDescription, loggedInUserId, accessToken, clientToken);

        // TODO: test validations
    }
    
    /**
     * Share complaint with attachment
     *
     * Allows the user to share complaints. Returns the complaint object
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addComplaint_0Test() throws ApiException {
        Long body = null;
        String body2 = null;
        String body3 = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        List<Attachment> body4 = null;
        VerveResponseComplaint response = api.addComplaint_0(body, body2, body3, loggedInUserId, accessToken, clientToken, body4);

        // TODO: test validations
    }
    
    /**
     * Share solution on complaint
     *
     * Allows the user to share a solution on complaint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSolutionTest() throws ApiException {
        Long complaintId = null;
        String solution = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseSolution response = api.addSolution(complaintId, solution, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Create complaint category
     *
     * Allows the user to create complaint category. Returns the created complaint category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createComplaintCategoryTest() throws ApiException {
        String name = null;
        String description = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long organizationId = null;
        String fields = null;
        VerveResponseComplaintCategory response = api.createComplaintCategory(name, description, loggedInUserId, accessToken, clientToken, organizationId, fields);

        // TODO: test validations
    }
    
    /**
     * Delete complaint
     *
     * Allows the user to delete complaint. Returns the deleted complaint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteComplaintTest() throws ApiException {
        Long complaintId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaint response = api.deleteComplaint(complaintId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Delete complaint cotegory
     *
     * Returns the deleted complaint category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteComplaintCategoryTest() throws ApiException {
        Long categoryId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaintCategory response = api.deleteComplaintCategory(categoryId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Delete solution
     *
     * Allows the user to delete solution. Returns the deleted solution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSolutionTest() throws ApiException {
        Long solutionId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseSolution response = api.deleteSolution(solutionId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Dislike Solution
     *
     * Allows the user to dislike the solution. Returns the disliked solution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dislikeSolutionTest() throws ApiException {
        Long complaintId = null;
        Long solutionId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseSolution response = api.dislikeSolution(complaintId, solutionId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get complaint by id
     *
     * Returns the complaint by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getComplaintTest() throws ApiException {
        Long complaintId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaint response = api.getComplaint(complaintId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of complaint category
     *
     * Returns the list of complaint category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getComplaintCategoriesTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaintCategoryList response = api.getComplaintCategories(start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of all complaint visible for user
     *
     * Returns the list of all complaints visible for user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getComplaintsForUserTest() throws ApiException {
        String complaintStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long categoryId = null;
        String fields = null;
        VerveResponseComplaintList response = api.getComplaintsForUser(complaintStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of complaints shared by your friends
     *
     * Returns the list of complaints shared by friends
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFriendsComplaintsTest() throws ApiException {
        String complaintStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long categoryId = null;
        String fields = null;
        VerveResponseComplaintList response = api.getFriendsComplaints(complaintStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended complaints
     *
     * Returns the list of recommended complaints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendComplaintTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaintList response = api.getRecommendComplaint(start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended complaints from DB
     *
     * Returns the list of recommended complaints from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendedComplaintsFromDBTest() throws ApiException {
        Long userId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaintList response = api.getRecommendedComplaintsFromDB(userId, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of recommended Users from DB
     *
     * Returns the list of recommended users from DB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendedUsersFromDBTest() throws ApiException {
        Long complaintId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseUserList response = api.getRecommendedUsersFromDB(complaintId, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of solutions by ComplaintId
     *
     * Return the list of solutions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSolutionsTest() throws ApiException {
        Long complaintId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseSolutionList response = api.getSolutions(complaintId, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of complaints shared by user
     *
     * Returns the list of complaints shared by the user himself
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserComplaintsTest() throws ApiException {
        Long userId = null;
        String complaintStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long categoryId = null;
        String fields = null;
        VerveResponseComplaintList response = api.getUserComplaints(userId, complaintStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of Complaint categories subscribed by user
     *
     * Returns the list of complaint categories subscribed by user himself
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserSubscribedComplaintCategoriesTest() throws ApiException {
        Long userId = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaintCategoryList response = api.getUserSubscribedComplaintCategories(userId, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of complaints subscribed by user
     *
     * Returns the list of complaints subscribed by user himself
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserSubscribedComplaintsTest() throws ApiException {
        Long userId = null;
        String complaintStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        Long categoryId = null;
        String fields = null;
        VerveResponseComplaintList response = api.getUserSubscribedComplaints(userId, complaintStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields);

        // TODO: test validations
    }
    
    /**
     * Like solution
     *
     * Allows the user to like the solution. Returns the liked solution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void likeSolutionTest() throws ApiException {
        Long complaintId = null;
        Long solutionId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseSolution response = api.likeSolution(complaintId, solutionId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Mark solution as a solution
     *
     * Allows the user to mark a solution. This means user is satisfied with the solution &amp; the complaint will be closed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markAsAnSolutionTest() throws ApiException {
        Long complaintId = null;
        Long solutionId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseSolution response = api.markAsAnSolution(complaintId, solutionId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Get list of complaints by search
     *
     * Returns the list of matching complaints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchComplaintsTest() throws ApiException {
        String searchText = null;
        String complaintStatus = null;
        Integer start = null;
        Integer end = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaint response = api.searchComplaints(searchText, complaintStatus, start, end, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Subscribe complaint
     *
     * Allows the user to subscribe a complaint. Returns the subscibed complaint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeComplaintTest() throws ApiException {
        Long complaintId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaint response = api.subscribeComplaint(complaintId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Subscribe complaint category
     *
     * Allows the user to subscribe complaint category. Returns the subscribed complaint category.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeComplaintCategoryTest() throws ApiException {
        Long categoryId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaintCategory response = api.subscribeComplaintCategory(categoryId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Unmark solution as a solution
     *
     * Allows the user to unmark a solution. This will remove the marked solution.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmarkAsAnSolutionTest() throws ApiException {
        Long complaintId = null;
        Long solutionId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseSolution response = api.unmarkAsAnSolution(complaintId, solutionId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe Complaint
     *
     * Allows the user to unsubscribe complaint. Returns the unsubscribed complaint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeComplaintTest() throws ApiException {
        Long complaintId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaint response = api.unsubscribeComplaint(complaintId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe complaint category
     *
     * Allows the user to unsubscribe complaint category. Returns the unsubscribed complaint category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeComplaintCategoryTest() throws ApiException {
        Long categoryId = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaintCategory response = api.unsubscribeComplaintCategory(categoryId, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Update complaint
     *
     * Allows the user to update complaint. Returns the updated complaint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateComplaintTest() throws ApiException {
        Long complaintId = null;
        String complaintTitle = null;
        String complaintDescription = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaint response = api.updateComplaint(complaintId, complaintTitle, complaintDescription, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Update complaint category
     *
     * Returns the updated complaint category
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateComplaintCategoryTest() throws ApiException {
        Long categoryId = null;
        String categoryName = null;
        String categoryDescription = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseComplaintCategory response = api.updateComplaintCategory(categoryId, categoryName, categoryDescription, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
    /**
     * Update solution
     *
     * Allows the user to update solution. Returns the updated solution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSolutionTest() throws ApiException {
        Long solutionId = null;
        String solution = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        String fields = null;
        VerveResponseSolution response = api.updateSolution(solutionId, solution, loggedInUserId, accessToken, clientToken, fields);

        // TODO: test validations
    }
    
}
