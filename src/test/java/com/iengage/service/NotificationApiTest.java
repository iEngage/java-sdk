/**
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.iengage.service;

import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.Configuration;
import com.iengage.client.model.Notification;
import com.iengage.client.model.VerveResponseNotificationList;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationApi
 */

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class NotificationApiTest {

    private  NotificationApi api = null;
    private final ApiClient defaultClient = Configuration.getDefaultApiClient();

    
    /**
     * Create custom notification
     *
     * This service allows a user to create a notification. The following fields(key:value) are required to be present in the Notification JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**  1. title  2. body  3. extraData  4. roleName OR toUser: { emailId }
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addNotificationTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;;
        Notification body = null;
        String accessToken = null;
        
        // Boolean response = api.addNotification(requesterId, clientToken, body, accessToken);

       defaultClient.setAccessToken(null);
       api = new NotificationApi(defaultClient);
       System.out.println("\n\n\n<<<<<<<<<<<< Add Notification Test >>>>>>>>>>>>>>>");
       try{
    	   Boolean response = api.addNotification(requesterId, clientToken, body, accessToken);
    	   if(response==true){
    		   assert true;
    	   }
    	   else{
    		   assert false;
    	   }
       }catch(ApiException e){
    	   System.out.println(e.getResponseBody());
    	   assert false;
       }catch(Exception e){
    	   e.printStackTrace();
    	   assert false;
       }
        // TODO: test validations
    }
    
    /**
     * Get list of notifications
     *
     * Return the list of notifications
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationsTest() throws ApiException {
        String type = null;
        Integer start = 0;
        Integer end = 10;
        String requesterId = null;
        String clientToken = null;;
        String fields = null;
        String accessToken = null;

        defaultClient.setAccessToken(null);
        api = new NotificationApi(defaultClient);
        System.out.println("\n\n\n<<<<<<<<<<<< Get Notifications Test >>>>>>>>>>>>>>>");
        try{
        	VerveResponseNotificationList response = api.getNotifications(type, start, end, requesterId, clientToken, fields, accessToken);
     	   if(response!=null){
     		   System.out.println(response);
     		   assert true;
     	   }
     	   else{
     		   assert false;
     	   }
        }catch(ApiException e){
     	   System.out.println(e.getResponseBody());
     	   assert false;
        }catch(Exception e){
     	   e.printStackTrace();
     	   assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Mark all notification as read
     *
     * Allows the user to mark all the notification as read
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markAllNotificationAsReadTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;

        defaultClient.setAccessToken(null);
        api = new NotificationApi(defaultClient);
        System.out.println("\n\n\n<<<<<<<<<<<< Mark all Notification as Read Test >>>>>>>>>>>>>>>");
        try{
        	Boolean response = api.markAllNotificationAsRead(requesterId, clientToken, accessToken);
     	   if(response==true){
     		   assert true;
     	   }
     	   else{
     		   assert false;
     	   }
        }catch(ApiException e){
     	   System.out.println(e.getResponseBody());
     	   assert false;
        }catch(Exception e){
     	   e.printStackTrace();
     	   assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Mark notification as read
     *
     * Allows the user to mark the notification as read
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markNotificationAsReadTest() throws ApiException {
        Long notificationId = 638938L;
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;

        defaultClient.setAccessToken(null);
        api = new NotificationApi(defaultClient);
        System.out.println("\n\n\n<<<<<<<<<<<<Mark Notification as Read Test >>>>>>>>>>>>>>>");
        try{
        	Boolean response = api.markNotificationAsRead(notificationId, requesterId, clientToken, accessToken);
     	   if(response==true){
     		   assert true;
     	   }
     	   else{
     		   assert false;
     	   }
        }catch(ApiException e){
     	   System.out.println(e.getResponseBody());
     	   assert false;
        }catch(Exception e){
     	   e.printStackTrace();
     	   assert false;
        }
        // TODO: test validations
    }
    
    /**
     * Get notifications count
     *
     * Returns the notification count
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationCountTest() throws ApiException {
        String type = null;
        String requesterId = null;
        String clientToken = null;;
        String accessToken = null;

        defaultClient.setAccessToken(null);
        api = new NotificationApi(defaultClient);
        System.out.println("\n\n\n<<<<<<<<<<<< Notification Count Test >>>>>>>>>>>>>>>");
        try{
        	Long response = api.notificationCount(type, requesterId, clientToken, accessToken);
     	   if(response!=null){
     		   System.out.println(response);
     		   assert true;
     	   }
     	   else{
     		   assert false;
     	   }
        }catch(ApiException e){
     	   System.out.println(e.getResponseBody());
     	   assert false;
        }catch(Exception e){
     	   e.printStackTrace();
     	   assert false;
        }
        // TODO: test validations
    }
    
}
