/*
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiException;
import com.iengage.client.model.Comment;
import java.io.File;
import com.iengage.client.model.Idea;
import com.iengage.client.model.VerveResponseComment;
import com.iengage.client.model.VerveResponseCommentList;
import com.iengage.client.model.VerveResponseIdea;
import com.iengage.client.model.VerveResponseIdeaList;
import com.iengage.client.model.VerveResponseIdeaUserRatingList;
import com.iengage.client.model.VerveResponseString;
import com.iengage.client.model.VerveResponseUserList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IdeaApi
 */
@Ignore
public class IdeaApiTest {

    private final IdeaApi api = new IdeaApi();

    
    /**
     * Delete comment
     *
     * Allows the user to delete comment. Returns the deleted comment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentTest() throws ApiException {
        Long commentId = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseComment response = api.deleteComment(commentId, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Delete idea
     *
     * Allows the user to delete idea. Returns the deleted idea
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIdeaTest() throws ApiException {
        Long ideaId = null;
        String requesterId = null;
        String clientToken = null;
        File file = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdea response = api.deleteIdea(ideaId, requesterId, clientToken, file, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Follow idea
     *
     * Allows the user to follow idea. Returns the followed idea
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void followIdeaTest() throws ApiException {
        Long ideaId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdea response = api.followIdea(ideaId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of Ideas
     *
     * Returns the list of ideas
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllIdeasTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdeaList response = api.getAllIdeas(start, end, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of ideas that users are following
     *
     * Returns the list of ideas being followed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFollowingIdeasTest() throws ApiException {
        Long userId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdeaList response = api.getFollowingIdeas(userId, start, end, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of ideas in group
     *
     * Return the ideas list on group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupIdeasTest() throws ApiException {
        Long userId = null;
        Long groupId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdeaList response = api.getGroupIdeas(userId, groupId, start, end, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get idea by id
     *
     * Returns the idea by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIdeaTest() throws ApiException {
        Long ideaId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdea response = api.getIdea(ideaId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of comments on idea
     *
     * Returns the list of comments on idea
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIdeaCommentTest() throws ApiException {
        Long ideaId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseCommentList response = api.getIdeaComment(ideaId, start, end, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of followers for this idea
     *
     * Returns the list of followers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIdeaFollowersTest() throws ApiException {
        Long ideaId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseUserList response = api.getIdeaFollowers(ideaId, start, end, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get rating parameters of idea by user
     *
     * Return the rating parameters of idea by user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIdeaRatingParametersTest() throws ApiException {
        Long userId = null;
        String ideaStage = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseString response = api.getIdeaRatingParameters(userId, ideaStage, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of ideas that are rated by user 
     *
     * Return the rated ideas list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIdeaRatingsTest() throws ApiException {
        Long userId = null;
        Long ideaId = null;
        String ideaStage = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseIdeaUserRatingList response = api.getIdeaRatings(userId, ideaId, ideaStage, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get the list of recommended ideas
     *
     * Returns the list of recommended ideas 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendIdeasTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdeaList response = api.getRecommendIdeas(start, end, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get the list of top ideas
     *
     * Return the list of top ideas
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTopIdeasTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdeaList response = api.getTopIdeas(start, end, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of ideas shared by user
     *
     * Returns the list of ideas shared by user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserIdeasTest() throws ApiException {
        Long userId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdeaList response = api.getUserIdeas(userId, start, end, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of ideas rated by user
     *
     * Return the list of ideas rated by user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserRateIdeasTest() throws ApiException {
        Long userId = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdeaList response = api.getUserRateIdeas(userId, start, end, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Rate an idea
     *
     * Allows the user to rate an idea. Returns the rated idea
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rateIdeaTest() throws ApiException {
        Long userId = null;
        Long ideaId = null;
        String ideaStage = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdea response = api.rateIdea(userId, ideaId, ideaStage, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Give rating on idea
     *
     * Allows the user to give a rating on idea. Returns the rated idea
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rateIdea_0Test() throws ApiException {
        Long userId = null;
        Long ideaId = null;
        String ideaStage = null;
        String parameter = null;
        Double rating = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdea response = api.rateIdea_0(userId, ideaId, ideaStage, parameter, rating, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Get list of matching ideas
     *
     * Returns the list of matching ideas
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchIdeasTest() throws ApiException {
        String searchText = null;
        Integer start = null;
        Integer end = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdeaList response = api.searchIdeas(searchText, start, end, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Share Idea with attachments
     *
     * Allows the user to share idea with attachments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shareFormIdeaTest() throws ApiException {
        String title = null;
        String description = null;
        String groupId = null;
        File file = null;
        String loggedInUserId = null;
        String accessToken = null;
        String clientToken = null;
        VerveResponseIdea response = api.shareFormIdea(title, description, groupId, file, loggedInUserId, accessToken, clientToken);

        // TODO: test validations
    }
    
    /**
     * Share idea  
     *
     * This service allows a user to share a idea. The following fields(key:value) are required to be present in the Idea JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. ideaTitle &lt;/br&gt;2. ideaDescription &lt;/br&gt;3. group: { groupId } &lt;/br&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shareIdeaTest() throws ApiException {
        String requesterId = null;
        String clientToken = null;
        Idea body = null;
        String accessToken = null;
        VerveResponseIdea response = api.shareIdea(requesterId, clientToken, body, accessToken);

        // TODO: test validations
    }
    
    /**
     * Comment on shared idea
     *
     * This service allows a user to comment on a idea. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.&lt;/br&gt;&lt;b&gt;Required fields &lt;/br&gt;1. ideaId (Path Parameter)&lt;/br&gt;2. commentText &lt;/br&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shareIdeaCommentTest() throws ApiException {
        Long ideaId = null;
        String requesterId = null;
        String clientToken = null;
        Comment body = null;
        String accessToken = null;
        VerveResponseComment response = api.shareIdeaComment(ideaId, requesterId, clientToken, body, accessToken);

        // TODO: test validations
    }
    
    /**
     * Unfollow idea
     *
     * Allows the user to unfollow idea. Returns the unfollowed idea
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unfollowIdeaTest() throws ApiException {
        Long ideaId = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdea response = api.unfollowIdea(ideaId, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
    /**
     * Update comment
     *
     * Allows the user to update comment. Returns the updated comment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCommetTest() throws ApiException {
        Long commentId = null;
        String commentText = null;
        String requesterId = null;
        String clientToken = null;
        String accessToken = null;
        VerveResponseComment response = api.updateCommet(commentId, commentText, requesterId, clientToken, accessToken);

        // TODO: test validations
    }
    
    /**
     * Update idea
     *
     * Allows the user to update idea. Returns the updated idea
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIdeaTest() throws ApiException {
        Long ideaId = null;
        String ideaTitle = null;
        String ideaDescription = null;
        String requesterId = null;
        String clientToken = null;
        String fields = null;
        String accessToken = null;
        VerveResponseIdea response = api.updateIdea(ideaId, ideaTitle, ideaDescription, requesterId, clientToken, fields, accessToken);

        // TODO: test validations
    }
    
}
