/**
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.iengage.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * FlowFinder
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-18T06:00:03.235Z")
public class FlowFinder   {
  @SerializedName("question")
  private Double question = null;

  @SerializedName("complaint")
  private Double complaint = null;

  @SerializedName("suggestion")
  private Double suggestion = null;

  @SerializedName("appreciation")
  private Double appreciation = null;

  @SerializedName("comment")
  private Double comment = null;

  public FlowFinder question(Double question) {
    this.question = question;
    return this;
  }

   /**
   * Get question
   * @return question
  **/
  @ApiModelProperty(example = "null", value = "")
  public Double getQuestion() {
    return question;
  }

  public void setQuestion(Double question) {
    this.question = question;
  }

  public FlowFinder complaint(Double complaint) {
    this.complaint = complaint;
    return this;
  }

   /**
   * Get complaint
   * @return complaint
  **/
  @ApiModelProperty(example = "null", value = "")
  public Double getComplaint() {
    return complaint;
  }

  public void setComplaint(Double complaint) {
    this.complaint = complaint;
  }

  public FlowFinder suggestion(Double suggestion) {
    this.suggestion = suggestion;
    return this;
  }

   /**
   * Get suggestion
   * @return suggestion
  **/
  @ApiModelProperty(example = "null", value = "")
  public Double getSuggestion() {
    return suggestion;
  }

  public void setSuggestion(Double suggestion) {
    this.suggestion = suggestion;
  }

  public FlowFinder appreciation(Double appreciation) {
    this.appreciation = appreciation;
    return this;
  }

   /**
   * Get appreciation
   * @return appreciation
  **/
  @ApiModelProperty(example = "null", value = "")
  public Double getAppreciation() {
    return appreciation;
  }

  public void setAppreciation(Double appreciation) {
    this.appreciation = appreciation;
  }

  public FlowFinder comment(Double comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @ApiModelProperty(example = "null", value = "")
  public Double getComment() {
    return comment;
  }

  public void setComment(Double comment) {
    this.comment = comment;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowFinder flowFinder = (FlowFinder) o;
    return Objects.equals(this.question, flowFinder.question) &&
        Objects.equals(this.complaint, flowFinder.complaint) &&
        Objects.equals(this.suggestion, flowFinder.suggestion) &&
        Objects.equals(this.appreciation, flowFinder.appreciation) &&
        Objects.equals(this.comment, flowFinder.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(question, complaint, suggestion, appreciation, comment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowFinder {\n");
    
    sb.append("    question: ").append(toIndentedString(question)).append("\n");
    sb.append("    complaint: ").append(toIndentedString(complaint)).append("\n");
    sb.append("    suggestion: ").append(toIndentedString(suggestion)).append("\n");
    sb.append("    appreciation: ").append(toIndentedString(appreciation)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

