/**
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.iengage.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.iengage.client.model.CommandInfo;
import com.iengage.client.model.DataFlavor;
import com.iengage.client.model.DataSource;
import com.iengage.client.model.InputStream;
import com.iengage.client.model.OutputStream;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;


/**
 * DataHandler
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-18T06:00:03.235Z")
public class DataHandler   {
  @SerializedName("dataSource")
  private DataSource dataSource = null;

  @SerializedName("allCommands")
  private List<CommandInfo> allCommands = new ArrayList<CommandInfo>();

  @SerializedName("preferredCommands")
  private List<CommandInfo> preferredCommands = new ArrayList<CommandInfo>();

  @SerializedName("transferDataFlavors")
  private List<DataFlavor> transferDataFlavors = new ArrayList<DataFlavor>();

  @SerializedName("name")
  private String name = null;

  @SerializedName("inputStream")
  private InputStream inputStream = null;

  @SerializedName("content")
  private Object content = null;

  @SerializedName("contentType")
  private String contentType = null;

  @SerializedName("outputStream")
  private OutputStream outputStream = null;

  public DataHandler dataSource(DataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

   /**
   * Get dataSource
   * @return dataSource
  **/
  @ApiModelProperty(example = "null", value = "")
  public DataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(DataSource dataSource) {
    this.dataSource = dataSource;
  }

  public DataHandler allCommands(List<CommandInfo> allCommands) {
    this.allCommands = allCommands;
    return this;
  }

  public DataHandler addAllCommandsItem(CommandInfo allCommandsItem) {
    this.allCommands.add(allCommandsItem);
    return this;
  }

   /**
   * Get allCommands
   * @return allCommands
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<CommandInfo> getAllCommands() {
    return allCommands;
  }

  public void setAllCommands(List<CommandInfo> allCommands) {
    this.allCommands = allCommands;
  }

  public DataHandler preferredCommands(List<CommandInfo> preferredCommands) {
    this.preferredCommands = preferredCommands;
    return this;
  }

  public DataHandler addPreferredCommandsItem(CommandInfo preferredCommandsItem) {
    this.preferredCommands.add(preferredCommandsItem);
    return this;
  }

   /**
   * Get preferredCommands
   * @return preferredCommands
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<CommandInfo> getPreferredCommands() {
    return preferredCommands;
  }

  public void setPreferredCommands(List<CommandInfo> preferredCommands) {
    this.preferredCommands = preferredCommands;
  }

  public DataHandler transferDataFlavors(List<DataFlavor> transferDataFlavors) {
    this.transferDataFlavors = transferDataFlavors;
    return this;
  }

  public DataHandler addTransferDataFlavorsItem(DataFlavor transferDataFlavorsItem) {
    this.transferDataFlavors.add(transferDataFlavorsItem);
    return this;
  }

   /**
   * Get transferDataFlavors
   * @return transferDataFlavors
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<DataFlavor> getTransferDataFlavors() {
    return transferDataFlavors;
  }

  public void setTransferDataFlavors(List<DataFlavor> transferDataFlavors) {
    this.transferDataFlavors = transferDataFlavors;
  }

  public DataHandler name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DataHandler inputStream(InputStream inputStream) {
    this.inputStream = inputStream;
    return this;
  }

   /**
   * Get inputStream
   * @return inputStream
  **/
  @ApiModelProperty(example = "null", value = "")
  public InputStream getInputStream() {
    return inputStream;
  }

  public void setInputStream(InputStream inputStream) {
    this.inputStream = inputStream;
  }

  public DataHandler content(Object content) {
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @ApiModelProperty(example = "null", value = "")
  public Object getContent() {
    return content;
  }

  public void setContent(Object content) {
    this.content = content;
  }

  public DataHandler contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * Get contentType
   * @return contentType
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }

  public DataHandler outputStream(OutputStream outputStream) {
    this.outputStream = outputStream;
    return this;
  }

   /**
   * Get outputStream
   * @return outputStream
  **/
  @ApiModelProperty(example = "null", value = "")
  public OutputStream getOutputStream() {
    return outputStream;
  }

  public void setOutputStream(OutputStream outputStream) {
    this.outputStream = outputStream;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataHandler dataHandler = (DataHandler) o;
    return Objects.equals(this.dataSource, dataHandler.dataSource) &&
        Objects.equals(this.allCommands, dataHandler.allCommands) &&
        Objects.equals(this.preferredCommands, dataHandler.preferredCommands) &&
        Objects.equals(this.transferDataFlavors, dataHandler.transferDataFlavors) &&
        Objects.equals(this.name, dataHandler.name) &&
        Objects.equals(this.inputStream, dataHandler.inputStream) &&
        Objects.equals(this.content, dataHandler.content) &&
        Objects.equals(this.contentType, dataHandler.contentType) &&
        Objects.equals(this.outputStream, dataHandler.outputStream);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSource, allCommands, preferredCommands, transferDataFlavors, name, inputStream, content, contentType, outputStream);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataHandler {\n");
    
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    allCommands: ").append(toIndentedString(allCommands)).append("\n");
    sb.append("    preferredCommands: ").append(toIndentedString(preferredCommands)).append("\n");
    sb.append("    transferDataFlavors: ").append(toIndentedString(transferDataFlavors)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    inputStream: ").append(toIndentedString(inputStream)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    outputStream: ").append(toIndentedString(outputStream)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

