/**
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.iengage.service;

import com.iengage.ApiCallback;
import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.ApiResponse;
import com.iengage.Configuration;
import com.iengage.Pair;
import com.iengage.ProgressRequestBody;
import com.iengage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.iengage.client.model.VerveResponseComment;
import com.iengage.client.model.Comment;
import com.iengage.client.model.Milestone;
import com.iengage.client.model.VerveResponseMilestone;
import com.iengage.client.model.VerveResponseTask;
import com.iengage.client.model.Task;
import com.iengage.client.model.VerveResponseMilestoneList;
import com.iengage.client.model.VerveResponseCommentList;
import com.iengage.client.model.VerveResponseTaskList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectManagementApi {
    private ApiClient apiClient;

    public ProjectManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectManagementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addMilestoneComment */
    private com.squareup.okhttp.Call addMilestoneCommentCall(Long milestoneId, String requesterId, String clientToken, Comment body, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling addMilestoneComment(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling addMilestoneComment(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addMilestoneComment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/milestones/{milestoneId}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "milestoneId" + "\\}", apiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Comment on milestone
     * This service allows a user to comment on a milestone. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  **Required fields**  1. milestoneId (Path Parameter) 2. commentText  
     * @param milestoneId milestoneId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseComment addMilestoneComment(Long milestoneId, String requesterId, String clientToken, Comment body, String accessToken) throws ApiException {
        ApiResponse<VerveResponseComment> resp = addMilestoneCommentWithHttpInfo(milestoneId, requesterId, clientToken, body, accessToken);
        return resp.getData();
    }

    /**
     * Comment on milestone
     * This service allows a user to comment on a milestone. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  **Required fields**  1. milestoneId (Path Parameter) 2. commentText  
     * @param milestoneId milestoneId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseComment> addMilestoneCommentWithHttpInfo(Long milestoneId, String requesterId, String clientToken, Comment body, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = addMilestoneCommentCall(milestoneId, requesterId, clientToken, body, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Comment on milestone (asynchronously)
     * This service allows a user to comment on a milestone. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  **Required fields**  1. milestoneId (Path Parameter) 2. commentText  
     * @param milestoneId milestoneId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMilestoneCommentAsync(Long milestoneId, String requesterId, String clientToken, Comment body, String accessToken, final ApiCallback<VerveResponseComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMilestoneCommentCall(milestoneId, requesterId, clientToken, body, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addTaskComment */
    private com.squareup.okhttp.Call addTaskCommentCall(Long taskId, String requesterId, String clientToken, Comment body, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling addTaskComment(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling addTaskComment(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addTaskComment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/milestones/tasks/{taskId}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Comment on task
     * This service allows a user to comment on a task. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  **Required fields**  1. **taskId (Path Parameter)**  2. **commentText**  
     * @param taskId taskId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseComment addTaskComment(Long taskId, String requesterId, String clientToken, Comment body, String accessToken) throws ApiException {
        ApiResponse<VerveResponseComment> resp = addTaskCommentWithHttpInfo(taskId, requesterId, clientToken, body, accessToken);
        return resp.getData();
    }

    /**
     * Comment on task
     * This service allows a user to comment on a task. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  **Required fields**  1. **taskId (Path Parameter)**  2. **commentText**  
     * @param taskId taskId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseComment> addTaskCommentWithHttpInfo(Long taskId, String requesterId, String clientToken, Comment body, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = addTaskCommentCall(taskId, requesterId, clientToken, body, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Comment on task (asynchronously)
     * This service allows a user to comment on a task. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  **Required fields**  1. **taskId (Path Parameter)**  2. **commentText**  
     * @param taskId taskId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTaskCommentAsync(Long taskId, String requesterId, String clientToken, Comment body, String accessToken, final ApiCallback<VerveResponseComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTaskCommentCall(taskId, requesterId, clientToken, body, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createMilestone */
    private com.squareup.okhttp.Call createMilestoneCall(String requesterId, String clientToken, Milestone body, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling createMilestone(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling createMilestone(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/milestones".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create milestone
     * This service allows a user to create a milestone. The following fields(key:value) are required to be present in the Milestone JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  **Required fields**  1. **milestoneTitle**  2. **milestoneDescription**  3. **dueDate**  4. **neverDue**  
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseMilestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseMilestone createMilestone(String requesterId, String clientToken, Milestone body, String accessToken) throws ApiException {
        ApiResponse<VerveResponseMilestone> resp = createMilestoneWithHttpInfo(requesterId, clientToken, body, accessToken);
        return resp.getData();
    }

    /**
     * Create milestone
     * This service allows a user to create a milestone. The following fields(key:value) are required to be present in the Milestone JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  **Required fields**  1. **milestoneTitle**  2. **milestoneDescription**  3. **dueDate**  4. **neverDue**  
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseMilestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseMilestone> createMilestoneWithHttpInfo(String requesterId, String clientToken, Milestone body, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = createMilestoneCall(requesterId, clientToken, body, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseMilestone>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create milestone (asynchronously)
     * This service allows a user to create a milestone. The following fields(key:value) are required to be present in the Milestone JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.  **Required fields**  1. **milestoneTitle**  2. **milestoneDescription**  3. **dueDate**  4. **neverDue**  
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMilestoneAsync(String requesterId, String clientToken, Milestone body, String accessToken, final ApiCallback<VerveResponseMilestone> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMilestoneCall(requesterId, clientToken, body, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseMilestone>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createTask */
    private com.squareup.okhttp.Call createTaskCall(Long milestoneId, String requesterId, String clientToken, Task body, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling createTask(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling createTask(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling createTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/milestones/{milestoneId}/tasks".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "milestoneId" + "\\}", apiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create task
     * This service allows a user to create a task. The following fields(key:value) are required to be present in the Task JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.   **Required fields**  1. **taskTitle**  2. **taskDescription**  3. **priority**  4. **dueDate**  5. **assigneeUserId**  6. **neverDue**  7. **user: { userId }**
     * @param milestoneId Milestone Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseTask createTask(Long milestoneId, String requesterId, String clientToken, Task body, String accessToken) throws ApiException {
        ApiResponse<VerveResponseTask> resp = createTaskWithHttpInfo(milestoneId, requesterId, clientToken, body, accessToken);
        return resp.getData();
    }

    /**
     * Create task
     * This service allows a user to create a task. The following fields(key:value) are required to be present in the Task JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.   **Required fields**  1. **taskTitle**  2. **taskDescription**  3. **priority**  4. **dueDate**  5. **assigneeUserId**  6. **neverDue**  7. **user: { userId }**
     * @param milestoneId Milestone Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseTask> createTaskWithHttpInfo(Long milestoneId, String requesterId, String clientToken, Task body, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = createTaskCall(milestoneId, requesterId, clientToken, body, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create task (asynchronously)
     * This service allows a user to create a task. The following fields(key:value) are required to be present in the Task JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.   **Required fields**  1. **taskTitle**  2. **taskDescription**  3. **priority**  4. **dueDate**  5. **assigneeUserId**  6. **neverDue**  7. **user: { userId }**
     * @param milestoneId Milestone Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTaskAsync(Long milestoneId, String requesterId, String clientToken, Task body, String accessToken, final ApiCallback<VerveResponseTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTaskCall(milestoneId, requesterId, clientToken, body, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteMilestone */
    private com.squareup.okhttp.Call deleteMilestoneCall(Long milestoneId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling deleteMilestone(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling deleteMilestone(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteMilestone(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/milestones/{milestoneId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "milestoneId" + "\\}", apiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete milestone
     * Allows the user to delete milestone. Returns the deleted milestone
     * @param milestoneId milestoneId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate        **A) Available values-**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate       5)status       6)priority       7)dueDate   *_/ (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseMilestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseMilestone deleteMilestone(Long milestoneId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseMilestone> resp = deleteMilestoneWithHttpInfo(milestoneId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Delete milestone
     * Allows the user to delete milestone. Returns the deleted milestone
     * @param milestoneId milestoneId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate        **A) Available values-**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate       5)status       6)priority       7)dueDate   *_/ (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseMilestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseMilestone> deleteMilestoneWithHttpInfo(Long milestoneId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteMilestoneCall(milestoneId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseMilestone>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete milestone (asynchronously)
     * Allows the user to delete milestone. Returns the deleted milestone
     * @param milestoneId milestoneId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate        **A) Available values-**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate       5)status       6)priority       7)dueDate   *_/ (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMilestoneAsync(Long milestoneId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseMilestone> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMilestoneCall(milestoneId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseMilestone>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteTask */
    private com.squareup.okhttp.Call deleteTaskCall(Long taskId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteTask(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling deleteTask(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/milestones/tasks/{taskId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete task
     * Allows the user to delete task. Returns the deleted task
     * @param taskId taskId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)taskId       2)taskTitle       3)taskDescription       4)dueDate        **A) Available values-**        1)taskId       2)taskTitle       3)taskDescription       4)status       5)priority       6)dueDate       7)milestoneName       8)groupType       9)groupName   *_/ (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseTask deleteTask(Long taskId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseTask> resp = deleteTaskWithHttpInfo(taskId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Delete task
     * Allows the user to delete task. Returns the deleted task
     * @param taskId taskId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)taskId       2)taskTitle       3)taskDescription       4)dueDate        **A) Available values-**        1)taskId       2)taskTitle       3)taskDescription       4)status       5)priority       6)dueDate       7)milestoneName       8)groupType       9)groupName   *_/ (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseTask> deleteTaskWithHttpInfo(Long taskId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaskCall(taskId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete task (asynchronously)
     * Allows the user to delete task. Returns the deleted task
     * @param taskId taskId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)taskId       2)taskTitle       3)taskDescription       4)dueDate        **A) Available values-**        1)taskId       2)taskTitle       3)taskDescription       4)status       5)priority       6)dueDate       7)milestoneName       8)groupType       9)groupName   *_/ (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaskAsync(Long taskId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaskCall(taskId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getMilestones */
    private com.squareup.okhttp.Call getMilestonesCall(String requesterId, String clientToken, Long organizationId, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getMilestones(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getMilestones(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/milestones".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organizationId", organizationId));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of milestones
     * Returns the list of milestones
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate        **A) Available values-**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate       5)status       6)priority       7)dueDate   *_/ (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseMilestoneList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseMilestoneList getMilestones(String requesterId, String clientToken, Long organizationId, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseMilestoneList> resp = getMilestonesWithHttpInfo(requesterId, clientToken, organizationId, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of milestones
     * Returns the list of milestones
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate        **A) Available values-**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate       5)status       6)priority       7)dueDate   *_/ (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseMilestoneList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseMilestoneList> getMilestonesWithHttpInfo(String requesterId, String clientToken, Long organizationId, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getMilestonesCall(requesterId, clientToken, organizationId, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseMilestoneList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of milestones (asynchronously)
     * Returns the list of milestones
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate        **A) Available values-**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate       5)status       6)priority       7)dueDate   *_/ (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMilestonesAsync(String requesterId, String clientToken, Long organizationId, String fields, String accessToken, final ApiCallback<VerveResponseMilestoneList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMilestonesCall(requesterId, clientToken, organizationId, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseMilestoneList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getMilestonesComments */
    private com.squareup.okhttp.Call getMilestonesCommentsCall(Long milestoneId, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling getMilestonesComments(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getMilestonesComments(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getMilestonesComments(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/milestones/{milestoneId}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "milestoneId" + "\\}", apiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of comments written on Milestones
     * Returns the list comments written on milestone
     * @param milestoneId milestoneId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseCommentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseCommentList getMilestonesComments(Long milestoneId, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseCommentList> resp = getMilestonesCommentsWithHttpInfo(milestoneId, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Get list of comments written on Milestones
     * Returns the list comments written on milestone
     * @param milestoneId milestoneId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseCommentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseCommentList> getMilestonesCommentsWithHttpInfo(Long milestoneId, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getMilestonesCommentsCall(milestoneId, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseCommentList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of comments written on Milestones (asynchronously)
     * Returns the list comments written on milestone
     * @param milestoneId milestoneId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMilestonesCommentsAsync(Long milestoneId, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseCommentList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMilestonesCommentsCall(milestoneId, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseCommentList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTaskComments */
    private com.squareup.okhttp.Call getTaskCommentsCall(Long taskId, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskComments(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getTaskComments(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getTaskComments(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/milestones/tasks/{taskId}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of Comments written on task
     * Returns the list of comments written on task
     * @param taskId taskId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseCommentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseCommentList getTaskComments(Long taskId, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseCommentList> resp = getTaskCommentsWithHttpInfo(taskId, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Get list of Comments written on task
     * Returns the list of comments written on task
     * @param taskId taskId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseCommentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseCommentList> getTaskCommentsWithHttpInfo(Long taskId, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getTaskCommentsCall(taskId, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseCommentList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of Comments written on task (asynchronously)
     * Returns the list of comments written on task
     * @param taskId taskId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskCommentsAsync(Long taskId, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseCommentList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskCommentsCall(taskId, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseCommentList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserTasks */
    private com.squareup.okhttp.Call getUserTasksCall(Long userId, Integer status, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserTasks(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling getUserTasks(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getUserTasks(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserTasks(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/milestones/tasks/{userId}/assigned".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of task assigned to user
     * Returns the list of task assigned to user
     * @param userId User Id whose assinged task want to get (required)
     * @param status   /_*   Task status   0 - ALL   1 - OPEN   2 - PERCENT_TWENTY   3 - PERCENT_FORTY   4 - PERCENT_SIXTY   5 - PERCENT_EIGHTY   6 - RESOLVED   7 - REOPENED   *_/ (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)taskId       2)taskTitle       3)taskDescription       4)dueDate        **A) Available values-**        1)taskId       2)taskTitle       3)taskDescription       4)status       5)priority       6)dueDate       7)milestoneName       8)groupType       9)groupName   *_/ (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseTaskList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseTaskList getUserTasks(Long userId, Integer status, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseTaskList> resp = getUserTasksWithHttpInfo(userId, status, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of task assigned to user
     * Returns the list of task assigned to user
     * @param userId User Id whose assinged task want to get (required)
     * @param status   /_*   Task status   0 - ALL   1 - OPEN   2 - PERCENT_TWENTY   3 - PERCENT_FORTY   4 - PERCENT_SIXTY   5 - PERCENT_EIGHTY   6 - RESOLVED   7 - REOPENED   *_/ (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)taskId       2)taskTitle       3)taskDescription       4)dueDate        **A) Available values-**        1)taskId       2)taskTitle       3)taskDescription       4)status       5)priority       6)dueDate       7)milestoneName       8)groupType       9)groupName   *_/ (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseTaskList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseTaskList> getUserTasksWithHttpInfo(Long userId, Integer status, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getUserTasksCall(userId, status, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseTaskList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of task assigned to user (asynchronously)
     * Returns the list of task assigned to user
     * @param userId User Id whose assinged task want to get (required)
     * @param status   /_*   Task status   0 - ALL   1 - OPEN   2 - PERCENT_TWENTY   3 - PERCENT_FORTY   4 - PERCENT_SIXTY   5 - PERCENT_EIGHTY   6 - RESOLVED   7 - REOPENED   *_/ (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)taskId       2)taskTitle       3)taskDescription       4)dueDate        **A) Available values-**        1)taskId       2)taskTitle       3)taskDescription       4)status       5)priority       6)dueDate       7)milestoneName       8)groupType       9)groupName   *_/ (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserTasksAsync(Long userId, Integer status, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseTaskList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserTasksCall(userId, status, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseTaskList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateMilestone */
    private com.squareup.okhttp.Call updateMilestoneCall(Long milestoneId, String title, String description, String dueDate, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling updateMilestone(Async)");
        }
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling updateMilestone(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling updateMilestone(Async)");
        }
        
        // verify the required parameter 'dueDate' is set
        if (dueDate == null) {
            throw new ApiException("Missing the required parameter 'dueDate' when calling updateMilestone(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling updateMilestone(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateMilestone(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/milestones/{milestoneId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "milestoneId" + "\\}", apiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);
        if (dueDate != null)
        localVarFormParams.put("dueDate", dueDate);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update milestone
     * Allows the user to update milestone. Returns the updated milestone
     * @param milestoneId milestoneId (required)
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date (Format: MM-dd-yyyy HH:mm:ss a) (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate        **A) Available values-**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate       5)status       6)priority       7)dueDate   *_/ (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseMilestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseMilestone updateMilestone(Long milestoneId, String title, String description, String dueDate, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseMilestone> resp = updateMilestoneWithHttpInfo(milestoneId, title, description, dueDate, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Update milestone
     * Allows the user to update milestone. Returns the updated milestone
     * @param milestoneId milestoneId (required)
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date (Format: MM-dd-yyyy HH:mm:ss a) (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate        **A) Available values-**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate       5)status       6)priority       7)dueDate   *_/ (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseMilestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseMilestone> updateMilestoneWithHttpInfo(Long milestoneId, String title, String description, String dueDate, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = updateMilestoneCall(milestoneId, title, description, dueDate, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseMilestone>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update milestone (asynchronously)
     * Allows the user to update milestone. Returns the updated milestone
     * @param milestoneId milestoneId (required)
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date (Format: MM-dd-yyyy HH:mm:ss a) (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate        **A) Available values-**        1)milestoneId       2)milestoneTitle       3)milestoneDescription       4)createdDate       5)status       6)priority       7)dueDate   *_/ (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMilestoneAsync(Long milestoneId, String title, String description, String dueDate, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseMilestone> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMilestoneCall(milestoneId, title, description, dueDate, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseMilestone>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTask */
    private com.squareup.okhttp.Call updateTaskCall(Long taskId, String title, String description, String dueDate, Integer status, Long reAssigneeUserId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'dueDate' is set
        if (dueDate == null) {
            throw new ApiException("Missing the required parameter 'dueDate' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'reAssigneeUserId' is set
        if (reAssigneeUserId == null) {
            throw new ApiException("Missing the required parameter 'reAssigneeUserId' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateTask(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/milestones/tasks/{taskId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);
        if (dueDate != null)
        localVarFormParams.put("dueDate", dueDate);
        if (status != null)
        localVarFormParams.put("status", status);
        if (reAssigneeUserId != null)
        localVarFormParams.put("reAssigneeUserId", reAssigneeUserId);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update task
     * Allows the user to update task. Returns the updated task
     * @param taskId taskId (required)
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date (required)
     * @param status   /_*   Task status   1 - OPEN   2 - PERCENT_TWENTY   3 - PERCENT_FORTY   4 - PERCENT_SIXTY   5 - PERCENT_EIGHTY   6 - RESOLVED   7 - REOPENED   *_/ (required)
     * @param reAssigneeUserId re-assignee User Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)taskId       2)taskTitle       3)taskDescription       4)dueDate        **A) Available values-**        1)taskId       2)taskTitle       3)taskDescription       4)status       5)priority       6)dueDate       7)milestoneName       8)groupType       9)groupName   *_/ (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseTask updateTask(Long taskId, String title, String description, String dueDate, Integer status, Long reAssigneeUserId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseTask> resp = updateTaskWithHttpInfo(taskId, title, description, dueDate, status, reAssigneeUserId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Update task
     * Allows the user to update task. Returns the updated task
     * @param taskId taskId (required)
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date (required)
     * @param status   /_*   Task status   1 - OPEN   2 - PERCENT_TWENTY   3 - PERCENT_FORTY   4 - PERCENT_SIXTY   5 - PERCENT_EIGHTY   6 - RESOLVED   7 - REOPENED   *_/ (required)
     * @param reAssigneeUserId re-assignee User Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)taskId       2)taskTitle       3)taskDescription       4)dueDate        **A) Available values-**        1)taskId       2)taskTitle       3)taskDescription       4)status       5)priority       6)dueDate       7)milestoneName       8)groupType       9)groupName   *_/ (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseTask> updateTaskWithHttpInfo(Long taskId, String title, String description, String dueDate, Integer status, Long reAssigneeUserId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskCall(taskId, title, description, dueDate, status, reAssigneeUserId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update task (asynchronously)
     * Allows the user to update task. Returns the updated task
     * @param taskId taskId (required)
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date (required)
     * @param status   /_*   Task status   1 - OPEN   2 - PERCENT_TWENTY   3 - PERCENT_FORTY   4 - PERCENT_SIXTY   5 - PERCENT_EIGHTY   6 - RESOLVED   7 - REOPENED   *_/ (required)
     * @param reAssigneeUserId re-assignee User Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)taskId       2)taskTitle       3)taskDescription       4)dueDate        **A) Available values-**        1)taskId       2)taskTitle       3)taskDescription       4)status       5)priority       6)dueDate       7)milestoneName       8)groupType       9)groupName   *_/ (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskAsync(Long taskId, String title, String description, String dueDate, Integer status, Long reAssigneeUserId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskCall(taskId, title, description, dueDate, status, reAssigneeUserId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTaskStatus */
    private com.squareup.okhttp.Call updateTaskStatusCall(Long taskId, Integer status, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTaskStatus(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateTaskStatus(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling updateTaskStatus(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateTaskStatus(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/milestones/tasks/{taskId}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (status != null)
        localVarFormParams.put("status", status);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update task status
     * Allows the user to update task status. Returns the updated task status
     * @param taskId taskId (required)
     * @param status   /_*  Task status   1 - OPEN   2 - PERCENT_TWENTY   3 - PERCENT_FORTY   4 - PERCENT_SIXTY   5 - PERCENT_EIGHTY   6 - RESOLVED   7 - REOPENED   *_/ (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)taskId       2)taskTitle       3)taskDescription       4)dueDate        **A) Available values-**        1)taskId       2)taskTitle       3)taskDescription       4)status       5)priority       6)dueDate       7)milestoneName       8)groupType       9)groupName   *_/ (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseTask updateTaskStatus(Long taskId, Integer status, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseTask> resp = updateTaskStatusWithHttpInfo(taskId, status, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Update task status
     * Allows the user to update task status. Returns the updated task status
     * @param taskId taskId (required)
     * @param status   /_*  Task status   1 - OPEN   2 - PERCENT_TWENTY   3 - PERCENT_FORTY   4 - PERCENT_SIXTY   5 - PERCENT_EIGHTY   6 - RESOLVED   7 - REOPENED   *_/ (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)taskId       2)taskTitle       3)taskDescription       4)dueDate        **A) Available values-**        1)taskId       2)taskTitle       3)taskDescription       4)status       5)priority       6)dueDate       7)milestoneName       8)groupType       9)groupName   *_/ (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseTask> updateTaskStatusWithHttpInfo(Long taskId, Integer status, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskStatusCall(taskId, status, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update task status (asynchronously)
     * Allows the user to update task status. Returns the updated task status
     * @param taskId taskId (required)
     * @param status   /_*  Task status   1 - OPEN   2 - PERCENT_TWENTY   3 - PERCENT_FORTY   4 - PERCENT_SIXTY   5 - PERCENT_EIGHTY   6 - RESOLVED   7 - REOPENED   *_/ (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)taskId       2)taskTitle       3)taskDescription       4)dueDate        **A) Available values-**        1)taskId       2)taskTitle       3)taskDescription       4)status       5)priority       6)dueDate       7)milestoneName       8)groupType       9)groupName   *_/ (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskStatusAsync(Long taskId, Integer status, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskStatusCall(taskId, status, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
