/*
 * Stakeholder engagement API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiCallback;
import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.ApiResponse;
import com.iengage.Configuration;
import com.iengage.Pair;
import com.iengage.ProgressRequestBody;
import com.iengage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.iengage.client.model.VerveResponseComment;
import com.iengage.client.model.VerveResponseCommentList;
import com.iengage.client.model.VerveResponseMilestone;
import com.iengage.client.model.VerveResponseMilestoneList;
import com.iengage.client.model.VerveResponseTask;
import com.iengage.client.model.VerveResponseTaskList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectManagementApi {
    private ApiClient apiClient;

    public ProjectManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectManagementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addMilestoneComment */
    private com.squareup.okhttp.Call addMilestoneCommentCall(Long milestoneId, String commentText, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/milestones/{milestoneId}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "milestoneId" + "\\}", apiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (commentText != null)
        localVarFormParams.put("commentText", commentText);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addMilestoneCommentValidateBeforeCall(Long milestoneId, String commentText, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling addMilestoneComment(Async)");
        }
        
        // verify the required parameter 'commentText' is set
        if (commentText == null) {
            throw new ApiException("Missing the required parameter 'commentText' when calling addMilestoneComment(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling addMilestoneComment(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling addMilestoneComment(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addMilestoneComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addMilestoneCommentCall(milestoneId, commentText, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Comment on milestone
     * Allows the user to comment on milestone. Returns the comments
     * @param milestoneId milestoneId (required)
     * @param commentText commentText (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseComment addMilestoneComment(Long milestoneId, String commentText, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        ApiResponse<VerveResponseComment> resp = addMilestoneCommentWithHttpInfo(milestoneId, commentText, loggedInUserId, accessToken, clientToken);
        return resp.getData();
    }

    /**
     * Comment on milestone
     * Allows the user to comment on milestone. Returns the comments
     * @param milestoneId milestoneId (required)
     * @param commentText commentText (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseComment> addMilestoneCommentWithHttpInfo(Long milestoneId, String commentText, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = addMilestoneCommentValidateBeforeCall(milestoneId, commentText, loggedInUserId, accessToken, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Comment on milestone (asynchronously)
     * Allows the user to comment on milestone. Returns the comments
     * @param milestoneId milestoneId (required)
     * @param commentText commentText (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addMilestoneCommentAsync(Long milestoneId, String commentText, String loggedInUserId, String accessToken, String clientToken, final ApiCallback<VerveResponseComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addMilestoneCommentValidateBeforeCall(milestoneId, commentText, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addTaskComment */
    private com.squareup.okhttp.Call addTaskCommentCall(Long taskId, String commentText, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/milestones/tasks/{taskId}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (commentText != null)
        localVarFormParams.put("commentText", commentText);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTaskCommentValidateBeforeCall(Long taskId, String commentText, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling addTaskComment(Async)");
        }
        
        // verify the required parameter 'commentText' is set
        if (commentText == null) {
            throw new ApiException("Missing the required parameter 'commentText' when calling addTaskComment(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling addTaskComment(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling addTaskComment(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addTaskComment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addTaskCommentCall(taskId, commentText, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Comment on task
     * Allows  the user to comment on task. Returns the task comment
     * @param taskId taskId (required)
     * @param commentText commentText (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseComment addTaskComment(Long taskId, String commentText, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        ApiResponse<VerveResponseComment> resp = addTaskCommentWithHttpInfo(taskId, commentText, loggedInUserId, accessToken, clientToken);
        return resp.getData();
    }

    /**
     * Comment on task
     * Allows  the user to comment on task. Returns the task comment
     * @param taskId taskId (required)
     * @param commentText commentText (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseComment> addTaskCommentWithHttpInfo(Long taskId, String commentText, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = addTaskCommentValidateBeforeCall(taskId, commentText, loggedInUserId, accessToken, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Comment on task (asynchronously)
     * Allows  the user to comment on task. Returns the task comment
     * @param taskId taskId (required)
     * @param commentText commentText (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTaskCommentAsync(Long taskId, String commentText, String loggedInUserId, String accessToken, String clientToken, final ApiCallback<VerveResponseComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTaskCommentValidateBeforeCall(taskId, commentText, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createMilestone */
    private com.squareup.okhttp.Call createMilestoneCall(String title, String description, String dueDate, Boolean neverDue, String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/milestones".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (organizationId != null)
        localVarFormParams.put("organizationId", organizationId);
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);
        if (dueDate != null)
        localVarFormParams.put("dueDate", dueDate);
        if (neverDue != null)
        localVarFormParams.put("neverDue", neverDue);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMilestoneValidateBeforeCall(String title, String description, String dueDate, Boolean neverDue, String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling createMilestone(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling createMilestone(Async)");
        }
        
        // verify the required parameter 'dueDate' is set
        if (dueDate == null) {
            throw new ApiException("Missing the required parameter 'dueDate' when calling createMilestone(Async)");
        }
        
        // verify the required parameter 'neverDue' is set
        if (neverDue == null) {
            throw new ApiException("Missing the required parameter 'neverDue' when calling createMilestone(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling createMilestone(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling createMilestone(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling createMilestone(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createMilestoneCall(title, description, dueDate, neverDue, loggedInUserId, accessToken, clientToken, organizationId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create milestone
     * Allows the user to create milestone. Returns the created milestone
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date(Format: MM-dd-yyyy HH:mm:ss a) (required)
     * @param neverDue neverDue. If neverDue is true, it takes higher priority than dueDate (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @return VerveResponseMilestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseMilestone createMilestone(String title, String description, String dueDate, Boolean neverDue, String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields) throws ApiException {
        ApiResponse<VerveResponseMilestone> resp = createMilestoneWithHttpInfo(title, description, dueDate, neverDue, loggedInUserId, accessToken, clientToken, organizationId, fields);
        return resp.getData();
    }

    /**
     * Create milestone
     * Allows the user to create milestone. Returns the created milestone
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date(Format: MM-dd-yyyy HH:mm:ss a) (required)
     * @param neverDue neverDue. If neverDue is true, it takes higher priority than dueDate (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseMilestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseMilestone> createMilestoneWithHttpInfo(String title, String description, String dueDate, Boolean neverDue, String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createMilestoneValidateBeforeCall(title, description, dueDate, neverDue, loggedInUserId, accessToken, clientToken, organizationId, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseMilestone>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create milestone (asynchronously)
     * Allows the user to create milestone. Returns the created milestone
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date(Format: MM-dd-yyyy HH:mm:ss a) (required)
     * @param neverDue neverDue. If neverDue is true, it takes higher priority than dueDate (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMilestoneAsync(String title, String description, String dueDate, Boolean neverDue, String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields, final ApiCallback<VerveResponseMilestone> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMilestoneValidateBeforeCall(title, description, dueDate, neverDue, loggedInUserId, accessToken, clientToken, organizationId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseMilestone>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createTask */
    private com.squareup.okhttp.Call createTaskCall(String title, String description, Integer priority, Long assigneeUserId, String dueDate, Boolean neverDue, Long milestoneId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/milestones/{milestoneId}/tasks".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "milestoneId" + "\\}", apiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);
        if (priority != null)
        localVarFormParams.put("priority", priority);
        if (assigneeUserId != null)
        localVarFormParams.put("assigneeUserId", assigneeUserId);
        if (dueDate != null)
        localVarFormParams.put("dueDate", dueDate);
        if (neverDue != null)
        localVarFormParams.put("neverDue", neverDue);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTaskValidateBeforeCall(String title, String description, Integer priority, Long assigneeUserId, String dueDate, Boolean neverDue, Long milestoneId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling createTask(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling createTask(Async)");
        }
        
        // verify the required parameter 'priority' is set
        if (priority == null) {
            throw new ApiException("Missing the required parameter 'priority' when calling createTask(Async)");
        }
        
        // verify the required parameter 'assigneeUserId' is set
        if (assigneeUserId == null) {
            throw new ApiException("Missing the required parameter 'assigneeUserId' when calling createTask(Async)");
        }
        
        // verify the required parameter 'dueDate' is set
        if (dueDate == null) {
            throw new ApiException("Missing the required parameter 'dueDate' when calling createTask(Async)");
        }
        
        // verify the required parameter 'neverDue' is set
        if (neverDue == null) {
            throw new ApiException("Missing the required parameter 'neverDue' when calling createTask(Async)");
        }
        
        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling createTask(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling createTask(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling createTask(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling createTask(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createTaskCall(title, description, priority, assigneeUserId, dueDate, neverDue, milestoneId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create task
     * Allows user to create task. Returns the created task
     * @param title title (required)
     * @param description description (required)
     * @param priority Task priority &lt;br/&gt; 1 - HIGH &lt;br/&gt; 2 - LOW &lt;br/&gt; 3 - NORMAL (required)
     * @param assigneeUserId assignee User Id (required)
     * @param dueDate Due date (Format: MM-dd-yyyy HH:mm:ss a) (required)
     * @param neverDue neverDue. If neverDue is true, it takes higher priority than dueDate (required)
     * @param milestoneId Milestone Id (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @return VerveResponseTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseTask createTask(String title, String description, Integer priority, Long assigneeUserId, String dueDate, Boolean neverDue, Long milestoneId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseTask> resp = createTaskWithHttpInfo(title, description, priority, assigneeUserId, dueDate, neverDue, milestoneId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Create task
     * Allows user to create task. Returns the created task
     * @param title title (required)
     * @param description description (required)
     * @param priority Task priority &lt;br/&gt; 1 - HIGH &lt;br/&gt; 2 - LOW &lt;br/&gt; 3 - NORMAL (required)
     * @param assigneeUserId assignee User Id (required)
     * @param dueDate Due date (Format: MM-dd-yyyy HH:mm:ss a) (required)
     * @param neverDue neverDue. If neverDue is true, it takes higher priority than dueDate (required)
     * @param milestoneId Milestone Id (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @return ApiResponse&lt;VerveResponseTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseTask> createTaskWithHttpInfo(String title, String description, Integer priority, Long assigneeUserId, String dueDate, Boolean neverDue, Long milestoneId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createTaskValidateBeforeCall(title, description, priority, assigneeUserId, dueDate, neverDue, milestoneId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create task (asynchronously)
     * Allows user to create task. Returns the created task
     * @param title title (required)
     * @param description description (required)
     * @param priority Task priority &lt;br/&gt; 1 - HIGH &lt;br/&gt; 2 - LOW &lt;br/&gt; 3 - NORMAL (required)
     * @param assigneeUserId assignee User Id (required)
     * @param dueDate Due date (Format: MM-dd-yyyy HH:mm:ss a) (required)
     * @param neverDue neverDue. If neverDue is true, it takes higher priority than dueDate (required)
     * @param milestoneId Milestone Id (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTaskAsync(String title, String description, Integer priority, Long assigneeUserId, String dueDate, Boolean neverDue, Long milestoneId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTaskValidateBeforeCall(title, description, priority, assigneeUserId, dueDate, neverDue, milestoneId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteMilestone */
    private com.squareup.okhttp.Call deleteMilestoneCall(Long milestoneId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/milestones/{milestoneId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "milestoneId" + "\\}", apiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMilestoneValidateBeforeCall(Long milestoneId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling deleteMilestone(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling deleteMilestone(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling deleteMilestone(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteMilestone(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteMilestoneCall(milestoneId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete milestone
     * Allows the user to delete milestone. Returns the deleted milestone
     * @param milestoneId milestoneId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @return VerveResponseMilestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseMilestone deleteMilestone(Long milestoneId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseMilestone> resp = deleteMilestoneWithHttpInfo(milestoneId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Delete milestone
     * Allows the user to delete milestone. Returns the deleted milestone
     * @param milestoneId milestoneId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseMilestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseMilestone> deleteMilestoneWithHttpInfo(Long milestoneId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = deleteMilestoneValidateBeforeCall(milestoneId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseMilestone>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete milestone (asynchronously)
     * Allows the user to delete milestone. Returns the deleted milestone
     * @param milestoneId milestoneId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMilestoneAsync(Long milestoneId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseMilestone> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMilestoneValidateBeforeCall(milestoneId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseMilestone>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteTask */
    private com.squareup.okhttp.Call deleteTaskCall(Long taskId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/milestones/tasks/{taskId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTaskValidateBeforeCall(Long taskId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling deleteTask(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling deleteTask(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling deleteTask(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteTask(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteTaskCall(taskId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete task
     * Allows the user to delete task. Returns the deleted task
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @return VerveResponseTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseTask deleteTask(Long taskId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseTask> resp = deleteTaskWithHttpInfo(taskId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Delete task
     * Allows the user to delete task. Returns the deleted task
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @return ApiResponse&lt;VerveResponseTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseTask> deleteTaskWithHttpInfo(Long taskId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaskValidateBeforeCall(taskId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete task (asynchronously)
     * Allows the user to delete task. Returns the deleted task
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaskAsync(Long taskId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaskValidateBeforeCall(taskId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getMilestones */
    private com.squareup.okhttp.Call getMilestonesCall(String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/milestones".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (organizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organizationId", organizationId));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMilestonesValidateBeforeCall(String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getMilestones(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getMilestones(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getMilestones(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getMilestonesCall(loggedInUserId, accessToken, clientToken, organizationId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of milestones
     * Returns the list of milestones
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @return VerveResponseMilestoneList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseMilestoneList getMilestones(String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields) throws ApiException {
        ApiResponse<VerveResponseMilestoneList> resp = getMilestonesWithHttpInfo(loggedInUserId, accessToken, clientToken, organizationId, fields);
        return resp.getData();
    }

    /**
     * Get list of milestones
     * Returns the list of milestones
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseMilestoneList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseMilestoneList> getMilestonesWithHttpInfo(String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getMilestonesValidateBeforeCall(loggedInUserId, accessToken, clientToken, organizationId, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseMilestoneList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of milestones (asynchronously)
     * Returns the list of milestones
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMilestonesAsync(String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields, final ApiCallback<VerveResponseMilestoneList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMilestonesValidateBeforeCall(loggedInUserId, accessToken, clientToken, organizationId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseMilestoneList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getMilestonesComments */
    private com.squareup.okhttp.Call getMilestonesCommentsCall(Long milestoneId, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/milestones/{milestoneId}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "milestoneId" + "\\}", apiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMilestonesCommentsValidateBeforeCall(Long milestoneId, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling getMilestonesComments(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getMilestonesComments(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getMilestonesComments(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getMilestonesComments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getMilestonesCommentsCall(milestoneId, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of comments written on Milestones
     * Returns the list comments written on milestone
     * @param milestoneId milestoneId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseCommentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseCommentList getMilestonesComments(Long milestoneId, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        ApiResponse<VerveResponseCommentList> resp = getMilestonesCommentsWithHttpInfo(milestoneId, loggedInUserId, accessToken, clientToken);
        return resp.getData();
    }

    /**
     * Get list of comments written on Milestones
     * Returns the list comments written on milestone
     * @param milestoneId milestoneId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseCommentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseCommentList> getMilestonesCommentsWithHttpInfo(Long milestoneId, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = getMilestonesCommentsValidateBeforeCall(milestoneId, loggedInUserId, accessToken, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseCommentList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of comments written on Milestones (asynchronously)
     * Returns the list comments written on milestone
     * @param milestoneId milestoneId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMilestonesCommentsAsync(Long milestoneId, String loggedInUserId, String accessToken, String clientToken, final ApiCallback<VerveResponseCommentList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMilestonesCommentsValidateBeforeCall(milestoneId, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseCommentList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTaskComments */
    private com.squareup.okhttp.Call getTaskCommentsCall(Long taskId, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/milestones/tasks/{taskId}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaskCommentsValidateBeforeCall(Long taskId, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskComments(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getTaskComments(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getTaskComments(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getTaskComments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTaskCommentsCall(taskId, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of Comments written on task
     * Returns the list of comments written on task
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseCommentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseCommentList getTaskComments(Long taskId, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        ApiResponse<VerveResponseCommentList> resp = getTaskCommentsWithHttpInfo(taskId, loggedInUserId, accessToken, clientToken);
        return resp.getData();
    }

    /**
     * Get list of Comments written on task
     * Returns the list of comments written on task
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseCommentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseCommentList> getTaskCommentsWithHttpInfo(Long taskId, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = getTaskCommentsValidateBeforeCall(taskId, loggedInUserId, accessToken, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseCommentList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of Comments written on task (asynchronously)
     * Returns the list of comments written on task
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaskCommentsAsync(Long taskId, String loggedInUserId, String accessToken, String clientToken, final ApiCallback<VerveResponseCommentList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaskCommentsValidateBeforeCall(taskId, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseCommentList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserTasks */
    private com.squareup.okhttp.Call getUserTasksCall(Long userId, Integer status, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/milestones/tasks/{userId}/assigned".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserTasksValidateBeforeCall(Long userId, Integer status, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserTasks(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling getUserTasks(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getUserTasks(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getUserTasks(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserTasks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserTasksCall(userId, status, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of task assigned to user
     * Returns the list of task assigned to user
     * @param userId userId (required)
     * @param status Task status &lt;br/&gt; 0 - ALL &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @return VerveResponseTaskList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseTaskList getUserTasks(Long userId, Integer status, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseTaskList> resp = getUserTasksWithHttpInfo(userId, status, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Get list of task assigned to user
     * Returns the list of task assigned to user
     * @param userId userId (required)
     * @param status Task status &lt;br/&gt; 0 - ALL &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @return ApiResponse&lt;VerveResponseTaskList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseTaskList> getUserTasksWithHttpInfo(Long userId, Integer status, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getUserTasksValidateBeforeCall(userId, status, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseTaskList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of task assigned to user (asynchronously)
     * Returns the list of task assigned to user
     * @param userId userId (required)
     * @param status Task status &lt;br/&gt; 0 - ALL &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserTasksAsync(Long userId, Integer status, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseTaskList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserTasksValidateBeforeCall(userId, status, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseTaskList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateMilestone */
    private com.squareup.okhttp.Call updateMilestoneCall(Long milestoneId, String title, String description, String dueDate, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/milestones/{milestoneId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "milestoneId" + "\\}", apiClient.escapeString(milestoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);
        if (dueDate != null)
        localVarFormParams.put("dueDate", dueDate);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMilestoneValidateBeforeCall(Long milestoneId, String title, String description, String dueDate, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'milestoneId' is set
        if (milestoneId == null) {
            throw new ApiException("Missing the required parameter 'milestoneId' when calling updateMilestone(Async)");
        }
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling updateMilestone(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling updateMilestone(Async)");
        }
        
        // verify the required parameter 'dueDate' is set
        if (dueDate == null) {
            throw new ApiException("Missing the required parameter 'dueDate' when calling updateMilestone(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling updateMilestone(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling updateMilestone(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateMilestone(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateMilestoneCall(milestoneId, title, description, dueDate, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update milestone
     * Allows the user to update milestone. Returns the updated milestone
     * @param milestoneId milestoneId (required)
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date (Format: MM-dd-yyyy HH:mm:ss a) (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @return VerveResponseMilestone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseMilestone updateMilestone(Long milestoneId, String title, String description, String dueDate, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseMilestone> resp = updateMilestoneWithHttpInfo(milestoneId, title, description, dueDate, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Update milestone
     * Allows the user to update milestone. Returns the updated milestone
     * @param milestoneId milestoneId (required)
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date (Format: MM-dd-yyyy HH:mm:ss a) (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseMilestone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseMilestone> updateMilestoneWithHttpInfo(Long milestoneId, String title, String description, String dueDate, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateMilestoneValidateBeforeCall(milestoneId, title, description, dueDate, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseMilestone>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update milestone (asynchronously)
     * Allows the user to update milestone. Returns the updated milestone
     * @param milestoneId milestoneId (required)
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date (Format: MM-dd-yyyy HH:mm:ss a) (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)milestoneId&lt;br/&gt;2)milestoneTitle&lt;br/&gt;3)milestoneDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)status&lt;br/&gt;6)priority&lt;br/&gt;7)dueDate (optional, default to milestoneId,milestoneTitle,milestoneDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMilestoneAsync(Long milestoneId, String title, String description, String dueDate, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseMilestone> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMilestoneValidateBeforeCall(milestoneId, title, description, dueDate, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseMilestone>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTask */
    private com.squareup.okhttp.Call updateTaskCall(Long taskId, String title, String description, String dueDate, Integer status, Long reAssigneeUserId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/milestones/tasks/{taskId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);
        if (dueDate != null)
        localVarFormParams.put("dueDate", dueDate);
        if (status != null)
        localVarFormParams.put("status", status);
        if (reAssigneeUserId != null)
        localVarFormParams.put("reAssigneeUserId", reAssigneeUserId);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaskValidateBeforeCall(Long taskId, String title, String description, String dueDate, Integer status, Long reAssigneeUserId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'dueDate' is set
        if (dueDate == null) {
            throw new ApiException("Missing the required parameter 'dueDate' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'reAssigneeUserId' is set
        if (reAssigneeUserId == null) {
            throw new ApiException("Missing the required parameter 'reAssigneeUserId' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling updateTask(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateTask(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateTaskCall(taskId, title, description, dueDate, status, reAssigneeUserId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update task
     * Allows the user to update task. Returns the updated task
     * @param taskId taskId (required)
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date (required)
     * @param status Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED (required)
     * @param reAssigneeUserId re-assignee User Id (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @return VerveResponseTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseTask updateTask(Long taskId, String title, String description, String dueDate, Integer status, Long reAssigneeUserId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseTask> resp = updateTaskWithHttpInfo(taskId, title, description, dueDate, status, reAssigneeUserId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Update task
     * Allows the user to update task. Returns the updated task
     * @param taskId taskId (required)
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date (required)
     * @param status Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED (required)
     * @param reAssigneeUserId re-assignee User Id (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @return ApiResponse&lt;VerveResponseTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseTask> updateTaskWithHttpInfo(Long taskId, String title, String description, String dueDate, Integer status, Long reAssigneeUserId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskValidateBeforeCall(taskId, title, description, dueDate, status, reAssigneeUserId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update task (asynchronously)
     * Allows the user to update task. Returns the updated task
     * @param taskId taskId (required)
     * @param title title (required)
     * @param description description (required)
     * @param dueDate Due date (required)
     * @param status Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED (required)
     * @param reAssigneeUserId re-assignee User Id (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskAsync(Long taskId, String title, String description, String dueDate, Integer status, Long reAssigneeUserId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskValidateBeforeCall(taskId, title, description, dueDate, status, reAssigneeUserId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTaskStatus */
    private com.squareup.okhttp.Call updateTaskStatusCall(Long taskId, Integer status, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/milestones/tasks/{taskId}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (status != null)
        localVarFormParams.put("status", status);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaskStatusValidateBeforeCall(Long taskId, Integer status, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTaskStatus(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateTaskStatus(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling updateTaskStatus(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling updateTaskStatus(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateTaskStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateTaskStatusCall(taskId, status, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update task status
     * Allows the user to update task status. Returns the updated task status
     * @param taskId taskId (required)
     * @param status Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @return VerveResponseTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseTask updateTaskStatus(Long taskId, Integer status, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseTask> resp = updateTaskStatusWithHttpInfo(taskId, status, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Update task status
     * Allows the user to update task status. Returns the updated task status
     * @param taskId taskId (required)
     * @param status Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @return ApiResponse&lt;VerveResponseTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseTask> updateTaskStatusWithHttpInfo(Long taskId, Integer status, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateTaskStatusValidateBeforeCall(taskId, status, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update task status (asynchronously)
     * Allows the user to update task status. Returns the updated task status
     * @param taskId taskId (required)
     * @param status Task status &lt;br/&gt; 1 - OPEN &lt;br/&gt; 2 - PERCENT_TWENTY &lt;br/&gt; 3 - PERCENT_FORTY &lt;br/&gt; 4 - PERCENT_SIXTY &lt;br/&gt; 5 - PERCENT_EIGHTY &lt;br/&gt; 6 - RESOLVED &lt;br/&gt; 7 - REOPENED (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)dueDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)taskId&lt;br/&gt;2)taskTitle&lt;br/&gt;3)taskDescription&lt;br/&gt;4)status&lt;br/&gt;5)priority&lt;br/&gt;6)dueDate&lt;br/&gt;7)milestoneName&lt;br/&gt;8)groupType&lt;br/&gt;9)groupName (optional, default to taskId,taskTitle,taskDescription,dueDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaskStatusAsync(Long taskId, Integer status, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaskStatusValidateBeforeCall(taskId, status, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
