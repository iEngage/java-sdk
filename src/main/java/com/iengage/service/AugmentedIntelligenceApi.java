/*
 * Stakeholder engagement API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiCallback;
import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.ApiResponse;
import com.iengage.Configuration;
import com.iengage.Pair;
import com.iengage.ProgressRequestBody;
import com.iengage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.iengage.client.model.VerveResponseEntitySentimentList;
import com.iengage.client.model.VerveResponseFlowFinder;
import com.iengage.client.model.VerveResponseSentimentAnalytics;
import com.iengage.client.model.VerveResponseTagList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AugmentedIntelligenceApi {
    private ApiClient apiClient;

    public AugmentedIntelligenceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AugmentedIntelligenceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getInteraction */
    private com.squareup.okhttp.Call getInteractionCall(String text, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/machineLearning/interactionType".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInteractionValidateBeforeCall(String text, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling getInteraction(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getInteraction(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getInteraction(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getInteraction(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getInteractionCall(text, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the type of interaction
     * Classifies text to question, complaint or suggestion
     * @param text Text to be classified (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseFlowFinder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseFlowFinder getInteraction(String text, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        ApiResponse<VerveResponseFlowFinder> resp = getInteractionWithHttpInfo(text, loggedInUserId, accessToken, clientToken);
        return resp.getData();
    }

    /**
     * Get the type of interaction
     * Classifies text to question, complaint or suggestion
     * @param text Text to be classified (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseFlowFinder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseFlowFinder> getInteractionWithHttpInfo(String text, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = getInteractionValidateBeforeCall(text, loggedInUserId, accessToken, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseFlowFinder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the type of interaction (asynchronously)
     * Classifies text to question, complaint or suggestion
     * @param text Text to be classified (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInteractionAsync(String text, String loggedInUserId, String accessToken, String clientToken, final ApiCallback<VerveResponseFlowFinder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInteractionValidateBeforeCall(text, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseFlowFinder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPopularTag */
    private com.squareup.okhttp.Call getPopularTagCall(Long startTime, Long endTime, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String interactionType, String sentimentType, String additionalInformation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/analytics/popular/tags".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (sentimentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sentimentType", sentimentType));
        if (additionalInformation != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "additionalInformation", additionalInformation));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPopularTagValidateBeforeCall(Long startTime, Long endTime, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String interactionType, String sentimentType, String additionalInformation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getPopularTag(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getPopularTag(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getPopularTag(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getPopularTag(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getPopularTag(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getPopularTag(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getPopularTag(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPopularTagCall(startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, interactionType, sentimentType, additionalInformation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of popular tag of interactions
     * Return the most popular tag of given interaction type
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param start start (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)
     * @param sentimentType Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt; 3)Neutral (optional)
     * @param additionalInformation additional information (optional)
     * @return VerveResponseTagList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseTagList getPopularTag(Long startTime, Long endTime, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String interactionType, String sentimentType, String additionalInformation) throws ApiException {
        ApiResponse<VerveResponseTagList> resp = getPopularTagWithHttpInfo(startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, interactionType, sentimentType, additionalInformation);
        return resp.getData();
    }

    /**
     * Get list of popular tag of interactions
     * Return the most popular tag of given interaction type
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param start start (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)
     * @param sentimentType Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt; 3)Neutral (optional)
     * @param additionalInformation additional information (optional)
     * @return ApiResponse&lt;VerveResponseTagList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseTagList> getPopularTagWithHttpInfo(Long startTime, Long endTime, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String interactionType, String sentimentType, String additionalInformation) throws ApiException {
        com.squareup.okhttp.Call call = getPopularTagValidateBeforeCall(startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, interactionType, sentimentType, additionalInformation, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseTagList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of popular tag of interactions (asynchronously)
     * Return the most popular tag of given interaction type
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param start start (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)
     * @param sentimentType Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt; 3)Neutral (optional)
     * @param additionalInformation additional information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPopularTagAsync(Long startTime, Long endTime, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String interactionType, String sentimentType, String additionalInformation, final ApiCallback<VerveResponseTagList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPopularTagValidateBeforeCall(startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, interactionType, sentimentType, additionalInformation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseTagList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSentiment */
    private com.squareup.okhttp.Call getSentimentCall(Long startTime, Long endTime, String loggedInUserId, String accessToken, String clientToken, String interactionType, String additionalInformation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/analytics/sentiments".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (additionalInformation != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "additionalInformation", additionalInformation));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSentimentValidateBeforeCall(Long startTime, Long endTime, String loggedInUserId, String accessToken, String clientToken, String interactionType, String additionalInformation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getSentiment(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getSentiment(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getSentiment(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getSentiment(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getSentiment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSentimentCall(startTime, endTime, loggedInUserId, accessToken, clientToken, interactionType, additionalInformation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get sentiment count of interactions
     * Returns the sum of the sentiment count of given interaction type
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)
     * @param additionalInformation additional information (optional)
     * @return VerveResponseSentimentAnalytics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseSentimentAnalytics getSentiment(Long startTime, Long endTime, String loggedInUserId, String accessToken, String clientToken, String interactionType, String additionalInformation) throws ApiException {
        ApiResponse<VerveResponseSentimentAnalytics> resp = getSentimentWithHttpInfo(startTime, endTime, loggedInUserId, accessToken, clientToken, interactionType, additionalInformation);
        return resp.getData();
    }

    /**
     * Get sentiment count of interactions
     * Returns the sum of the sentiment count of given interaction type
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)
     * @param additionalInformation additional information (optional)
     * @return ApiResponse&lt;VerveResponseSentimentAnalytics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseSentimentAnalytics> getSentimentWithHttpInfo(Long startTime, Long endTime, String loggedInUserId, String accessToken, String clientToken, String interactionType, String additionalInformation) throws ApiException {
        com.squareup.okhttp.Call call = getSentimentValidateBeforeCall(startTime, endTime, loggedInUserId, accessToken, clientToken, interactionType, additionalInformation, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseSentimentAnalytics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get sentiment count of interactions (asynchronously)
     * Returns the sum of the sentiment count of given interaction type
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type &lt;br/&gt;1)Question&lt;br/&gt;2)Complaint&lt;br/&gt;3)Idea&lt;br/&gt;4)Blog&lt;br/&gt;5)Discussion (optional)
     * @param additionalInformation additional information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSentimentAsync(Long startTime, Long endTime, String loggedInUserId, String accessToken, String clientToken, String interactionType, String additionalInformation, final ApiCallback<VerveResponseSentimentAnalytics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSentimentValidateBeforeCall(startTime, endTime, loggedInUserId, accessToken, clientToken, interactionType, additionalInformation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseSentimentAnalytics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTagEntitySentiments */
    private com.squareup.okhttp.Call getTagEntitySentimentsCall(String tagName, Long startTime, Long endTime, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String sentimentType, String additionalInformation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/analytics/tag/entitySentiment".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tagName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tagName", tagName));
        if (sentimentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sentimentType", sentimentType));
        if (additionalInformation != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "additionalInformation", additionalInformation));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTagEntitySentimentsValidateBeforeCall(String tagName, Long startTime, Long endTime, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String sentimentType, String additionalInformation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling getTagEntitySentiments(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getTagEntitySentiments(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getTagEntitySentiments(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getTagEntitySentiments(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getTagEntitySentiments(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getTagEntitySentiments(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getTagEntitySentiments(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getTagEntitySentiments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTagEntitySentimentsCall(tagName, startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, sentimentType, additionalInformation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of tag entity sentiment
     * Return the list of tag entity sentiments
     * @param tagName tag name (required)
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param start start (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param sentimentType Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt;3)Neutral (optional)
     * @param additionalInformation additional information (optional)
     * @return VerveResponseEntitySentimentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseEntitySentimentList getTagEntitySentiments(String tagName, Long startTime, Long endTime, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String sentimentType, String additionalInformation) throws ApiException {
        ApiResponse<VerveResponseEntitySentimentList> resp = getTagEntitySentimentsWithHttpInfo(tagName, startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, sentimentType, additionalInformation);
        return resp.getData();
    }

    /**
     * Get list of tag entity sentiment
     * Return the list of tag entity sentiments
     * @param tagName tag name (required)
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param start start (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param sentimentType Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt;3)Neutral (optional)
     * @param additionalInformation additional information (optional)
     * @return ApiResponse&lt;VerveResponseEntitySentimentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseEntitySentimentList> getTagEntitySentimentsWithHttpInfo(String tagName, Long startTime, Long endTime, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String sentimentType, String additionalInformation) throws ApiException {
        com.squareup.okhttp.Call call = getTagEntitySentimentsValidateBeforeCall(tagName, startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, sentimentType, additionalInformation, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseEntitySentimentList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of tag entity sentiment (asynchronously)
     * Return the list of tag entity sentiments
     * @param tagName tag name (required)
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param start start (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param sentimentType Sentiment Type &lt;br/&gt;1)Positive&lt;br/&gt;2)Negative&lt;br/&gt;3)Neutral (optional)
     * @param additionalInformation additional information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTagEntitySentimentsAsync(String tagName, Long startTime, Long endTime, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String sentimentType, String additionalInformation, final ApiCallback<VerveResponseEntitySentimentList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTagEntitySentimentsValidateBeforeCall(tagName, startTime, endTime, start, end, loggedInUserId, accessToken, clientToken, sentimentType, additionalInformation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseEntitySentimentList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
