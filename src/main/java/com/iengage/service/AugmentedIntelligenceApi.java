/**
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.iengage.service;

import com.iengage.ApiCallback;
import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.ApiResponse;
import com.iengage.Configuration;
import com.iengage.Pair;
import com.iengage.ProgressRequestBody;
import com.iengage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.iengage.client.model.VerveResponseTextClassificationList;
import com.iengage.client.model.VerveResponseEntitiesClassifiedList;
import com.iengage.client.model.VerveResponseFlowFinder;
import com.iengage.client.model.VerveResponseKeyword;
import com.iengage.client.model.VerveResponseTagList;
import com.iengage.client.model.VerveResponseSentimentAnalytics;
import com.iengage.client.model.VerveResponseEntitySentimentList;
import com.iengage.client.model.VerveResponseSentiment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AugmentedIntelligenceApi {
    private ApiClient apiClient;

    public AugmentedIntelligenceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AugmentedIntelligenceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for classify */
    private com.squareup.okhttp.Call classifyCall(String text, Long id, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling classify(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling classify(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling classify(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ml/classifier/classify".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Classifies using your classifier
     * Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
     * @param text Text you want classified (required)
     * @param id Classifier ID from the Admin Panel (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseTextClassificationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseTextClassificationList classify(String text, Long id, String clientToken) throws ApiException {
        ApiResponse<VerveResponseTextClassificationList> resp = classifyWithHttpInfo(text, id, clientToken);
        return resp.getData();
    }

    /**
     * Classifies using your classifier
     * Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
     * @param text Text you want classified (required)
     * @param id Classifier ID from the Admin Panel (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseTextClassificationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseTextClassificationList> classifyWithHttpInfo(String text, Long id, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = classifyCall(text, id, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseTextClassificationList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Classifies using your classifier (asynchronously)
     * Returns a classification based on your training in the Classifier Admin Panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
     * @param text Text you want classified (required)
     * @param id Classifier ID from the Admin Panel (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call classifyAsync(String text, Long id, String clientToken, final ApiCallback<VerveResponseTextClassificationList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = classifyCall(text, id, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseTextClassificationList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getEntities */
    private com.squareup.okhttp.Call getEntitiesCall(Long id, String text, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEntities(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling getEntities(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getEntities(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ml/ner/classify".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id", id));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Extracts entities from text
     * Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
     * @param id NER ID present from the Admin Panel (required)
     * @param text Text from which to extract entities (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseEntitiesClassifiedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseEntitiesClassifiedList getEntities(Long id, String text, String clientToken) throws ApiException {
        ApiResponse<VerveResponseEntitiesClassifiedList> resp = getEntitiesWithHttpInfo(id, text, clientToken);
        return resp.getData();
    }

    /**
     * Extracts entities from text
     * Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
     * @param id NER ID present from the Admin Panel (required)
     * @param text Text from which to extract entities (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseEntitiesClassifiedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseEntitiesClassifiedList> getEntitiesWithHttpInfo(Long id, String text, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = getEntitiesCall(id, text, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseEntitiesClassifiedList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extracts entities from text (asynchronously)
     * Classifies each word of the text as an entity based on your training in the NER Admin panel. More than one classifier may be trained. Use the correct ID from the Admin Panel to get the corresponding classification
     * @param id NER ID present from the Admin Panel (required)
     * @param text Text from which to extract entities (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEntitiesAsync(Long id, String text, String clientToken, final ApiCallback<VerveResponseEntitiesClassifiedList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEntitiesCall(id, text, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseEntitiesClassifiedList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getInteractionType */
    private com.squareup.okhttp.Call getInteractionTypeCall(String text, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling getInteractionType(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getInteractionType(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ml/interactionType".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns the type of interaction
     * Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction
     * @param text Text that is to be classified by type (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseFlowFinder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseFlowFinder getInteractionType(String text, String clientToken) throws ApiException {
        ApiResponse<VerveResponseFlowFinder> resp = getInteractionTypeWithHttpInfo(text, clientToken);
        return resp.getData();
    }

    /**
     * Returns the type of interaction
     * Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction
     * @param text Text that is to be classified by type (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseFlowFinder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseFlowFinder> getInteractionTypeWithHttpInfo(String text, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = getInteractionTypeCall(text, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseFlowFinder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the type of interaction (asynchronously)
     * Classifies text to question, complaint, appreciation, suggestion or comment. This is the default classification we assign to the type field of an Interaction
     * @param text Text that is to be classified by type (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInteractionTypeAsync(String text, String clientToken, final ApiCallback<VerveResponseFlowFinder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInteractionTypeCall(text, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseFlowFinder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getKeywords */
    private com.squareup.okhttp.Call getKeywordsCall(String text, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling getKeywords(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getKeywords(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ml/keywords".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns the keywords of the sentence
     * Extracts the keywords of a sentence. This could be used for example as tags.
     * @param text Content whose keywords are to be found out (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseKeyword
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseKeyword getKeywords(String text, String clientToken) throws ApiException {
        ApiResponse<VerveResponseKeyword> resp = getKeywordsWithHttpInfo(text, clientToken);
        return resp.getData();
    }

    /**
     * Returns the keywords of the sentence
     * Extracts the keywords of a sentence. This could be used for example as tags.
     * @param text Content whose keywords are to be found out (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseKeyword&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseKeyword> getKeywordsWithHttpInfo(String text, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = getKeywordsCall(text, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseKeyword>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the keywords of the sentence (asynchronously)
     * Extracts the keywords of a sentence. This could be used for example as tags.
     * @param text Content whose keywords are to be found out (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKeywordsAsync(String text, String clientToken, final ApiCallback<VerveResponseKeyword> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKeywordsCall(text, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseKeyword>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPopularTag */
    private com.squareup.okhttp.Call getPopularTagCall(Long startTime, Long endTime, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String sentimentType, String additionalInformation, String association, Long categoryId, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getPopularTag(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getPopularTag(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getPopularTag(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getPopularTag(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getPopularTag(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getPopularTag(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/analytics/popular/tags".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (sentimentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sentimentType", sentimentType));
        if (additionalInformation != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "additionalInformation", additionalInformation));
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (categoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryId", categoryId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of popular tag of interactions
     * Return the most popular tag of given interaction type
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param start start (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType   /_*  Interaction Type      1) Question     2) Complaint    3) Idea     4) Blog     5) Discussion   *_/ (optional)
     * @param sentimentType   /_*  Sentiment Type      1)Positive     2)Negative      3)Neutral  *_/ (optional)
     * @param additionalInformation additional information (optional)
     * @param association association (optional)
     * @param categoryId categoryId (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseTagList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseTagList getPopularTag(Long startTime, Long endTime, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String sentimentType, String additionalInformation, String association, Long categoryId, String accessToken) throws ApiException {
        ApiResponse<VerveResponseTagList> resp = getPopularTagWithHttpInfo(startTime, endTime, start, end, requesterId, clientToken, interactionType, sentimentType, additionalInformation, association, categoryId, accessToken);
        return resp.getData();
    }

    /**
     * Get list of popular tag of interactions
     * Return the most popular tag of given interaction type
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param start start (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType   /_*  Interaction Type      1) Question     2) Complaint    3) Idea     4) Blog     5) Discussion   *_/ (optional)
     * @param sentimentType   /_*  Sentiment Type      1)Positive     2)Negative      3)Neutral  *_/ (optional)
     * @param additionalInformation additional information (optional)
     * @param association association (optional)
     * @param categoryId categoryId (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseTagList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseTagList> getPopularTagWithHttpInfo(Long startTime, Long endTime, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String sentimentType, String additionalInformation, String association, Long categoryId, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getPopularTagCall(startTime, endTime, start, end, requesterId, clientToken, interactionType, sentimentType, additionalInformation, association, categoryId, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseTagList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of popular tag of interactions (asynchronously)
     * Return the most popular tag of given interaction type
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param start start (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType   /_*  Interaction Type      1) Question     2) Complaint    3) Idea     4) Blog     5) Discussion   *_/ (optional)
     * @param sentimentType   /_*  Sentiment Type      1)Positive     2)Negative      3)Neutral  *_/ (optional)
     * @param additionalInformation additional information (optional)
     * @param association association (optional)
     * @param categoryId categoryId (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPopularTagAsync(Long startTime, Long endTime, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String sentimentType, String additionalInformation, String association, Long categoryId, String accessToken, final ApiCallback<VerveResponseTagList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPopularTagCall(startTime, endTime, start, end, requesterId, clientToken, interactionType, sentimentType, additionalInformation, association, categoryId, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseTagList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSentiment */
    private com.squareup.okhttp.Call getSentimentCall(Long startTime, Long endTime, String requesterId, String clientToken, String interactionType, String additionalInformation, String association, Long categoryId, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getSentiment(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getSentiment(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getSentiment(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getSentiment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/analytics/sentiments".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (additionalInformation != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "additionalInformation", additionalInformation));
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (categoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryId", categoryId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get sentiment count of interactions
     * Returns the sum of the sentiment count of given interaction type
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType   /_*  Interaction Type      1) Question     2) Complaint     3) Idea     4) Blog     5) Discussion   *_/ (optional)
     * @param additionalInformation additional information (optional)
     * @param association association (optional)
     * @param categoryId categoryId (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseSentimentAnalytics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseSentimentAnalytics getSentiment(Long startTime, Long endTime, String requesterId, String clientToken, String interactionType, String additionalInformation, String association, Long categoryId, String accessToken) throws ApiException {
        ApiResponse<VerveResponseSentimentAnalytics> resp = getSentimentWithHttpInfo(startTime, endTime, requesterId, clientToken, interactionType, additionalInformation, association, categoryId, accessToken);
        return resp.getData();
    }

    /**
     * Get sentiment count of interactions
     * Returns the sum of the sentiment count of given interaction type
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType   /_*  Interaction Type      1) Question     2) Complaint     3) Idea     4) Blog     5) Discussion   *_/ (optional)
     * @param additionalInformation additional information (optional)
     * @param association association (optional)
     * @param categoryId categoryId (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseSentimentAnalytics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseSentimentAnalytics> getSentimentWithHttpInfo(Long startTime, Long endTime, String requesterId, String clientToken, String interactionType, String additionalInformation, String association, Long categoryId, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getSentimentCall(startTime, endTime, requesterId, clientToken, interactionType, additionalInformation, association, categoryId, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseSentimentAnalytics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get sentiment count of interactions (asynchronously)
     * Returns the sum of the sentiment count of given interaction type
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType   /_*  Interaction Type      1) Question     2) Complaint     3) Idea     4) Blog     5) Discussion   *_/ (optional)
     * @param additionalInformation additional information (optional)
     * @param association association (optional)
     * @param categoryId categoryId (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSentimentAsync(Long startTime, Long endTime, String requesterId, String clientToken, String interactionType, String additionalInformation, String association, Long categoryId, String accessToken, final ApiCallback<VerveResponseSentimentAnalytics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSentimentCall(startTime, endTime, requesterId, clientToken, interactionType, additionalInformation, association, categoryId, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseSentimentAnalytics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTagEntitySentiments */
    private com.squareup.okhttp.Call getTagEntitySentimentsCall(String tagName, Long startTime, Long endTime, Integer start, Integer end, String requesterId, String clientToken, String sentimentType, String additionalInformation, String association, String interactionType, Long categoryId, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling getTagEntitySentiments(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling getTagEntitySentiments(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling getTagEntitySentiments(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getTagEntitySentiments(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getTagEntitySentiments(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getTagEntitySentiments(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getTagEntitySentiments(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/analytics/tag/entitySentiment".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (tagName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tagName", tagName));
        if (sentimentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sentimentType", sentimentType));
        if (additionalInformation != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "additionalInformation", additionalInformation));
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (categoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryId", categoryId));
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of tag entity sentiment
     * Return the list of tag entity sentiments
     * @param tagName tag name (required)
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param start start (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param sentimentType   /_*   Sentiment Type      1)Positive     2)Negative     3)Neutral   *_/ (optional)
     * @param additionalInformation additional information (optional)
     * @param association association (optional)
     * @param interactionType   /_*  Interaction Type      1)Question     2)Complaint     3)Idea     4)Blog     5)Discussion   *_/ (optional)
     * @param categoryId categoryId (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseEntitySentimentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseEntitySentimentList getTagEntitySentiments(String tagName, Long startTime, Long endTime, Integer start, Integer end, String requesterId, String clientToken, String sentimentType, String additionalInformation, String association, String interactionType, Long categoryId, String accessToken) throws ApiException {
        ApiResponse<VerveResponseEntitySentimentList> resp = getTagEntitySentimentsWithHttpInfo(tagName, startTime, endTime, start, end, requesterId, clientToken, sentimentType, additionalInformation, association, interactionType, categoryId, accessToken);
        return resp.getData();
    }

    /**
     * Get list of tag entity sentiment
     * Return the list of tag entity sentiments
     * @param tagName tag name (required)
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param start start (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param sentimentType   /_*   Sentiment Type      1)Positive     2)Negative     3)Neutral   *_/ (optional)
     * @param additionalInformation additional information (optional)
     * @param association association (optional)
     * @param interactionType   /_*  Interaction Type      1)Question     2)Complaint     3)Idea     4)Blog     5)Discussion   *_/ (optional)
     * @param categoryId categoryId (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseEntitySentimentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseEntitySentimentList> getTagEntitySentimentsWithHttpInfo(String tagName, Long startTime, Long endTime, Integer start, Integer end, String requesterId, String clientToken, String sentimentType, String additionalInformation, String association, String interactionType, Long categoryId, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getTagEntitySentimentsCall(tagName, startTime, endTime, start, end, requesterId, clientToken, sentimentType, additionalInformation, association, interactionType, categoryId, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseEntitySentimentList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of tag entity sentiment (asynchronously)
     * Return the list of tag entity sentiments
     * @param tagName tag name (required)
     * @param startTime start time (required)
     * @param endTime end time (required)
     * @param start start (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param sentimentType   /_*   Sentiment Type      1)Positive     2)Negative     3)Neutral   *_/ (optional)
     * @param additionalInformation additional information (optional)
     * @param association association (optional)
     * @param interactionType   /_*  Interaction Type      1)Question     2)Complaint     3)Idea     4)Blog     5)Discussion   *_/ (optional)
     * @param categoryId categoryId (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTagEntitySentimentsAsync(String tagName, Long startTime, Long endTime, Integer start, Integer end, String requesterId, String clientToken, String sentimentType, String additionalInformation, String association, String interactionType, Long categoryId, String accessToken, final ApiCallback<VerveResponseEntitySentimentList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTagEntitySentimentsCall(tagName, startTime, endTime, start, end, requesterId, clientToken, sentimentType, additionalInformation, association, interactionType, categoryId, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseEntitySentimentList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for sentiment */
    private com.squareup.okhttp.Call sentimentCall(String text, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling sentiment(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling sentiment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ml/sentiment".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Analyzes the sentiment of the content
     * The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral
     * @param text Sentence whose sentiment is to be found out (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseSentiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseSentiment sentiment(String text, String clientToken) throws ApiException {
        ApiResponse<VerveResponseSentiment> resp = sentimentWithHttpInfo(text, clientToken);
        return resp.getData();
    }

    /**
     * Analyzes the sentiment of the content
     * The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral
     * @param text Sentence whose sentiment is to be found out (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseSentiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseSentiment> sentimentWithHttpInfo(String text, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = sentimentCall(text, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseSentiment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Analyzes the sentiment of the content (asynchronously)
     * The response will be a Sentiment Weightage. -1 is most negative and +1 is most positive. 0 will be neutral
     * @param text Sentence whose sentiment is to be found out (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sentimentAsync(String text, String clientToken, final ApiCallback<VerveResponseSentiment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sentimentCall(text, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseSentiment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
