/*
 * Stakeholder engagement API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiCallback;
import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.ApiResponse;
import com.iengage.Configuration;
import com.iengage.Pair;
import com.iengage.ProgressRequestBody;
import com.iengage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.iengage.client.model.Attachment;
import com.iengage.client.model.VerveResponseAnswer;
import com.iengage.client.model.VerveResponseAnswerList;
import com.iengage.client.model.VerveResponseQuestion;
import com.iengage.client.model.VerveResponseQuestionCategory;
import com.iengage.client.model.VerveResponseQuestionCategoryList;
import com.iengage.client.model.VerveResponseQuestionList;
import com.iengage.client.model.VerveResponseUserList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuestionApi {
    private ApiClient apiClient;

    public QuestionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuestionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addAnswer */
    private com.squareup.okhttp.Call addAnswerCall(Long questionId, String answer, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{questionId}/answers".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (answer != null)
        localVarFormParams.put("answer", answer);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addAnswerValidateBeforeCall(Long questionId, String answer, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling addAnswer(Async)");
        }
        
        // verify the required parameter 'answer' is set
        if (answer == null) {
            throw new ApiException("Missing the required parameter 'answer' when calling addAnswer(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling addAnswer(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling addAnswer(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addAnswer(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addAnswerCall(questionId, answer, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Answer the specified question
     * Allows the user to answer the question
     * @param questionId questionId (required)
     * @param answer answer (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return VerveResponseAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseAnswer addAnswer(Long questionId, String answer, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseAnswer> resp = addAnswerWithHttpInfo(questionId, answer, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Answer the specified question
     * Allows the user to answer the question
     * @param questionId questionId (required)
     * @param answer answer (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseAnswer> addAnswerWithHttpInfo(Long questionId, String answer, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = addAnswerValidateBeforeCall(questionId, answer, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Answer the specified question (asynchronously)
     * Allows the user to answer the question
     * @param questionId questionId (required)
     * @param answer answer (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addAnswerAsync(Long questionId, String answer, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseAnswer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addAnswerValidateBeforeCall(questionId, answer, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addQuestion */
    private com.squareup.okhttp.Call addQuestionCall(Long categoryId, String questionTitle, String questionDescription, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (categoryId != null)
        localVarFormParams.put("categoryId", categoryId);
        if (questionTitle != null)
        localVarFormParams.put("questionTitle", questionTitle);
        if (questionDescription != null)
        localVarFormParams.put("questionDescription", questionDescription);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuestionValidateBeforeCall(Long categoryId, String questionTitle, String questionDescription, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling addQuestion(Async)");
        }
        
        // verify the required parameter 'questionTitle' is set
        if (questionTitle == null) {
            throw new ApiException("Missing the required parameter 'questionTitle' when calling addQuestion(Async)");
        }
        
        // verify the required parameter 'questionDescription' is set
        if (questionDescription == null) {
            throw new ApiException("Missing the required parameter 'questionDescription' when calling addQuestion(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling addQuestion(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling addQuestion(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addQuestionCall(categoryId, questionTitle, questionDescription, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Share question without attachment
     * Allows the user to share question without attachment. Returns the question object
     * @param categoryId categoryId (required)
     * @param questionTitle Question Title (required)
     * @param questionDescription Describe question (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseQuestion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestion addQuestion(Long categoryId, String questionTitle, String questionDescription, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        ApiResponse<VerveResponseQuestion> resp = addQuestionWithHttpInfo(categoryId, questionTitle, questionDescription, loggedInUserId, accessToken, clientToken);
        return resp.getData();
    }

    /**
     * Share question without attachment
     * Allows the user to share question without attachment. Returns the question object
     * @param categoryId categoryId (required)
     * @param questionTitle Question Title (required)
     * @param questionDescription Describe question (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseQuestion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestion> addQuestionWithHttpInfo(Long categoryId, String questionTitle, String questionDescription, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = addQuestionValidateBeforeCall(categoryId, questionTitle, questionDescription, loggedInUserId, accessToken, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Share question without attachment (asynchronously)
     * Allows the user to share question without attachment. Returns the question object
     * @param categoryId categoryId (required)
     * @param questionTitle Question Title (required)
     * @param questionDescription Describe question (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuestionAsync(Long categoryId, String questionTitle, String questionDescription, String loggedInUserId, String accessToken, String clientToken, final ApiCallback<VerveResponseQuestion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuestionValidateBeforeCall(categoryId, questionTitle, questionDescription, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addQuestion_0 */
    private com.squareup.okhttp.Call addQuestion_0Call(Long body, String body2, String body3, String loggedInUserId, String accessToken, String clientToken, List<Attachment> body4, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body4;
        
        // create path and map variables
        String localVarPath = "/questions/attachment".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuestion_0ValidateBeforeCall(Long body, String body2, String body3, String loggedInUserId, String accessToken, String clientToken, List<Attachment> body4, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addQuestion_0(Async)");
        }
        
        // verify the required parameter 'body2' is set
        if (body2 == null) {
            throw new ApiException("Missing the required parameter 'body2' when calling addQuestion_0(Async)");
        }
        
        // verify the required parameter 'body3' is set
        if (body3 == null) {
            throw new ApiException("Missing the required parameter 'body3' when calling addQuestion_0(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling addQuestion_0(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling addQuestion_0(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addQuestion_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addQuestion_0Call(body, body2, body3, loggedInUserId, accessToken, clientToken, body4, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Share question with attachment
     * Allows the user to share question with attachment. Returns the question object
     * @param body categoryId (required)
     * @param body2 questionTitle (required)
     * @param body3 questionDescription (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body4  (optional)
     * @return VerveResponseQuestion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestion addQuestion_0(Long body, String body2, String body3, String loggedInUserId, String accessToken, String clientToken, List<Attachment> body4) throws ApiException {
        ApiResponse<VerveResponseQuestion> resp = addQuestion_0WithHttpInfo(body, body2, body3, loggedInUserId, accessToken, clientToken, body4);
        return resp.getData();
    }

    /**
     * Share question with attachment
     * Allows the user to share question with attachment. Returns the question object
     * @param body categoryId (required)
     * @param body2 questionTitle (required)
     * @param body3 questionDescription (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body4  (optional)
     * @return ApiResponse&lt;VerveResponseQuestion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestion> addQuestion_0WithHttpInfo(Long body, String body2, String body3, String loggedInUserId, String accessToken, String clientToken, List<Attachment> body4) throws ApiException {
        com.squareup.okhttp.Call call = addQuestion_0ValidateBeforeCall(body, body2, body3, loggedInUserId, accessToken, clientToken, body4, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Share question with attachment (asynchronously)
     * Allows the user to share question with attachment. Returns the question object
     * @param body categoryId (required)
     * @param body2 questionTitle (required)
     * @param body3 questionDescription (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body4  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuestion_0Async(Long body, String body2, String body3, String loggedInUserId, String accessToken, String clientToken, List<Attachment> body4, final ApiCallback<VerveResponseQuestion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuestion_0ValidateBeforeCall(body, body2, body3, loggedInUserId, accessToken, clientToken, body4, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createQuestionCategory */
    private com.squareup.okhttp.Call createQuestionCategoryCall(String name, String description, String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/categories".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (organizationId != null)
        localVarFormParams.put("OrganizationId", organizationId);
        if (name != null)
        localVarFormParams.put("name", name);
        if (description != null)
        localVarFormParams.put("description", description);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createQuestionCategoryValidateBeforeCall(String name, String description, String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createQuestionCategory(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling createQuestionCategory(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling createQuestionCategory(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling createQuestionCategory(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling createQuestionCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createQuestionCategoryCall(name, description, loggedInUserId, accessToken, clientToken, organizationId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create question category
     * Creates a question category. Returns the created question category
     * @param name Name (required)
     * @param description description (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param organizationId OrganizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return VerveResponseQuestionCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionCategory createQuestionCategory(String name, String description, String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionCategory> resp = createQuestionCategoryWithHttpInfo(name, description, loggedInUserId, accessToken, clientToken, organizationId, fields);
        return resp.getData();
    }

    /**
     * Create question category
     * Creates a question category. Returns the created question category
     * @param name Name (required)
     * @param description description (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param organizationId OrganizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return ApiResponse&lt;VerveResponseQuestionCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionCategory> createQuestionCategoryWithHttpInfo(String name, String description, String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createQuestionCategoryValidateBeforeCall(name, description, loggedInUserId, accessToken, clientToken, organizationId, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create question category (asynchronously)
     * Creates a question category. Returns the created question category
     * @param name Name (required)
     * @param description description (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param organizationId OrganizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createQuestionCategoryAsync(String name, String description, String loggedInUserId, String accessToken, String clientToken, Long organizationId, String fields, final ApiCallback<VerveResponseQuestionCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createQuestionCategoryValidateBeforeCall(name, description, loggedInUserId, accessToken, clientToken, organizationId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteAnswer */
    private com.squareup.okhttp.Call deleteAnswerCall(Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/answers/{answerId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "answerId" + "\\}", apiClient.escapeString(answerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAnswerValidateBeforeCall(Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'answerId' is set
        if (answerId == null) {
            throw new ApiException("Missing the required parameter 'answerId' when calling deleteAnswer(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling deleteAnswer(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling deleteAnswer(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteAnswer(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteAnswerCall(answerId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete answer
     * Allows the user to delete an answer. Returns the deleted answer
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return VerveResponseAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseAnswer deleteAnswer(Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseAnswer> resp = deleteAnswerWithHttpInfo(answerId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Delete answer
     * Allows the user to delete an answer. Returns the deleted answer
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseAnswer> deleteAnswerWithHttpInfo(Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnswerValidateBeforeCall(answerId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete answer (asynchronously)
     * Allows the user to delete an answer. Returns the deleted answer
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnswerAsync(Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseAnswer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnswerValidateBeforeCall(answerId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteQuestion */
    private com.squareup.okhttp.Call deleteQuestionCall(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{questionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuestionValidateBeforeCall(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling deleteQuestion(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling deleteQuestion(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling deleteQuestion(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteQuestionCall(questionId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete question
     * Allows the user to delete a question. Returns the deleted answer
     * @param questionId questionId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return VerveResponseQuestion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestion deleteQuestion(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestion> resp = deleteQuestionWithHttpInfo(questionId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Delete question
     * Allows the user to delete a question. Returns the deleted answer
     * @param questionId questionId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseQuestion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestion> deleteQuestionWithHttpInfo(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuestionValidateBeforeCall(questionId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete question (asynchronously)
     * Allows the user to delete a question. Returns the deleted answer
     * @param questionId questionId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuestionAsync(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuestionValidateBeforeCall(questionId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteQuestionCategory */
    private com.squareup.okhttp.Call deleteQuestionCategoryCall(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/categories/{categoryId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "categoryId" + "\\}", apiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuestionCategoryValidateBeforeCall(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling deleteQuestionCategory(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling deleteQuestionCategory(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling deleteQuestionCategory(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteQuestionCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteQuestionCategoryCall(categoryId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete question category
     * Allows the user to delete the question category. Returns the deleted question category
     * @param categoryId categoryId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return VerveResponseQuestionCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionCategory deleteQuestionCategory(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionCategory> resp = deleteQuestionCategoryWithHttpInfo(categoryId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Delete question category
     * Allows the user to delete the question category. Returns the deleted question category
     * @param categoryId categoryId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return ApiResponse&lt;VerveResponseQuestionCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionCategory> deleteQuestionCategoryWithHttpInfo(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuestionCategoryValidateBeforeCall(categoryId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete question category (asynchronously)
     * Allows the user to delete the question category. Returns the deleted question category
     * @param categoryId categoryId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuestionCategoryAsync(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestionCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuestionCategoryValidateBeforeCall(categoryId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for dislikeAnswer */
    private com.squareup.okhttp.Call dislikeAnswerCall(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{questionId}/answers/{answerId}/dislike".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()))
        .replaceAll("\\{" + "answerId" + "\\}", apiClient.escapeString(answerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dislikeAnswerValidateBeforeCall(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling dislikeAnswer(Async)");
        }
        
        // verify the required parameter 'answerId' is set
        if (answerId == null) {
            throw new ApiException("Missing the required parameter 'answerId' when calling dislikeAnswer(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling dislikeAnswer(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling dislikeAnswer(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling dislikeAnswer(Async)");
        }
        
        
        com.squareup.okhttp.Call call = dislikeAnswerCall(questionId, answerId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Dislike answer
     * Allows the user to dislike the answer.
     * @param questionId questionId (required)
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return VerveResponseAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseAnswer dislikeAnswer(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseAnswer> resp = dislikeAnswerWithHttpInfo(questionId, answerId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Dislike answer
     * Allows the user to dislike the answer.
     * @param questionId questionId (required)
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseAnswer> dislikeAnswerWithHttpInfo(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = dislikeAnswerValidateBeforeCall(questionId, answerId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dislike answer (asynchronously)
     * Allows the user to dislike the answer.
     * @param questionId questionId (required)
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dislikeAnswerAsync(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseAnswer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dislikeAnswerValidateBeforeCall(questionId, answerId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAnswers */
    private com.squareup.okhttp.Call getAnswersCall(Long questionId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{questionId}/answers".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnswersValidateBeforeCall(Long questionId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling getAnswers(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getAnswers(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getAnswers(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getAnswers(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getAnswers(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getAnswers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAnswersCall(questionId, start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of answers by questionId
     * Returns the list of answers by questionId
     * @param questionId questionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return VerveResponseAnswerList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseAnswerList getAnswers(Long questionId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseAnswerList> resp = getAnswersWithHttpInfo(questionId, start, end, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Get list of answers by questionId
     * Returns the list of answers by questionId
     * @param questionId questionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseAnswerList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseAnswerList> getAnswersWithHttpInfo(Long questionId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getAnswersValidateBeforeCall(questionId, start, end, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseAnswerList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of answers by questionId (asynchronously)
     * Returns the list of answers by questionId
     * @param questionId questionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnswersAsync(Long questionId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseAnswerList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnswersValidateBeforeCall(questionId, start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseAnswerList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFriendsQuestions */
    private com.squareup.okhttp.Call getFriendsQuestionsCall(String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/friends".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (questionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "questionStatus", questionStatus));
        if (categoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryId", categoryId));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFriendsQuestionsValidateBeforeCall(String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionStatus' is set
        if (questionStatus == null) {
            throw new ApiException("Missing the required parameter 'questionStatus' when calling getFriendsQuestions(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getFriendsQuestions(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getFriendsQuestions(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getFriendsQuestions(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getFriendsQuestions(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getFriendsQuestions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getFriendsQuestionsCall(questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of questions shared by friends
     * Returns the list of questions shared by friends
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return VerveResponseQuestionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionList getFriendsQuestions(String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionList> resp = getFriendsQuestionsWithHttpInfo(questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields);
        return resp.getData();
    }

    /**
     * Get list of questions shared by friends
     * Returns the list of questions shared by friends
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseQuestionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionList> getFriendsQuestionsWithHttpInfo(String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getFriendsQuestionsValidateBeforeCall(questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of questions shared by friends (asynchronously)
     * Returns the list of questions shared by friends
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFriendsQuestionsAsync(String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields, final ApiCallback<VerveResponseQuestionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFriendsQuestionsValidateBeforeCall(questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getQuestion */
    private com.squareup.okhttp.Call getQuestionCall(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{questionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionValidateBeforeCall(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling getQuestion(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getQuestion(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getQuestion(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getQuestionCall(questionId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get question by id
     * Returns the question by id
     * @param questionId questionId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return VerveResponseQuestion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestion getQuestion(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestion> resp = getQuestionWithHttpInfo(questionId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Get question by id
     * Returns the question by id
     * @param questionId questionId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseQuestion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestion> getQuestionWithHttpInfo(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionValidateBeforeCall(questionId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get question by id (asynchronously)
     * Returns the question by id
     * @param questionId questionId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuestionAsync(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionValidateBeforeCall(questionId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getQuestionCategories */
    private com.squareup.okhttp.Call getQuestionCategoriesCall(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/categories".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionCategoriesValidateBeforeCall(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getQuestionCategories(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getQuestionCategories(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getQuestionCategories(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getQuestionCategories(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getQuestionCategories(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getQuestionCategoriesCall(start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the list of question categories
     * Returns the list of question categories
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return VerveResponseQuestionCategoryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionCategoryList getQuestionCategories(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionCategoryList> resp = getQuestionCategoriesWithHttpInfo(start, end, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Get the list of question categories
     * Returns the list of question categories
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return ApiResponse&lt;VerveResponseQuestionCategoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionCategoryList> getQuestionCategoriesWithHttpInfo(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionCategoriesValidateBeforeCall(start, end, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategoryList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of question categories (asynchronously)
     * Returns the list of question categories
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuestionCategoriesAsync(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestionCategoryList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionCategoriesValidateBeforeCall(start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategoryList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getQuestionsForUser */
    private com.squareup.okhttp.Call getQuestionsForUserCall(String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (questionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "questionStatus", questionStatus));
        if (categoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryId", categoryId));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionsForUserValidateBeforeCall(String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionStatus' is set
        if (questionStatus == null) {
            throw new ApiException("Missing the required parameter 'questionStatus' when calling getQuestionsForUser(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getQuestionsForUser(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getQuestionsForUser(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getQuestionsForUser(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getQuestionsForUser(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getQuestionsForUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getQuestionsForUserCall(questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of all questions visible to the user
     * Returns the list of all questions visible to the user
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return VerveResponseQuestionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionList getQuestionsForUser(String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionList> resp = getQuestionsForUserWithHttpInfo(questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields);
        return resp.getData();
    }

    /**
     * Get list of all questions visible to the user
     * Returns the list of all questions visible to the user
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseQuestionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionList> getQuestionsForUserWithHttpInfo(String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionsForUserValidateBeforeCall(questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of all questions visible to the user (asynchronously)
     * Returns the list of all questions visible to the user
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuestionsForUserAsync(String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields, final ApiCallback<VerveResponseQuestionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionsForUserValidateBeforeCall(questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRecommendQuestion */
    private com.squareup.okhttp.Call getRecommendQuestionCall(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/recommend".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRecommendQuestionValidateBeforeCall(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getRecommendQuestion(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getRecommendQuestion(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getRecommendQuestion(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getRecommendQuestion(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getRecommendQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRecommendQuestionCall(start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of recommended questions
     * Returns the list of recommended questions
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return VerveResponseQuestionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionList getRecommendQuestion(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionList> resp = getRecommendQuestionWithHttpInfo(start, end, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Get list of recommended questions
     * Returns the list of recommended questions
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseQuestionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionList> getRecommendQuestionWithHttpInfo(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getRecommendQuestionValidateBeforeCall(start, end, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of recommended questions (asynchronously)
     * Returns the list of recommended questions
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecommendQuestionAsync(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecommendQuestionValidateBeforeCall(start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRecommendedQuestionsFromDB */
    private com.squareup.okhttp.Call getRecommendedQuestionsFromDBCall(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{userId}/recommendedQuestions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRecommendedQuestionsFromDBValidateBeforeCall(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getRecommendedQuestionsFromDB(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getRecommendedQuestionsFromDB(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getRecommendedQuestionsFromDB(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getRecommendedQuestionsFromDB(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getRecommendedQuestionsFromDB(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getRecommendedQuestionsFromDB(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRecommendedQuestionsFromDBCall(userId, start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of recommended questions from DB
     * Returns the list of recommended questions from DB
     * @param userId userId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return VerveResponseQuestionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionList getRecommendedQuestionsFromDB(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionList> resp = getRecommendedQuestionsFromDBWithHttpInfo(userId, start, end, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Get list of recommended questions from DB
     * Returns the list of recommended questions from DB
     * @param userId userId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseQuestionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionList> getRecommendedQuestionsFromDBWithHttpInfo(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getRecommendedQuestionsFromDBValidateBeforeCall(userId, start, end, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of recommended questions from DB (asynchronously)
     * Returns the list of recommended questions from DB
     * @param userId userId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecommendedQuestionsFromDBAsync(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecommendedQuestionsFromDBValidateBeforeCall(userId, start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRecommendedUsersFromDB */
    private com.squareup.okhttp.Call getRecommendedUsersFromDBCall(Long questionId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{questionId}/recommendedUsers".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRecommendedUsersFromDBValidateBeforeCall(Long questionId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling getRecommendedUsersFromDB(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getRecommendedUsersFromDB(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getRecommendedUsersFromDB(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getRecommendedUsersFromDB(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getRecommendedUsersFromDB(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getRecommendedUsersFromDB(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRecommendedUsersFromDBCall(questionId, start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of recommended Users from DB
     * Returns the list of recommended users from DB
     * @param questionId questionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)profileImage&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)emailId&lt;br/&gt;5)profileImage&lt;br/&gt;6)birthDate&lt;br/&gt;7)currentUserFollowing&lt;br/&gt;8)currentUserFriend&lt;br/&gt;9)equityScore (optional, default to userId,firstName,lastName)
     * @return VerveResponseUserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseUserList getRecommendedUsersFromDB(Long questionId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseUserList> resp = getRecommendedUsersFromDBWithHttpInfo(questionId, start, end, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Get list of recommended Users from DB
     * Returns the list of recommended users from DB
     * @param questionId questionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)profileImage&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)emailId&lt;br/&gt;5)profileImage&lt;br/&gt;6)birthDate&lt;br/&gt;7)currentUserFollowing&lt;br/&gt;8)currentUserFriend&lt;br/&gt;9)equityScore (optional, default to userId,firstName,lastName)
     * @return ApiResponse&lt;VerveResponseUserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseUserList> getRecommendedUsersFromDBWithHttpInfo(Long questionId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getRecommendedUsersFromDBValidateBeforeCall(questionId, start, end, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseUserList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of recommended Users from DB (asynchronously)
     * Returns the list of recommended users from DB
     * @param questionId questionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)profileImage&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)userId&lt;br/&gt;2)firstName&lt;br/&gt;3)lastName&lt;br/&gt;4)emailId&lt;br/&gt;5)profileImage&lt;br/&gt;6)birthDate&lt;br/&gt;7)currentUserFollowing&lt;br/&gt;8)currentUserFriend&lt;br/&gt;9)equityScore (optional, default to userId,firstName,lastName)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecommendedUsersFromDBAsync(Long questionId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseUserList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecommendedUsersFromDBValidateBeforeCall(questionId, start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseUserList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserQuestions */
    private com.squareup.okhttp.Call getUserQuestionsCall(Long userId, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{userId}/shared".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (questionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "questionStatus", questionStatus));
        if (categoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryId", categoryId));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserQuestionsValidateBeforeCall(Long userId, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserQuestions(Async)");
        }
        
        // verify the required parameter 'questionStatus' is set
        if (questionStatus == null) {
            throw new ApiException("Missing the required parameter 'questionStatus' when calling getUserQuestions(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getUserQuestions(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getUserQuestions(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getUserQuestions(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getUserQuestions(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserQuestions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserQuestionsCall(userId, questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of questions shared by user
     * Returns the list of questions shared by specific user
     * @param userId userId (required)
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return VerveResponseQuestionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionList getUserQuestions(Long userId, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionList> resp = getUserQuestionsWithHttpInfo(userId, questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields);
        return resp.getData();
    }

    /**
     * Get list of questions shared by user
     * Returns the list of questions shared by specific user
     * @param userId userId (required)
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseQuestionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionList> getUserQuestionsWithHttpInfo(Long userId, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getUserQuestionsValidateBeforeCall(userId, questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of questions shared by user (asynchronously)
     * Returns the list of questions shared by specific user
     * @param userId userId (required)
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserQuestionsAsync(Long userId, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields, final ApiCallback<VerveResponseQuestionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserQuestionsValidateBeforeCall(userId, questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserSubscribedQuestionCategories */
    private com.squareup.okhttp.Call getUserSubscribedQuestionCategoriesCall(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/categories/{userId}/subscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserSubscribedQuestionCategoriesValidateBeforeCall(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserSubscribedQuestionCategories(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getUserSubscribedQuestionCategories(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getUserSubscribedQuestionCategories(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getUserSubscribedQuestionCategories(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getUserSubscribedQuestionCategories(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserSubscribedQuestionCategories(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserSubscribedQuestionCategoriesCall(userId, start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of question categories subscribed by the user
     * Returns the list of question categories subscribed by the user
     * @param userId userId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return VerveResponseQuestionCategoryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionCategoryList getUserSubscribedQuestionCategories(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionCategoryList> resp = getUserSubscribedQuestionCategoriesWithHttpInfo(userId, start, end, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Get list of question categories subscribed by the user
     * Returns the list of question categories subscribed by the user
     * @param userId userId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return ApiResponse&lt;VerveResponseQuestionCategoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionCategoryList> getUserSubscribedQuestionCategoriesWithHttpInfo(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getUserSubscribedQuestionCategoriesValidateBeforeCall(userId, start, end, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategoryList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of question categories subscribed by the user (asynchronously)
     * Returns the list of question categories subscribed by the user
     * @param userId userId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserSubscribedQuestionCategoriesAsync(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestionCategoryList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserSubscribedQuestionCategoriesValidateBeforeCall(userId, start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategoryList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserSubscribedQuestions */
    private com.squareup.okhttp.Call getUserSubscribedQuestionsCall(Long userId, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{userId}/subscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (questionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "questionStatus", questionStatus));
        if (categoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryId", categoryId));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserSubscribedQuestionsValidateBeforeCall(Long userId, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserSubscribedQuestions(Async)");
        }
        
        // verify the required parameter 'questionStatus' is set
        if (questionStatus == null) {
            throw new ApiException("Missing the required parameter 'questionStatus' when calling getUserSubscribedQuestions(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getUserSubscribedQuestions(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getUserSubscribedQuestions(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getUserSubscribedQuestions(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getUserSubscribedQuestions(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserSubscribedQuestions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserSubscribedQuestionsCall(userId, questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of questions subscribed by user
     * Returns the list of questions subscribed by specific user
     * @param userId userId (required)
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return VerveResponseQuestionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionList getUserSubscribedQuestions(Long userId, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionList> resp = getUserSubscribedQuestionsWithHttpInfo(userId, questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields);
        return resp.getData();
    }

    /**
     * Get list of questions subscribed by user
     * Returns the list of questions subscribed by specific user
     * @param userId userId (required)
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseQuestionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionList> getUserSubscribedQuestionsWithHttpInfo(Long userId, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getUserSubscribedQuestionsValidateBeforeCall(userId, questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of questions subscribed by user (asynchronously)
     * Returns the list of questions subscribed by specific user
     * @param userId userId (required)
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserSubscribedQuestionsAsync(Long userId, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, Long categoryId, String fields, final ApiCallback<VerveResponseQuestionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserSubscribedQuestionsValidateBeforeCall(userId, questionStatus, start, end, loggedInUserId, accessToken, clientToken, categoryId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for likeAnswer */
    private com.squareup.okhttp.Call likeAnswerCall(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{questionId}/answers/{answerId}/like".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()))
        .replaceAll("\\{" + "answerId" + "\\}", apiClient.escapeString(answerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call likeAnswerValidateBeforeCall(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling likeAnswer(Async)");
        }
        
        // verify the required parameter 'answerId' is set
        if (answerId == null) {
            throw new ApiException("Missing the required parameter 'answerId' when calling likeAnswer(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling likeAnswer(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling likeAnswer(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling likeAnswer(Async)");
        }
        
        
        com.squareup.okhttp.Call call = likeAnswerCall(questionId, answerId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Like answer
     * Allows the user to like the answer.
     * @param questionId questionId (required)
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return VerveResponseAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseAnswer likeAnswer(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseAnswer> resp = likeAnswerWithHttpInfo(questionId, answerId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Like answer
     * Allows the user to like the answer.
     * @param questionId questionId (required)
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseAnswer> likeAnswerWithHttpInfo(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = likeAnswerValidateBeforeCall(questionId, answerId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Like answer (asynchronously)
     * Allows the user to like the answer.
     * @param questionId questionId (required)
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call likeAnswerAsync(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseAnswer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = likeAnswerValidateBeforeCall(questionId, answerId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for markAsAnAnswer */
    private com.squareup.okhttp.Call markAsAnAnswerCall(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{questionId}/answers/{answerId}/mark".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()))
        .replaceAll("\\{" + "answerId" + "\\}", apiClient.escapeString(answerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call markAsAnAnswerValidateBeforeCall(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling markAsAnAnswer(Async)");
        }
        
        // verify the required parameter 'answerId' is set
        if (answerId == null) {
            throw new ApiException("Missing the required parameter 'answerId' when calling markAsAnAnswer(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling markAsAnAnswer(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling markAsAnAnswer(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling markAsAnAnswer(Async)");
        }
        
        
        com.squareup.okhttp.Call call = markAsAnAnswerCall(questionId, answerId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Mark answer as a answer
     * Marks the answer as accepted. This means the user is satisfied with the answer &amp; then the question will go into closed state
     * @param questionId questionId (required)
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return VerveResponseAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseAnswer markAsAnAnswer(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseAnswer> resp = markAsAnAnswerWithHttpInfo(questionId, answerId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Mark answer as a answer
     * Marks the answer as accepted. This means the user is satisfied with the answer &amp; then the question will go into closed state
     * @param questionId questionId (required)
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseAnswer> markAsAnAnswerWithHttpInfo(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = markAsAnAnswerValidateBeforeCall(questionId, answerId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mark answer as a answer (asynchronously)
     * Marks the answer as accepted. This means the user is satisfied with the answer &amp; then the question will go into closed state
     * @param questionId questionId (required)
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call markAsAnAnswerAsync(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseAnswer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = markAsAnAnswerValidateBeforeCall(questionId, answerId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for searchQuestions */
    private com.squareup.okhttp.Call searchQuestionsCall(String searchText, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/search".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (searchText != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchText", searchText));
        if (questionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "questionStatus", questionStatus));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchQuestionsValidateBeforeCall(String searchText, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'searchText' is set
        if (searchText == null) {
            throw new ApiException("Missing the required parameter 'searchText' when calling searchQuestions(Async)");
        }
        
        // verify the required parameter 'questionStatus' is set
        if (questionStatus == null) {
            throw new ApiException("Missing the required parameter 'questionStatus' when calling searchQuestions(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling searchQuestions(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling searchQuestions(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling searchQuestions(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling searchQuestions(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling searchQuestions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = searchQuestionsCall(searchText, questionStatus, start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of matching questions
     * Returns the list of matching questions
     * @param searchText Search Text, keywords to search (required)
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return VerveResponseQuestionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionList searchQuestions(String searchText, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionList> resp = searchQuestionsWithHttpInfo(searchText, questionStatus, start, end, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Get list of matching questions
     * Returns the list of matching questions
     * @param searchText Search Text, keywords to search (required)
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseQuestionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionList> searchQuestionsWithHttpInfo(String searchText, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = searchQuestionsValidateBeforeCall(searchText, questionStatus, start, end, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of matching questions (asynchronously)
     * Returns the list of matching questions
     * @param searchText Search Text, keywords to search (required)
     * @param questionStatus Question status &lt;br/&gt; 1) ALL &lt;br/&gt; 2)  UNREPLIED &lt;br/&gt; 3)  REPLIED &lt;br/&gt; 4)  CLOSED (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchQuestionsAsync(String searchText, String questionStatus, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchQuestionsValidateBeforeCall(searchText, questionStatus, start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for subscribeQuestion */
    private com.squareup.okhttp.Call subscribeQuestionCall(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{questionId}/subscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscribeQuestionValidateBeforeCall(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling subscribeQuestion(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling subscribeQuestion(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling subscribeQuestion(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling subscribeQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = subscribeQuestionCall(questionId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Subscribe question
     * Allows the user to subscribe a question
     * @param questionId questionId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return VerveResponseQuestion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestion subscribeQuestion(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestion> resp = subscribeQuestionWithHttpInfo(questionId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Subscribe question
     * Allows the user to subscribe a question
     * @param questionId questionId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseQuestion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestion> subscribeQuestionWithHttpInfo(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = subscribeQuestionValidateBeforeCall(questionId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Subscribe question (asynchronously)
     * Allows the user to subscribe a question
     * @param questionId questionId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscribeQuestionAsync(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscribeQuestionValidateBeforeCall(questionId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for subscribeQuestionCategory */
    private com.squareup.okhttp.Call subscribeQuestionCategoryCall(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/categories/{categoryId}/subscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "categoryId" + "\\}", apiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscribeQuestionCategoryValidateBeforeCall(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling subscribeQuestionCategory(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling subscribeQuestionCategory(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling subscribeQuestionCategory(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling subscribeQuestionCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = subscribeQuestionCategoryCall(categoryId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Subscribe question category
     * Returns the subscribed question category
     * @param categoryId categoryId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return VerveResponseQuestionCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionCategory subscribeQuestionCategory(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionCategory> resp = subscribeQuestionCategoryWithHttpInfo(categoryId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Subscribe question category
     * Returns the subscribed question category
     * @param categoryId categoryId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return ApiResponse&lt;VerveResponseQuestionCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionCategory> subscribeQuestionCategoryWithHttpInfo(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = subscribeQuestionCategoryValidateBeforeCall(categoryId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Subscribe question category (asynchronously)
     * Returns the subscribed question category
     * @param categoryId categoryId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscribeQuestionCategoryAsync(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestionCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscribeQuestionCategoryValidateBeforeCall(categoryId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for unmarkAsAnAnswer */
    private com.squareup.okhttp.Call unmarkAsAnAnswerCall(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{questionId}/answers/{answerId}/unmark".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()))
        .replaceAll("\\{" + "answerId" + "\\}", apiClient.escapeString(answerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unmarkAsAnAnswerValidateBeforeCall(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling unmarkAsAnAnswer(Async)");
        }
        
        // verify the required parameter 'answerId' is set
        if (answerId == null) {
            throw new ApiException("Missing the required parameter 'answerId' when calling unmarkAsAnAnswer(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling unmarkAsAnAnswer(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling unmarkAsAnAnswer(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling unmarkAsAnAnswer(Async)");
        }
        
        
        com.squareup.okhttp.Call call = unmarkAsAnAnswerCall(questionId, answerId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unmark answer as a answer
     * Unmarks the answer. This will remove the marked answer.
     * @param questionId questionId (required)
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return VerveResponseAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseAnswer unmarkAsAnAnswer(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseAnswer> resp = unmarkAsAnAnswerWithHttpInfo(questionId, answerId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Unmark answer as a answer
     * Unmarks the answer. This will remove the marked answer.
     * @param questionId questionId (required)
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseAnswer> unmarkAsAnAnswerWithHttpInfo(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = unmarkAsAnAnswerValidateBeforeCall(questionId, answerId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unmark answer as a answer (asynchronously)
     * Unmarks the answer. This will remove the marked answer.
     * @param questionId questionId (required)
     * @param answerId answerId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unmarkAsAnAnswerAsync(Long questionId, Long answerId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseAnswer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unmarkAsAnAnswerValidateBeforeCall(questionId, answerId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for unsubscribeQuestion */
    private com.squareup.okhttp.Call unsubscribeQuestionCall(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{questionId}/unsubscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsubscribeQuestionValidateBeforeCall(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling unsubscribeQuestion(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling unsubscribeQuestion(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling unsubscribeQuestion(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling unsubscribeQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = unsubscribeQuestionCall(questionId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unsubscribe question
     * Allows the user to unsubscribe a question
     * @param questionId questionId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return VerveResponseQuestion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestion unsubscribeQuestion(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestion> resp = unsubscribeQuestionWithHttpInfo(questionId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Unsubscribe question
     * Allows the user to unsubscribe a question
     * @param questionId questionId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseQuestion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestion> unsubscribeQuestionWithHttpInfo(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = unsubscribeQuestionValidateBeforeCall(questionId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unsubscribe question (asynchronously)
     * Allows the user to unsubscribe a question
     * @param questionId questionId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsubscribeQuestionAsync(Long questionId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsubscribeQuestionValidateBeforeCall(questionId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for unsubscribeQuestionCategory */
    private com.squareup.okhttp.Call unsubscribeQuestionCategoryCall(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/categories/{categoryId}/unsubscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "categoryId" + "\\}", apiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unsubscribeQuestionCategoryValidateBeforeCall(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling unsubscribeQuestionCategory(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling unsubscribeQuestionCategory(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling unsubscribeQuestionCategory(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling unsubscribeQuestionCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = unsubscribeQuestionCategoryCall(categoryId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unsubscribe question category
     * Returns the unsubscribed question category
     * @param categoryId categoryId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return VerveResponseQuestionCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionCategory unsubscribeQuestionCategory(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionCategory> resp = unsubscribeQuestionCategoryWithHttpInfo(categoryId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Unsubscribe question category
     * Returns the unsubscribed question category
     * @param categoryId categoryId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return ApiResponse&lt;VerveResponseQuestionCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionCategory> unsubscribeQuestionCategoryWithHttpInfo(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = unsubscribeQuestionCategoryValidateBeforeCall(categoryId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unsubscribe question category (asynchronously)
     * Returns the unsubscribed question category
     * @param categoryId categoryId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsubscribeQuestionCategoryAsync(Long categoryId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestionCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsubscribeQuestionCategoryValidateBeforeCall(categoryId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateAnswer */
    private com.squareup.okhttp.Call updateAnswerCall(Long answerId, String answer, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/answers/{answerId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "answerId" + "\\}", apiClient.escapeString(answerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (answer != null)
        localVarFormParams.put("answer", answer);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAnswerValidateBeforeCall(Long answerId, String answer, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'answerId' is set
        if (answerId == null) {
            throw new ApiException("Missing the required parameter 'answerId' when calling updateAnswer(Async)");
        }
        
        // verify the required parameter 'answer' is set
        if (answer == null) {
            throw new ApiException("Missing the required parameter 'answer' when calling updateAnswer(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling updateAnswer(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling updateAnswer(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateAnswer(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateAnswerCall(answerId, answer, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update answer
     * Allows the user to update an answer. Returns the updated answer
     * @param answerId answerId (required)
     * @param answer answer (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return VerveResponseAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseAnswer updateAnswer(Long answerId, String answer, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseAnswer> resp = updateAnswerWithHttpInfo(answerId, answer, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Update answer
     * Allows the user to update an answer. Returns the updated answer
     * @param answerId answerId (required)
     * @param answer answer (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseAnswer> updateAnswerWithHttpInfo(Long answerId, String answer, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateAnswerValidateBeforeCall(answerId, answer, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update answer (asynchronously)
     * Allows the user to update an answer. Returns the updated answer
     * @param answerId answerId (required)
     * @param answer answer (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt;&lt;br/&gt;1)answerId&lt;br/&gt;2)answerDescription&lt;br/&gt;3)createdDate&lt;br/&gt;4)questionId&lt;br/&gt;5)answeringUser&lt;br/&gt;6)isMarkedAnswer&lt;br/&gt;7)noOfLikes&lt;br/&gt;8)noOfDislikes&lt;br/&gt;9)replyCount&lt;br/&gt;10)isLiked&lt;br/&gt;11)isDisliked (optional, default to answerId,answerDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAnswerAsync(Long answerId, String answer, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseAnswer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAnswerValidateBeforeCall(answerId, answer, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseAnswer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateQuestion */
    private com.squareup.okhttp.Call updateQuestionCall(Long questionId, String questionTitle, String questionDescription, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/{questionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "questionId" + "\\}", apiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (questionTitle != null)
        localVarFormParams.put("questionTitle", questionTitle);
        if (questionDescription != null)
        localVarFormParams.put("questionDescription", questionDescription);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuestionValidateBeforeCall(Long questionId, String questionTitle, String questionDescription, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling updateQuestion(Async)");
        }
        
        // verify the required parameter 'questionTitle' is set
        if (questionTitle == null) {
            throw new ApiException("Missing the required parameter 'questionTitle' when calling updateQuestion(Async)");
        }
        
        // verify the required parameter 'questionDescription' is set
        if (questionDescription == null) {
            throw new ApiException("Missing the required parameter 'questionDescription' when calling updateQuestion(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling updateQuestion(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling updateQuestion(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateQuestionCall(questionId, questionTitle, questionDescription, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update question
     * Allows the user to update question. Returns the updated question
     * @param questionId questionId (required)
     * @param questionTitle Question Title (required)
     * @param questionDescription Describe Question (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return VerveResponseQuestion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestion updateQuestion(Long questionId, String questionTitle, String questionDescription, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestion> resp = updateQuestionWithHttpInfo(questionId, questionTitle, questionDescription, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Update question
     * Allows the user to update question. Returns the updated question
     * @param questionId questionId (required)
     * @param questionTitle Question Title (required)
     * @param questionDescription Describe Question (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @return ApiResponse&lt;VerveResponseQuestion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestion> updateQuestionWithHttpInfo(Long questionId, String questionTitle, String questionDescription, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateQuestionValidateBeforeCall(questionId, questionTitle, questionDescription, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update question (asynchronously)
     * Allows the user to update question. Returns the updated question
     * @param questionId questionId (required)
     * @param questionTitle Question Title (required)
     * @param questionDescription Describe Question (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)createdDate&lt;br/&gt;&lt;b&gt;A) Available values-&lt;/b&gt;&lt;br/&gt;1)questionId&lt;br/&gt;2)questionTitle&lt;br/&gt;3)questionDescription&lt;br/&gt;4)issuer&lt;br/&gt;5)noOfAnswers&lt;br/&gt;6)isClosed&lt;br/&gt;7)createdDate&lt;br/&gt;8)lastUpdatedDate&lt;br/&gt;9)videoId&lt;br/&gt;10)fileURL&lt;br/&gt;11)isSubscribed&lt;br/&gt;12)sentiment&lt;/br&gt;13)entity (optional, default to questionId,questionTitle,questionDescription,createdDate)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuestionAsync(Long questionId, String questionTitle, String questionDescription, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuestionValidateBeforeCall(questionId, questionTitle, questionDescription, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateQuestionCategory */
    private com.squareup.okhttp.Call updateQuestionCategoryCall(Long categoryId, String categoryName, String categoryDescription, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/questions/categories/{categoryId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "categoryId" + "\\}", apiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (categoryName != null)
        localVarFormParams.put("categoryName", categoryName);
        if (categoryDescription != null)
        localVarFormParams.put("categoryDescription", categoryDescription);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuestionCategoryValidateBeforeCall(Long categoryId, String categoryName, String categoryDescription, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateQuestionCategory(Async)");
        }
        
        // verify the required parameter 'categoryName' is set
        if (categoryName == null) {
            throw new ApiException("Missing the required parameter 'categoryName' when calling updateQuestionCategory(Async)");
        }
        
        // verify the required parameter 'categoryDescription' is set
        if (categoryDescription == null) {
            throw new ApiException("Missing the required parameter 'categoryDescription' when calling updateQuestionCategory(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling updateQuestionCategory(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling updateQuestionCategory(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateQuestionCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateQuestionCategoryCall(categoryId, categoryName, categoryDescription, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update question category
     * Allows the user to update the question category. Returns the updated question category
     * @param categoryId categoryId (required)
     * @param categoryName Category Name (required)
     * @param categoryDescription Describe category (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return VerveResponseQuestionCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseQuestionCategory updateQuestionCategory(Long categoryId, String categoryName, String categoryDescription, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseQuestionCategory> resp = updateQuestionCategoryWithHttpInfo(categoryId, categoryName, categoryDescription, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Update question category
     * Allows the user to update the question category. Returns the updated question category
     * @param categoryId categoryId (required)
     * @param categoryName Category Name (required)
     * @param categoryDescription Describe category (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @return ApiResponse&lt;VerveResponseQuestionCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseQuestionCategory> updateQuestionCategoryWithHttpInfo(Long categoryId, String categoryName, String categoryDescription, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateQuestionCategoryValidateBeforeCall(categoryId, categoryName, categoryDescription, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update question category (asynchronously)
     * Allows the user to update the question category. Returns the updated question category
     * @param categoryId categoryId (required)
     * @param categoryName Category Name (required)
     * @param categoryDescription Describe category (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)categoryId&lt;br/&gt;2)categoryName&lt;br/&gt;3)categoryDescription&lt;br/&gt;4)createdDate&lt;br/&gt;5)isSubscribed (optional, default to categoryId,categoryName)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuestionCategoryAsync(Long categoryId, String categoryName, String categoryDescription, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseQuestionCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuestionCategoryValidateBeforeCall(categoryId, categoryName, categoryDescription, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseQuestionCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
