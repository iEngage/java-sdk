/*
 * Stakeholder engagement API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiCallback;
import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.ApiResponse;
import com.iengage.Configuration;
import com.iengage.Pair;
import com.iengage.ProgressRequestBody;
import com.iengage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.iengage.client.model.VerveResponseWFTask;
import com.iengage.client.model.VerveResponseWFTaskList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BPMApi {
    private ApiClient apiClient;

    public BPMApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BPMApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for assignWFTask */
    private com.squareup.okhttp.Call assignWFTaskCall(Long assigneeUserId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String comment, Long dueDate, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bpm/tasks/{taskId}/assign".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (assigneeUserId != null)
        localVarFormParams.put("assigneeUserId", assigneeUserId);
        if (comment != null)
        localVarFormParams.put("comment", comment);
        if (dueDate != null)
        localVarFormParams.put("dueDate", dueDate);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignWFTaskValidateBeforeCall(Long assigneeUserId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String comment, Long dueDate, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'assigneeUserId' is set
        if (assigneeUserId == null) {
            throw new ApiException("Missing the required parameter 'assigneeUserId' when calling assignWFTask(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling assignWFTask(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling assignWFTask(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling assignWFTask(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling assignWFTask(Async)");
        }
        
        
        com.squareup.okhttp.Call call = assignWFTaskCall(assigneeUserId, taskId, loggedInUserId, accessToken, clientToken, comment, dueDate, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Assign task
     * Assign BPM task, It will return task object
     * @param assigneeUserId assigneeUserId - assign to this user (required)
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param comment comment (optional)
     * @param dueDate dueDate (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return VerveResponseWFTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseWFTask assignWFTask(Long assigneeUserId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String comment, Long dueDate, String fields) throws ApiException {
        ApiResponse<VerveResponseWFTask> resp = assignWFTaskWithHttpInfo(assigneeUserId, taskId, loggedInUserId, accessToken, clientToken, comment, dueDate, fields);
        return resp.getData();
    }

    /**
     * Assign task
     * Assign BPM task, It will return task object
     * @param assigneeUserId assigneeUserId - assign to this user (required)
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param comment comment (optional)
     * @param dueDate dueDate (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return ApiResponse&lt;VerveResponseWFTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseWFTask> assignWFTaskWithHttpInfo(Long assigneeUserId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String comment, Long dueDate, String fields) throws ApiException {
        com.squareup.okhttp.Call call = assignWFTaskValidateBeforeCall(assigneeUserId, taskId, loggedInUserId, accessToken, clientToken, comment, dueDate, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseWFTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Assign task (asynchronously)
     * Assign BPM task, It will return task object
     * @param assigneeUserId assigneeUserId - assign to this user (required)
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param comment comment (optional)
     * @param dueDate dueDate (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignWFTaskAsync(Long assigneeUserId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String comment, Long dueDate, String fields, final ApiCallback<VerveResponseWFTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignWFTaskValidateBeforeCall(assigneeUserId, taskId, loggedInUserId, accessToken, clientToken, comment, dueDate, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseWFTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for completeWFTask */
    private com.squareup.okhttp.Call completeWFTaskCall(Long userId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String transition, String comment, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bpm/tasks/{taskId}/complete".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (userId != null)
        localVarFormParams.put("userId", userId);
        if (transition != null)
        localVarFormParams.put("transition", transition);
        if (comment != null)
        localVarFormParams.put("comment", comment);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call completeWFTaskValidateBeforeCall(Long userId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String transition, String comment, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling completeWFTask(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling completeWFTask(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling completeWFTask(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling completeWFTask(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling completeWFTask(Async)");
        }
        
        
        com.squareup.okhttp.Call call = completeWFTaskCall(userId, taskId, loggedInUserId, accessToken, clientToken, transition, comment, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Complete task
     * Complete BPM task, It will return task object
     * @param userId userId whose task want to complete (required)
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param transition transition (optional)
     * @param comment comment (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return VerveResponseWFTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseWFTask completeWFTask(Long userId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String transition, String comment, String fields) throws ApiException {
        ApiResponse<VerveResponseWFTask> resp = completeWFTaskWithHttpInfo(userId, taskId, loggedInUserId, accessToken, clientToken, transition, comment, fields);
        return resp.getData();
    }

    /**
     * Complete task
     * Complete BPM task, It will return task object
     * @param userId userId whose task want to complete (required)
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param transition transition (optional)
     * @param comment comment (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return ApiResponse&lt;VerveResponseWFTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseWFTask> completeWFTaskWithHttpInfo(Long userId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String transition, String comment, String fields) throws ApiException {
        com.squareup.okhttp.Call call = completeWFTaskValidateBeforeCall(userId, taskId, loggedInUserId, accessToken, clientToken, transition, comment, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseWFTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Complete task (asynchronously)
     * Complete BPM task, It will return task object
     * @param userId userId whose task want to complete (required)
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param transition transition (optional)
     * @param comment comment (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call completeWFTaskAsync(Long userId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String transition, String comment, String fields, final ApiCallback<VerveResponseWFTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = completeWFTaskValidateBeforeCall(userId, taskId, loggedInUserId, accessToken, clientToken, transition, comment, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseWFTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBPMTasks */
    private com.squareup.okhttp.Call getBPMTasksCall(Long userId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bpm/tasks/{taskId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "taskId" + "\\}", apiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userId", userId));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBPMTasksValidateBeforeCall(Long userId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getBPMTasks(Async)");
        }
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getBPMTasks(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getBPMTasks(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getBPMTasks(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getBPMTasks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getBPMTasksCall(userId, taskId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get task by task id
     * Return the BPM task
     * @param userId userId (required)
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return VerveResponseWFTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseWFTask getBPMTasks(Long userId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseWFTask> resp = getBPMTasksWithHttpInfo(userId, taskId, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Get task by task id
     * Return the BPM task
     * @param userId userId (required)
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return ApiResponse&lt;VerveResponseWFTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseWFTask> getBPMTasksWithHttpInfo(Long userId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getBPMTasksValidateBeforeCall(userId, taskId, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseWFTask>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get task by task id (asynchronously)
     * Return the BPM task
     * @param userId userId (required)
     * @param taskId taskId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBPMTasksAsync(Long userId, Long taskId, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseWFTask> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBPMTasksValidateBeforeCall(userId, taskId, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseWFTask>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSearchTask */
    private com.squareup.okhttp.Call getSearchTaskCall(Long userId, String searchString, Boolean completed, Boolean searchByUserRoles, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bpm/{userId}/tasks/name".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (searchString != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchString", searchString));
        if (completed != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "completed", completed));
        if (searchByUserRoles != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchByUserRoles", searchByUserRoles));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (organizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organizationId", organizationId));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSearchTaskValidateBeforeCall(Long userId, String searchString, Boolean completed, Boolean searchByUserRoles, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSearchTask(Async)");
        }
        
        // verify the required parameter 'searchString' is set
        if (searchString == null) {
            throw new ApiException("Missing the required parameter 'searchString' when calling getSearchTask(Async)");
        }
        
        // verify the required parameter 'completed' is set
        if (completed == null) {
            throw new ApiException("Missing the required parameter 'completed' when calling getSearchTask(Async)");
        }
        
        // verify the required parameter 'searchByUserRoles' is set
        if (searchByUserRoles == null) {
            throw new ApiException("Missing the required parameter 'searchByUserRoles' when calling getSearchTask(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getSearchTask(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getSearchTask(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getSearchTask(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getSearchTask(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getSearchTask(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSearchTaskCall(userId, searchString, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of BPM task assigned to user
     * Return the list of BPM task
     * @param userId userId (required)
     * @param searchString searchString (required)
     * @param completed 1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; (required)
     * @param searchByUserRoles 1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param type Type (optional)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return VerveResponseWFTaskList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseWFTaskList getSearchTask(Long userId, String searchString, Boolean completed, Boolean searchByUserRoles, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields) throws ApiException {
        ApiResponse<VerveResponseWFTaskList> resp = getSearchTaskWithHttpInfo(userId, searchString, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields);
        return resp.getData();
    }

    /**
     * Get list of BPM task assigned to user
     * Return the list of BPM task
     * @param userId userId (required)
     * @param searchString searchString (required)
     * @param completed 1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; (required)
     * @param searchByUserRoles 1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param type Type (optional)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return ApiResponse&lt;VerveResponseWFTaskList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseWFTaskList> getSearchTaskWithHttpInfo(Long userId, String searchString, Boolean completed, Boolean searchByUserRoles, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getSearchTaskValidateBeforeCall(userId, searchString, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseWFTaskList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of BPM task assigned to user (asynchronously)
     * Return the list of BPM task
     * @param userId userId (required)
     * @param searchString searchString (required)
     * @param completed 1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; (required)
     * @param searchByUserRoles 1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param type Type (optional)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSearchTaskAsync(Long userId, String searchString, Boolean completed, Boolean searchByUserRoles, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields, final ApiCallback<VerveResponseWFTaskList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSearchTaskValidateBeforeCall(userId, searchString, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseWFTaskList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTasksByEntity */
    private com.squareup.okhttp.Call getTasksByEntityCall(Long userId, Long entityId, Boolean completed, Boolean searchByUserRoles, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bpm/{userId}/tasks/{entityId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (completed != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "completed", completed));
        if (searchByUserRoles != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchByUserRoles", searchByUserRoles));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTasksByEntityValidateBeforeCall(Long userId, Long entityId, Boolean completed, Boolean searchByUserRoles, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getTasksByEntity(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling getTasksByEntity(Async)");
        }
        
        // verify the required parameter 'completed' is set
        if (completed == null) {
            throw new ApiException("Missing the required parameter 'completed' when calling getTasksByEntity(Async)");
        }
        
        // verify the required parameter 'searchByUserRoles' is set
        if (searchByUserRoles == null) {
            throw new ApiException("Missing the required parameter 'searchByUserRoles' when calling getTasksByEntity(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getTasksByEntity(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getTasksByEntity(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getTasksByEntity(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getTasksByEntity(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getTasksByEntity(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTasksByEntityCall(userId, entityId, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of BPM task assigned to user
     * Return the list of BPM task
     * @param userId userId whose task want to see (required)
     * @param entityId entityId (required)
     * @param completed 1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; (required)
     * @param searchByUserRoles 1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return VerveResponseWFTaskList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseWFTaskList getTasksByEntity(Long userId, Long entityId, Boolean completed, Boolean searchByUserRoles, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        ApiResponse<VerveResponseWFTaskList> resp = getTasksByEntityWithHttpInfo(userId, entityId, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, fields);
        return resp.getData();
    }

    /**
     * Get list of BPM task assigned to user
     * Return the list of BPM task
     * @param userId userId whose task want to see (required)
     * @param entityId entityId (required)
     * @param completed 1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; (required)
     * @param searchByUserRoles 1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return ApiResponse&lt;VerveResponseWFTaskList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseWFTaskList> getTasksByEntityWithHttpInfo(Long userId, Long entityId, Boolean completed, Boolean searchByUserRoles, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getTasksByEntityValidateBeforeCall(userId, entityId, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseWFTaskList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of BPM task assigned to user (asynchronously)
     * Return the list of BPM task
     * @param userId userId whose task want to see (required)
     * @param entityId entityId (required)
     * @param completed 1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; (required)
     * @param searchByUserRoles 1) true - Assigned to roles &lt;br/&gt; 2) false - Assigned to user (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTasksByEntityAsync(Long userId, Long entityId, Boolean completed, Boolean searchByUserRoles, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String fields, final ApiCallback<VerveResponseWFTaskList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTasksByEntityValidateBeforeCall(userId, entityId, completed, searchByUserRoles, start, end, loggedInUserId, accessToken, clientToken, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseWFTaskList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserBPMTasks */
    private com.squareup.okhttp.Call getUserBPMTasksCall(Long userId, Boolean completed, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bpm/{userId}/tasks".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (completed != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "completed", completed));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (organizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organizationId", organizationId));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserBPMTasksValidateBeforeCall(Long userId, Boolean completed, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserBPMTasks(Async)");
        }
        
        // verify the required parameter 'completed' is set
        if (completed == null) {
            throw new ApiException("Missing the required parameter 'completed' when calling getUserBPMTasks(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getUserBPMTasks(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getUserBPMTasks(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getUserBPMTasks(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getUserBPMTasks(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserBPMTasks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserBPMTasksCall(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of BPM task assigned to user
     * Return the list of BPM task
     * @param userId userId whose task want to see (required)
     * @param completed 1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param type Type (optional)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return VerveResponseWFTaskList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseWFTaskList getUserBPMTasks(Long userId, Boolean completed, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields) throws ApiException {
        ApiResponse<VerveResponseWFTaskList> resp = getUserBPMTasksWithHttpInfo(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields);
        return resp.getData();
    }

    /**
     * Get list of BPM task assigned to user
     * Return the list of BPM task
     * @param userId userId whose task want to see (required)
     * @param completed 1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param type Type (optional)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return ApiResponse&lt;VerveResponseWFTaskList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseWFTaskList> getUserBPMTasksWithHttpInfo(Long userId, Boolean completed, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getUserBPMTasksValidateBeforeCall(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseWFTaskList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of BPM task assigned to user (asynchronously)
     * Return the list of BPM task
     * @param userId userId whose task want to see (required)
     * @param completed 1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param type Type (optional)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserBPMTasksAsync(Long userId, Boolean completed, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields, final ApiCallback<VerveResponseWFTaskList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserBPMTasksValidateBeforeCall(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseWFTaskList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserRolesBPMTasks */
    private com.squareup.okhttp.Call getUserRolesBPMTasksCall(Long userId, Boolean completed, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bpm/{userId}/roles/tasks".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (completed != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "completed", completed));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (organizationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "organizationId", organizationId));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserRolesBPMTasksValidateBeforeCall(Long userId, Boolean completed, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserRolesBPMTasks(Async)");
        }
        
        // verify the required parameter 'completed' is set
        if (completed == null) {
            throw new ApiException("Missing the required parameter 'completed' when calling getUserRolesBPMTasks(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getUserRolesBPMTasks(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getUserRolesBPMTasks(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getUserRolesBPMTasks(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getUserRolesBPMTasks(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserRolesBPMTasks(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserRolesBPMTasksCall(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of BPM task assigned to user roles
     * Return the list of BPM task
     * @param userId userId whose task want to see (required)
     * @param completed 1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param type Type (optional)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return VerveResponseWFTaskList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseWFTaskList getUserRolesBPMTasks(Long userId, Boolean completed, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields) throws ApiException {
        ApiResponse<VerveResponseWFTaskList> resp = getUserRolesBPMTasksWithHttpInfo(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields);
        return resp.getData();
    }

    /**
     * Get list of BPM task assigned to user roles
     * Return the list of BPM task
     * @param userId userId whose task want to see (required)
     * @param completed 1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param type Type (optional)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @return ApiResponse&lt;VerveResponseWFTaskList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseWFTaskList> getUserRolesBPMTasksWithHttpInfo(Long userId, Boolean completed, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = getUserRolesBPMTasksValidateBeforeCall(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseWFTaskList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of BPM task assigned to user roles (asynchronously)
     * Return the list of BPM task
     * @param userId userId whose task want to see (required)
     * @param completed 1) true - Completed &lt;br/&gt; 2) false - Pending &lt;br/&gt; 3) Blank - All (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param type Type (optional)
     * @param organizationId organizationId (optional)
     * @param fields Filter fields in result list&lt;br/&gt; &lt;b&gt;A) Default values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)type&lt;br/&gt;&lt;b&gt;A) Available values -&lt;/b&gt; &lt;br/&gt;1)taskId&lt;br/&gt;2)name&lt;br/&gt;3)dueDate&lt;br/&gt;4)description&lt;br/&gt;5)transitionList&lt;br/&gt;6)type&lt;br/&gt;7)entityId&lt;br/&gt;8)attributes (optional, default to taskId,name,type)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserRolesBPMTasksAsync(Long userId, Boolean completed, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, String type, Long organizationId, String fields, final ApiCallback<VerveResponseWFTaskList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserRolesBPMTasksValidateBeforeCall(userId, completed, start, end, loggedInUserId, accessToken, clientToken, type, organizationId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseWFTaskList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
