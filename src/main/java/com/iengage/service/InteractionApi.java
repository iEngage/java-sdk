/**
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.iengage.service;

import com.iengage.ApiCallback;
import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.ApiResponse;
import com.iengage.Configuration;
import com.iengage.Pair;
import com.iengage.ProgressRequestBody;
import com.iengage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.iengage.client.model.VerveResponseInteraction;
import com.iengage.client.model.InteractionInputModel;
import java.io.File;
import com.iengage.client.model.InteractionResponse;
import com.iengage.client.model.VerveResponseInteractionResponse;
import com.iengage.client.model.Attachment;
import com.iengage.client.model.InteractionCategory;
import com.iengage.client.model.VerveResponseInteractionCategory;
import com.iengage.client.model.VerveResponseInteractionList;
import com.iengage.client.model.VerveResponseInteractionCategoryList;
import com.iengage.client.model.VerveResponseUserList;
import com.iengage.client.model.VerveResponseInteractionResponseList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InteractionApi {
    private ApiClient apiClient;

    public InteractionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InteractionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addInteraction */
    private com.squareup.okhttp.Call addInteractionCall(String requesterId, String clientToken, InteractionInputModel body, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling addInteraction(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addInteraction(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Share interaction without attachment
     * This service allows a user to post an interaction. The following fields(key:value) are required to be present in the Interaction JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.      **Required fields**      1. interactionTitle     
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteraction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteraction addInteraction(String requesterId, String clientToken, InteractionInputModel body, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteraction> resp = addInteractionWithHttpInfo(requesterId, clientToken, body, accessToken);
        return resp.getData();
    }

    /**
     * Share interaction without attachment
     * This service allows a user to post an interaction. The following fields(key:value) are required to be present in the Interaction JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.      **Required fields**      1. interactionTitle     
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteraction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteraction> addInteractionWithHttpInfo(String requesterId, String clientToken, InteractionInputModel body, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = addInteractionCall(requesterId, clientToken, body, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Share interaction without attachment (asynchronously)
     * This service allows a user to post an interaction. The following fields(key:value) are required to be present in the Interaction JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.      **Required fields**      1. interactionTitle     
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInteractionAsync(String requesterId, String clientToken, InteractionInputModel body, String accessToken, final ApiCallback<VerveResponseInteraction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInteractionCall(requesterId, clientToken, body, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addInteraction_0 */
    private com.squareup.okhttp.Call addInteraction_0Call(String interactionTitle, File file, String requesterId, String clientToken, String categoryId, String interactionType, String interactionDescription, String association, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionTitle' is set
        if (interactionTitle == null) {
            throw new ApiException("Missing the required parameter 'interactionTitle' when calling addInteraction_0(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling addInteraction_0(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling addInteraction_0(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addInteraction_0(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/attachment".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (categoryId != null)
        localVarFormParams.put("categoryId", categoryId);
        if (interactionType != null)
        localVarFormParams.put("interactionType", interactionType);
        if (interactionTitle != null)
        localVarFormParams.put("interactionTitle", interactionTitle);
        if (interactionDescription != null)
        localVarFormParams.put("interactionDescription", interactionDescription);
        if (association != null)
        localVarFormParams.put("association", association);
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Share interaction with attachment
     * Allows the user to share interaction with attachment. Returns the interaction object
     * @param interactionTitle interactionTitle (required)
     * @param file file (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param interactionType interactionType (optional)
     * @param interactionDescription interactionDescription (optional)
     * @param association association (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteraction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteraction addInteraction_0(String interactionTitle, File file, String requesterId, String clientToken, String categoryId, String interactionType, String interactionDescription, String association, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteraction> resp = addInteraction_0WithHttpInfo(interactionTitle, file, requesterId, clientToken, categoryId, interactionType, interactionDescription, association, accessToken);
        return resp.getData();
    }

    /**
     * Share interaction with attachment
     * Allows the user to share interaction with attachment. Returns the interaction object
     * @param interactionTitle interactionTitle (required)
     * @param file file (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param interactionType interactionType (optional)
     * @param interactionDescription interactionDescription (optional)
     * @param association association (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteraction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteraction> addInteraction_0WithHttpInfo(String interactionTitle, File file, String requesterId, String clientToken, String categoryId, String interactionType, String interactionDescription, String association, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = addInteraction_0Call(interactionTitle, file, requesterId, clientToken, categoryId, interactionType, interactionDescription, association, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Share interaction with attachment (asynchronously)
     * Allows the user to share interaction with attachment. Returns the interaction object
     * @param interactionTitle interactionTitle (required)
     * @param file file (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param interactionType interactionType (optional)
     * @param interactionDescription interactionDescription (optional)
     * @param association association (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addInteraction_0Async(String interactionTitle, File file, String requesterId, String clientToken, String categoryId, String interactionType, String interactionDescription, String association, String accessToken, final ApiCallback<VerveResponseInteraction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addInteraction_0Call(interactionTitle, file, requesterId, clientToken, categoryId, interactionType, interactionDescription, association, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addResponse */
    private com.squareup.okhttp.Call addResponseCall(Long interactionId, String requesterId, String clientToken, InteractionResponse body, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling addResponse(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling addResponse(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addResponse(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}/responses".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Response the specified interaction
     * This service allows a user to post a response on an interaction. The following fields(key:value) are required to be present in the Response JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.      **Required fields**     1. interactionId (Path Parameter)     2. responseDescription     
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionResponse addResponse(Long interactionId, String requesterId, String clientToken, InteractionResponse body, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionResponse> resp = addResponseWithHttpInfo(interactionId, requesterId, clientToken, body, accessToken);
        return resp.getData();
    }

    /**
     * Response the specified interaction
     * This service allows a user to post a response on an interaction. The following fields(key:value) are required to be present in the Response JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.      **Required fields**     1. interactionId (Path Parameter)     2. responseDescription     
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionResponse> addResponseWithHttpInfo(Long interactionId, String requesterId, String clientToken, InteractionResponse body, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = addResponseCall(interactionId, requesterId, clientToken, body, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Response the specified interaction (asynchronously)
     * This service allows a user to post a response on an interaction. The following fields(key:value) are required to be present in the Response JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.      **Required fields**     1. interactionId (Path Parameter)     2. responseDescription     
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addResponseAsync(Long interactionId, String requesterId, String clientToken, InteractionResponse body, String accessToken, final ApiCallback<VerveResponseInteractionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addResponseCall(interactionId, requesterId, clientToken, body, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addResponse_0 */
    private com.squareup.okhttp.Call addResponse_0Call(Long body, String body2, String loggedInUserId, String accessToken, String clientToken, String body3, List<Attachment> body4, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body4;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addResponse_0(Async)");
        }
        
        // verify the required parameter 'body2' is set
        if (body2 == null) {
            throw new ApiException("Missing the required parameter 'body2' when calling addResponse_0(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling addResponse_0(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling addResponse_0(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addResponse_0(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}/responses/attachment".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Response the specified interaction
     * Allows the user to response the interaction
     * @param body interactionId (required)
     * @param body2 response (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body3 Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional)
     * @param body4  (optional)
     * @return VerveResponseInteractionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionResponse addResponse_0(Long body, String body2, String loggedInUserId, String accessToken, String clientToken, String body3, List<Attachment> body4) throws ApiException {
        ApiResponse<VerveResponseInteractionResponse> resp = addResponse_0WithHttpInfo(body, body2, loggedInUserId, accessToken, clientToken, body3, body4);
        return resp.getData();
    }

    /**
     * Response the specified interaction
     * Allows the user to response the interaction
     * @param body interactionId (required)
     * @param body2 response (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body3 Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional)
     * @param body4  (optional)
     * @return ApiResponse&lt;VerveResponseInteractionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionResponse> addResponse_0WithHttpInfo(Long body, String body2, String loggedInUserId, String accessToken, String clientToken, String body3, List<Attachment> body4) throws ApiException {
        com.squareup.okhttp.Call call = addResponse_0Call(body, body2, loggedInUserId, accessToken, clientToken, body3, body4, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Response the specified interaction (asynchronously)
     * Allows the user to response the interaction
     * @param body interactionId (required)
     * @param body2 response (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body3 Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional)
     * @param body4  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addResponse_0Async(Long body, String body2, String loggedInUserId, String accessToken, String clientToken, String body3, List<Attachment> body4, final ApiCallback<VerveResponseInteractionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addResponse_0Call(body, body2, loggedInUserId, accessToken, clientToken, body3, body4, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for changeInteractionCategory */
    private com.squareup.okhttp.Call changeInteractionCategoryCall(Long interactionId, Long categoryId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling changeInteractionCategory(Async)");
        }
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling changeInteractionCategory(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling changeInteractionCategory(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling changeInteractionCategory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}/{categoryId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()))
        .replaceAll("\\{" + "categoryId" + "\\}", apiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Change interaction category
     * Allows the user to change the interaction category.
     * @param interactionId interactionId (required)
     * @param categoryId New interaction categoryId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteraction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteraction changeInteractionCategory(Long interactionId, Long categoryId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteraction> resp = changeInteractionCategoryWithHttpInfo(interactionId, categoryId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Change interaction category
     * Allows the user to change the interaction category.
     * @param interactionId interactionId (required)
     * @param categoryId New interaction categoryId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteraction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteraction> changeInteractionCategoryWithHttpInfo(Long interactionId, Long categoryId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = changeInteractionCategoryCall(interactionId, categoryId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change interaction category (asynchronously)
     * Allows the user to change the interaction category.
     * @param interactionId interactionId (required)
     * @param categoryId New interaction categoryId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeInteractionCategoryAsync(Long interactionId, Long categoryId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteraction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeInteractionCategoryCall(interactionId, categoryId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for changeInteractionType */
    private com.squareup.okhttp.Call changeInteractionTypeCall(Long interactionId, String interactionType, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling changeInteractionType(Async)");
        }
        
        // verify the required parameter 'interactionType' is set
        if (interactionType == null) {
            throw new ApiException("Missing the required parameter 'interactionType' when calling changeInteractionType(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling changeInteractionType(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling changeInteractionType(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}/type".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (interactionType != null)
        localVarFormParams.put("interactionType", interactionType);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Change interaction type
     * Allows the user to change the interaction type. Boolean value
     * @param interactionId interactionId (required)
     * @param interactionType New interaction type (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteraction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteraction changeInteractionType(Long interactionId, String interactionType, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteraction> resp = changeInteractionTypeWithHttpInfo(interactionId, interactionType, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Change interaction type
     * Allows the user to change the interaction type. Boolean value
     * @param interactionId interactionId (required)
     * @param interactionType New interaction type (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteraction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteraction> changeInteractionTypeWithHttpInfo(Long interactionId, String interactionType, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = changeInteractionTypeCall(interactionId, interactionType, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change interaction type (asynchronously)
     * Allows the user to change the interaction type. Boolean value
     * @param interactionId interactionId (required)
     * @param interactionType New interaction type (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changeInteractionTypeAsync(Long interactionId, String interactionType, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteraction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changeInteractionTypeCall(interactionId, interactionType, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createInteractionCategory */
    private com.squareup.okhttp.Call createInteractionCategoryCall(String requesterId, String clientToken, InteractionCategory body, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling createInteractionCategory(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling createInteractionCategory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/categories".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded", "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create interaction category
     * This service allows a user to create a category. The following fields(key:value) are required to be present in the Category JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.      **Required fields**      1. associationId      2. categoryName      3. interactionType     
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionCategory createInteractionCategory(String requesterId, String clientToken, InteractionCategory body, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionCategory> resp = createInteractionCategoryWithHttpInfo(requesterId, clientToken, body, accessToken);
        return resp.getData();
    }

    /**
     * Create interaction category
     * This service allows a user to create a category. The following fields(key:value) are required to be present in the Category JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.      **Required fields**      1. associationId      2. categoryName      3. interactionType     
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionCategory> createInteractionCategoryWithHttpInfo(String requesterId, String clientToken, InteractionCategory body, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = createInteractionCategoryCall(requesterId, clientToken, body, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create interaction category (asynchronously)
     * This service allows a user to create a category. The following fields(key:value) are required to be present in the Category JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API.      **Required fields**      1. associationId      2. categoryName      3. interactionType     
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createInteractionCategoryAsync(String requesterId, String clientToken, InteractionCategory body, String accessToken, final ApiCallback<VerveResponseInteractionCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createInteractionCategoryCall(requesterId, clientToken, body, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteInteraction */
    private com.squareup.okhttp.Call deleteInteractionCall(Long interactionId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling deleteInteraction(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling deleteInteraction(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteInteraction(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete interaction
     * Allows the user to delete a interaction. Returns the deleted response
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteraction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteraction deleteInteraction(Long interactionId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteraction> resp = deleteInteractionWithHttpInfo(interactionId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Delete interaction
     * Allows the user to delete a interaction. Returns the deleted response
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteraction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteraction> deleteInteractionWithHttpInfo(Long interactionId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteInteractionCall(interactionId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete interaction (asynchronously)
     * Allows the user to delete a interaction. Returns the deleted response
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInteractionAsync(Long interactionId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteraction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInteractionCall(interactionId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteInteractionCategory */
    private com.squareup.okhttp.Call deleteInteractionCategoryCall(Long categoryId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling deleteInteractionCategory(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling deleteInteractionCategory(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteInteractionCategory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/categories/{categoryId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "categoryId" + "\\}", apiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete interaction category
     * Allows the user to delete the interaction category. Returns the deleted interaction category
     * @param categoryId categoryId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionCategory deleteInteractionCategory(Long categoryId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionCategory> resp = deleteInteractionCategoryWithHttpInfo(categoryId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Delete interaction category
     * Allows the user to delete the interaction category. Returns the deleted interaction category
     * @param categoryId categoryId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionCategory> deleteInteractionCategoryWithHttpInfo(Long categoryId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteInteractionCategoryCall(categoryId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete interaction category (asynchronously)
     * Allows the user to delete the interaction category. Returns the deleted interaction category
     * @param categoryId categoryId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInteractionCategoryAsync(Long categoryId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteractionCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInteractionCategoryCall(categoryId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteResponse */
    private com.squareup.okhttp.Call deleteResponseCall(Long responseId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'responseId' is set
        if (responseId == null) {
            throw new ApiException("Missing the required parameter 'responseId' when calling deleteResponse(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling deleteResponse(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteResponse(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/responses/{responseId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "responseId" + "\\}", apiClient.escapeString(responseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete response
     * Allows the user to delete an response. Returns the deleted response
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionResponse deleteResponse(Long responseId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionResponse> resp = deleteResponseWithHttpInfo(responseId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Delete response
     * Allows the user to delete an response. Returns the deleted response
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionResponse> deleteResponseWithHttpInfo(Long responseId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteResponseCall(responseId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete response (asynchronously)
     * Allows the user to delete an response. Returns the deleted response
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteResponseAsync(Long responseId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteractionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteResponseCall(responseId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for dislikeResponse */
    private com.squareup.okhttp.Call dislikeResponseCall(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling dislikeResponse(Async)");
        }
        
        // verify the required parameter 'responseId' is set
        if (responseId == null) {
            throw new ApiException("Missing the required parameter 'responseId' when calling dislikeResponse(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling dislikeResponse(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling dislikeResponse(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}/responses/{responseId}/dislike".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()))
        .replaceAll("\\{" + "responseId" + "\\}", apiClient.escapeString(responseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Dislike response
     * Allows the user to dislike the response.
     * @param interactionId interactionId (required)
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionResponse dislikeResponse(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionResponse> resp = dislikeResponseWithHttpInfo(interactionId, responseId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Dislike response
     * Allows the user to dislike the response.
     * @param interactionId interactionId (required)
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionResponse> dislikeResponseWithHttpInfo(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = dislikeResponseCall(interactionId, responseId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dislike response (asynchronously)
     * Allows the user to dislike the response.
     * @param interactionId interactionId (required)
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dislikeResponseAsync(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteractionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dislikeResponseCall(interactionId, responseId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFriendsInteractions */
    private com.squareup.okhttp.Call getFriendsInteractionsCall(String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, String interactionType, Long categoryId, String association, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionStatus' is set
        if (interactionStatus == null) {
            throw new ApiException("Missing the required parameter 'interactionStatus' when calling getFriendsInteractions(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getFriendsInteractions(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getFriendsInteractions(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getFriendsInteractions(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getFriendsInteractions(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/friends".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (interactionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionStatus", interactionStatus));
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (categoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryId", categoryId));
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of interactions shared by friends
     * Returns the list of interactions shared by friends
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type (optional)
     * @param categoryId categoryId (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionList getFriendsInteractions(String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, String interactionType, Long categoryId, String association, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionList> resp = getFriendsInteractionsWithHttpInfo(interactionStatus, start, end, requesterId, clientToken, interactionType, categoryId, association, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of interactions shared by friends
     * Returns the list of interactions shared by friends
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type (optional)
     * @param categoryId categoryId (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionList> getFriendsInteractionsWithHttpInfo(String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, String interactionType, Long categoryId, String association, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getFriendsInteractionsCall(interactionStatus, start, end, requesterId, clientToken, interactionType, categoryId, association, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of interactions shared by friends (asynchronously)
     * Returns the list of interactions shared by friends
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type (optional)
     * @param categoryId categoryId (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFriendsInteractionsAsync(String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, String interactionType, Long categoryId, String association, String fields, String accessToken, final ApiCallback<VerveResponseInteractionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFriendsInteractionsCall(interactionStatus, start, end, requesterId, clientToken, interactionType, categoryId, association, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getInteraction */
    private com.squareup.okhttp.Call getInteractionCall(Long interactionId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling getInteraction(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getInteraction(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getInteraction(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get interaction by id
     * Returns the interaction by id
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteraction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteraction getInteraction(Long interactionId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteraction> resp = getInteractionWithHttpInfo(interactionId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get interaction by id
     * Returns the interaction by id
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteraction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteraction> getInteractionWithHttpInfo(Long interactionId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getInteractionCall(interactionId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get interaction by id (asynchronously)
     * Returns the interaction by id
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInteractionAsync(Long interactionId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteraction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInteractionCall(interactionId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getInteractionCategories */
    private com.squareup.okhttp.Call getInteractionCategoriesCall(Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getInteractionCategories(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getInteractionCategories(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getInteractionCategories(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getInteractionCategories(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/categories".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the list of interaction categories
     * Returns the list of interaction categories
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionCategoryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionCategoryList getInteractionCategories(Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionCategoryList> resp = getInteractionCategoriesWithHttpInfo(start, end, requesterId, clientToken, interactionType, association, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get the list of interaction categories
     * Returns the list of interaction categories
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionCategoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionCategoryList> getInteractionCategoriesWithHttpInfo(Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getInteractionCategoriesCall(start, end, requesterId, clientToken, interactionType, association, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategoryList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of interaction categories (asynchronously)
     * Returns the list of interaction categories
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInteractionCategoriesAsync(Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken, final ApiCallback<VerveResponseInteractionCategoryList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInteractionCategoriesCall(start, end, requesterId, clientToken, interactionType, association, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategoryList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getInteractionsForUser */
    private com.squareup.okhttp.Call getInteractionsForUserCall(String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, Long categoryId, String interactionType, String association, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionStatus' is set
        if (interactionStatus == null) {
            throw new ApiException("Missing the required parameter 'interactionStatus' when calling getInteractionsForUser(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getInteractionsForUser(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getInteractionsForUser(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getInteractionsForUser(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getInteractionsForUser(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (interactionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionStatus", interactionStatus));
        if (categoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryId", categoryId));
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of all interactions visible to the user
     * Returns the list of all interactions visible to the user
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionList getInteractionsForUser(String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, Long categoryId, String interactionType, String association, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionList> resp = getInteractionsForUserWithHttpInfo(interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of all interactions visible to the user
     * Returns the list of all interactions visible to the user
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionList> getInteractionsForUserWithHttpInfo(String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, Long categoryId, String interactionType, String association, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getInteractionsForUserCall(interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of all interactions visible to the user (asynchronously)
     * Returns the list of all interactions visible to the user
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInteractionsForUserAsync(String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, Long categoryId, String interactionType, String association, String fields, String accessToken, final ApiCallback<VerveResponseInteractionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInteractionsForUserCall(interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRecommendInteractions */
    private com.squareup.okhttp.Call getRecommendInteractionsCall(Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getRecommendInteractions(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getRecommendInteractions(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getRecommendInteractions(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getRecommendInteractions(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/recommend".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of recommended interactions
     * Returns the list of recommended interactions
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType interactionType (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionList getRecommendInteractions(Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionList> resp = getRecommendInteractionsWithHttpInfo(start, end, requesterId, clientToken, interactionType, association, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of recommended interactions
     * Returns the list of recommended interactions
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType interactionType (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionList> getRecommendInteractionsWithHttpInfo(Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getRecommendInteractionsCall(start, end, requesterId, clientToken, interactionType, association, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of recommended interactions (asynchronously)
     * Returns the list of recommended interactions
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType interactionType (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecommendInteractionsAsync(Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken, final ApiCallback<VerveResponseInteractionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecommendInteractionsCall(start, end, requesterId, clientToken, interactionType, association, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRecommendedInteractinsFromDB */
    private com.squareup.okhttp.Call getRecommendedInteractinsFromDBCall(Long userId, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getRecommendedInteractinsFromDB(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getRecommendedInteractinsFromDB(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getRecommendedInteractinsFromDB(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getRecommendedInteractinsFromDB(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getRecommendedInteractinsFromDB(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{userId}/recommendedInteractions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of recommended interactions from DB
     * Returns the list of recommended interactions from DB
     * @param userId User Id whose recommended interactions want to get (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionList getRecommendedInteractinsFromDB(Long userId, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionList> resp = getRecommendedInteractinsFromDBWithHttpInfo(userId, start, end, requesterId, clientToken, interactionType, association, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of recommended interactions from DB
     * Returns the list of recommended interactions from DB
     * @param userId User Id whose recommended interactions want to get (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionList> getRecommendedInteractinsFromDBWithHttpInfo(Long userId, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getRecommendedInteractinsFromDBCall(userId, start, end, requesterId, clientToken, interactionType, association, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of recommended interactions from DB (asynchronously)
     * Returns the list of recommended interactions from DB
     * @param userId User Id whose recommended interactions want to get (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecommendedInteractinsFromDBAsync(Long userId, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken, final ApiCallback<VerveResponseInteractionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecommendedInteractinsFromDBCall(userId, start, end, requesterId, clientToken, interactionType, association, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRecommendedUsersFromDB */
    private com.squareup.okhttp.Call getRecommendedUsersFromDBCall(Long interactionId, Integer start, Integer end, String requesterId, String clientToken, String association, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling getRecommendedUsersFromDB(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getRecommendedUsersFromDB(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getRecommendedUsersFromDB(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getRecommendedUsersFromDB(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getRecommendedUsersFromDB(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}/recommendedUsers".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of recommended Users from DB
     * Returns the list of recommended users from DB
     * @param interactionId interactionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param association association (optional)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)userId       2)firstName       3)lastName       4)profileImage        **A) Available values-**       1)userId       2)firstName       3)lastName       4)emailId       5)profileImage       6)birthDate        *_/ (optional, default to userId,firstName,lastName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseUserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseUserList getRecommendedUsersFromDB(Long interactionId, Integer start, Integer end, String requesterId, String clientToken, String association, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseUserList> resp = getRecommendedUsersFromDBWithHttpInfo(interactionId, start, end, requesterId, clientToken, association, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of recommended Users from DB
     * Returns the list of recommended users from DB
     * @param interactionId interactionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param association association (optional)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)userId       2)firstName       3)lastName       4)profileImage        **A) Available values-**       1)userId       2)firstName       3)lastName       4)emailId       5)profileImage       6)birthDate        *_/ (optional, default to userId,firstName,lastName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseUserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseUserList> getRecommendedUsersFromDBWithHttpInfo(Long interactionId, Integer start, Integer end, String requesterId, String clientToken, String association, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getRecommendedUsersFromDBCall(interactionId, start, end, requesterId, clientToken, association, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseUserList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of recommended Users from DB (asynchronously)
     * Returns the list of recommended users from DB
     * @param interactionId interactionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param association association (optional)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)userId       2)firstName       3)lastName       4)profileImage        **A) Available values-**       1)userId       2)firstName       3)lastName       4)emailId       5)profileImage       6)birthDate        *_/ (optional, default to userId,firstName,lastName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecommendedUsersFromDBAsync(Long interactionId, Integer start, Integer end, String requesterId, String clientToken, String association, String fields, String accessToken, final ApiCallback<VerveResponseUserList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecommendedUsersFromDBCall(interactionId, start, end, requesterId, clientToken, association, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseUserList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getResponses */
    private com.squareup.okhttp.Call getResponsesCall(Long interactionId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling getResponses(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getResponses(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getResponses(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getResponses(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getResponses(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}/responses".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of responses by interactionId
     * Returns the list of responses by interactionId
     * @param interactionId interactionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionResponseList getResponses(Long interactionId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionResponseList> resp = getResponsesWithHttpInfo(interactionId, start, end, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of responses by interactionId
     * Returns the list of responses by interactionId
     * @param interactionId interactionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionResponseList> getResponsesWithHttpInfo(Long interactionId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getResponsesCall(interactionId, start, end, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponseList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of responses by interactionId (asynchronously)
     * Returns the list of responses by interactionId
     * @param interactionId interactionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResponsesAsync(Long interactionId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteractionResponseList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResponsesCall(interactionId, start, end, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponseList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserInteractions */
    private com.squareup.okhttp.Call getUserInteractionsCall(Long userId, String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, Long categoryId, String interactionType, String association, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserInteractions(Async)");
        }
        
        // verify the required parameter 'interactionStatus' is set
        if (interactionStatus == null) {
            throw new ApiException("Missing the required parameter 'interactionStatus' when calling getUserInteractions(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getUserInteractions(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getUserInteractions(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getUserInteractions(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserInteractions(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{userId}/shared".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (interactionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionStatus", interactionStatus));
        if (categoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryId", categoryId));
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of interactions shared by user
     * Returns the list of interactions shared by specific user
     * @param userId userId whose shared interactions want to get (required)
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionList getUserInteractions(Long userId, String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, Long categoryId, String interactionType, String association, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionList> resp = getUserInteractionsWithHttpInfo(userId, interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of interactions shared by user
     * Returns the list of interactions shared by specific user
     * @param userId userId whose shared interactions want to get (required)
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionList> getUserInteractionsWithHttpInfo(Long userId, String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, Long categoryId, String interactionType, String association, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getUserInteractionsCall(userId, interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of interactions shared by user (asynchronously)
     * Returns the list of interactions shared by specific user
     * @param userId userId whose shared interactions want to get (required)
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserInteractionsAsync(Long userId, String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, Long categoryId, String interactionType, String association, String fields, String accessToken, final ApiCallback<VerveResponseInteractionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserInteractionsCall(userId, interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserSubscribedInteractionCategories */
    private com.squareup.okhttp.Call getUserSubscribedInteractionCategoriesCall(Long userId, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserSubscribedInteractionCategories(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getUserSubscribedInteractionCategories(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getUserSubscribedInteractionCategories(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getUserSubscribedInteractionCategories(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserSubscribedInteractionCategories(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/categories/{userId}/subscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of interaction categories subscribed by the user
     * Returns the list of interaction categories subscribed by the user
     * @param userId User Id whose subcripbed category want to get (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType interactionType (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionCategoryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionCategoryList getUserSubscribedInteractionCategories(Long userId, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionCategoryList> resp = getUserSubscribedInteractionCategoriesWithHttpInfo(userId, start, end, requesterId, clientToken, interactionType, association, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of interaction categories subscribed by the user
     * Returns the list of interaction categories subscribed by the user
     * @param userId User Id whose subcripbed category want to get (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType interactionType (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionCategoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionCategoryList> getUserSubscribedInteractionCategoriesWithHttpInfo(Long userId, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getUserSubscribedInteractionCategoriesCall(userId, start, end, requesterId, clientToken, interactionType, association, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategoryList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of interaction categories subscribed by the user (asynchronously)
     * Returns the list of interaction categories subscribed by the user
     * @param userId User Id whose subcripbed category want to get (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType interactionType (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserSubscribedInteractionCategoriesAsync(Long userId, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken, final ApiCallback<VerveResponseInteractionCategoryList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserSubscribedInteractionCategoriesCall(userId, start, end, requesterId, clientToken, interactionType, association, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategoryList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserSubscribedInteractions */
    private com.squareup.okhttp.Call getUserSubscribedInteractionsCall(Long userId, String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, Long categoryId, String interactionType, String association, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserSubscribedInteractions(Async)");
        }
        
        // verify the required parameter 'interactionStatus' is set
        if (interactionStatus == null) {
            throw new ApiException("Missing the required parameter 'interactionStatus' when calling getUserSubscribedInteractions(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getUserSubscribedInteractions(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getUserSubscribedInteractions(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getUserSubscribedInteractions(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserSubscribedInteractions(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{userId}/subscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (interactionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionStatus", interactionStatus));
        if (categoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "categoryId", categoryId));
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of interactions subscribed by user
     * Returns the list of interactions subscribed by specific user
     * @param userId User Id whose subcribed interactions wants to get (required)
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionList getUserSubscribedInteractions(Long userId, String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, Long categoryId, String interactionType, String association, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionList> resp = getUserSubscribedInteractionsWithHttpInfo(userId, interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of interactions subscribed by user
     * Returns the list of interactions subscribed by specific user
     * @param userId User Id whose subcribed interactions wants to get (required)
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionList> getUserSubscribedInteractionsWithHttpInfo(Long userId, String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, Long categoryId, String interactionType, String association, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getUserSubscribedInteractionsCall(userId, interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of interactions subscribed by user (asynchronously)
     * Returns the list of interactions subscribed by specific user
     * @param userId User Id whose subcribed interactions wants to get (required)
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED   *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryId categoryId (optional)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserSubscribedInteractionsAsync(Long userId, String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, Long categoryId, String interactionType, String association, String fields, String accessToken, final ApiCallback<VerveResponseInteractionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserSubscribedInteractionsCall(userId, interactionStatus, start, end, requesterId, clientToken, categoryId, interactionType, association, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for likeResponse */
    private com.squareup.okhttp.Call likeResponseCall(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling likeResponse(Async)");
        }
        
        // verify the required parameter 'responseId' is set
        if (responseId == null) {
            throw new ApiException("Missing the required parameter 'responseId' when calling likeResponse(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling likeResponse(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling likeResponse(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}/responses/{responseId}/like".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()))
        .replaceAll("\\{" + "responseId" + "\\}", apiClient.escapeString(responseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Like response
     * Allows the user to like the response.
     * @param interactionId interactionId (required)
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionResponse likeResponse(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionResponse> resp = likeResponseWithHttpInfo(interactionId, responseId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Like response
     * Allows the user to like the response.
     * @param interactionId interactionId (required)
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionResponse> likeResponseWithHttpInfo(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = likeResponseCall(interactionId, responseId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Like response (asynchronously)
     * Allows the user to like the response.
     * @param interactionId interactionId (required)
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call likeResponseAsync(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteractionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = likeResponseCall(interactionId, responseId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for markAsAnResponse */
    private com.squareup.okhttp.Call markAsAnResponseCall(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling markAsAnResponse(Async)");
        }
        
        // verify the required parameter 'responseId' is set
        if (responseId == null) {
            throw new ApiException("Missing the required parameter 'responseId' when calling markAsAnResponse(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling markAsAnResponse(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling markAsAnResponse(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}/responses/{responseId}/mark".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()))
        .replaceAll("\\{" + "responseId" + "\\}", apiClient.escapeString(responseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Mark response as a response
     * Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
     * @param interactionId interactionId (required)
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionResponse markAsAnResponse(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionResponse> resp = markAsAnResponseWithHttpInfo(interactionId, responseId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Mark response as a response
     * Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
     * @param interactionId interactionId (required)
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionResponse> markAsAnResponseWithHttpInfo(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = markAsAnResponseCall(interactionId, responseId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mark response as a response (asynchronously)
     * Marks the response as accepted. This means the user is satisfied with the response &amp; then the interaction will go into closed state
     * @param interactionId interactionId (required)
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call markAsAnResponseAsync(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteractionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = markAsAnResponseCall(interactionId, responseId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for searchInteractions */
    private com.squareup.okhttp.Call searchInteractionsCall(String searchText, String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'searchText' is set
        if (searchText == null) {
            throw new ApiException("Missing the required parameter 'searchText' when calling searchInteractions(Async)");
        }
        
        // verify the required parameter 'interactionStatus' is set
        if (interactionStatus == null) {
            throw new ApiException("Missing the required parameter 'interactionStatus' when calling searchInteractions(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling searchInteractions(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling searchInteractions(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling searchInteractions(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling searchInteractions(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/search".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (searchText != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchText", searchText));
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (interactionStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionStatus", interactionStatus));
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of matching interactions
     * Returns the list of matching interactions
     * @param searchText Search Text, keywords to search (required)
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED  *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionList searchInteractions(String searchText, String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionList> resp = searchInteractionsWithHttpInfo(searchText, interactionStatus, start, end, requesterId, clientToken, interactionType, association, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of matching interactions
     * Returns the list of matching interactions
     * @param searchText Search Text, keywords to search (required)
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED  *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionList> searchInteractionsWithHttpInfo(String searchText, String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = searchInteractionsCall(searchText, interactionStatus, start, end, requesterId, clientToken, interactionType, association, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of matching interactions (asynchronously)
     * Returns the list of matching interactions
     * @param searchText Search Text, keywords to search (required)
     * @param interactionStatus   /_*  Interaction status       1) ALL       2)  UNREPLIED       3)  REPLIED       4)  CLOSED  *_/ (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionType Interaction Type (optional)
     * @param association association (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchInteractionsAsync(String searchText, String interactionStatus, Integer start, Integer end, String requesterId, String clientToken, String interactionType, String association, String fields, String accessToken, final ApiCallback<VerveResponseInteractionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchInteractionsCall(searchText, interactionStatus, start, end, requesterId, clientToken, interactionType, association, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for subscribeInteractinCategory */
    private com.squareup.okhttp.Call subscribeInteractinCategoryCall(Long categoryId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling subscribeInteractinCategory(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling subscribeInteractinCategory(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling subscribeInteractinCategory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/categories/{categoryId}/subscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "categoryId" + "\\}", apiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Subscribe interaction category
     * Returns the subscribed interaction category
     * @param categoryId categoryId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionCategory subscribeInteractinCategory(Long categoryId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionCategory> resp = subscribeInteractinCategoryWithHttpInfo(categoryId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Subscribe interaction category
     * Returns the subscribed interaction category
     * @param categoryId categoryId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionCategory> subscribeInteractinCategoryWithHttpInfo(Long categoryId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = subscribeInteractinCategoryCall(categoryId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Subscribe interaction category (asynchronously)
     * Returns the subscribed interaction category
     * @param categoryId categoryId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscribeInteractinCategoryAsync(Long categoryId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteractionCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscribeInteractinCategoryCall(categoryId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for subscribeInteraction */
    private com.squareup.okhttp.Call subscribeInteractionCall(Long interactionId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling subscribeInteraction(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling subscribeInteraction(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling subscribeInteraction(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}/subscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Subscribe interaction
     * Allows the user to subscribe a interaction
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteraction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteraction subscribeInteraction(Long interactionId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteraction> resp = subscribeInteractionWithHttpInfo(interactionId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Subscribe interaction
     * Allows the user to subscribe a interaction
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteraction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteraction> subscribeInteractionWithHttpInfo(Long interactionId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = subscribeInteractionCall(interactionId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Subscribe interaction (asynchronously)
     * Allows the user to subscribe a interaction
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscribeInteractionAsync(Long interactionId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteraction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscribeInteractionCall(interactionId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for unmarkAsAnResponse */
    private com.squareup.okhttp.Call unmarkAsAnResponseCall(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling unmarkAsAnResponse(Async)");
        }
        
        // verify the required parameter 'responseId' is set
        if (responseId == null) {
            throw new ApiException("Missing the required parameter 'responseId' when calling unmarkAsAnResponse(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling unmarkAsAnResponse(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling unmarkAsAnResponse(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}/responses/{responseId}/unmark".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()))
        .replaceAll("\\{" + "responseId" + "\\}", apiClient.escapeString(responseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Unmark response as a response
     * Unmarks the response. This will remove the marked response.
     * @param interactionId interactionId (required)
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionResponse unmarkAsAnResponse(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionResponse> resp = unmarkAsAnResponseWithHttpInfo(interactionId, responseId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Unmark response as a response
     * Unmarks the response. This will remove the marked response.
     * @param interactionId interactionId (required)
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionResponse> unmarkAsAnResponseWithHttpInfo(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = unmarkAsAnResponseCall(interactionId, responseId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unmark response as a response (asynchronously)
     * Unmarks the response. This will remove the marked response.
     * @param interactionId interactionId (required)
     * @param responseId responseId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unmarkAsAnResponseAsync(Long interactionId, Long responseId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteractionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unmarkAsAnResponseCall(interactionId, responseId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for unsubscribeInteractinCategory */
    private com.squareup.okhttp.Call unsubscribeInteractinCategoryCall(Long categoryId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling unsubscribeInteractinCategory(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling unsubscribeInteractinCategory(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling unsubscribeInteractinCategory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/categories/{categoryId}/unsubscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "categoryId" + "\\}", apiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Unsubscribe interaction category
     * Returns the unsubscribed interaction category
     * @param categoryId categoryId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionCategory unsubscribeInteractinCategory(Long categoryId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionCategory> resp = unsubscribeInteractinCategoryWithHttpInfo(categoryId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Unsubscribe interaction category
     * Returns the unsubscribed interaction category
     * @param categoryId categoryId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionCategory> unsubscribeInteractinCategoryWithHttpInfo(Long categoryId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = unsubscribeInteractinCategoryCall(categoryId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unsubscribe interaction category (asynchronously)
     * Returns the unsubscribed interaction category
     * @param categoryId categoryId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsubscribeInteractinCategoryAsync(Long categoryId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteractionCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsubscribeInteractinCategoryCall(categoryId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for unsubscribeInteraction */
    private com.squareup.okhttp.Call unsubscribeInteractionCall(Long interactionId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling unsubscribeInteraction(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling unsubscribeInteraction(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling unsubscribeInteraction(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}/unsubscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Unsubscribe interaction
     * Allows the user to unsubscribe a interaction
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteraction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteraction unsubscribeInteraction(Long interactionId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteraction> resp = unsubscribeInteractionWithHttpInfo(interactionId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Unsubscribe interaction
     * Allows the user to unsubscribe a interaction
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteraction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteraction> unsubscribeInteractionWithHttpInfo(Long interactionId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = unsubscribeInteractionCall(interactionId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unsubscribe interaction (asynchronously)
     * Allows the user to unsubscribe a interaction
     * @param interactionId interactionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsubscribeInteractionAsync(Long interactionId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteraction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsubscribeInteractionCall(interactionId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateInteraction */
    private com.squareup.okhttp.Call updateInteractionCall(Long interactionId, String interactionTitle, String requesterId, String clientToken, String interactionDescription, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'interactionId' is set
        if (interactionId == null) {
            throw new ApiException("Missing the required parameter 'interactionId' when calling updateInteraction(Async)");
        }
        
        // verify the required parameter 'interactionTitle' is set
        if (interactionTitle == null) {
            throw new ApiException("Missing the required parameter 'interactionTitle' when calling updateInteraction(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling updateInteraction(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateInteraction(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/{interactionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "interactionId" + "\\}", apiClient.escapeString(interactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (interactionTitle != null)
        localVarFormParams.put("interactionTitle", interactionTitle);
        if (interactionDescription != null)
        localVarFormParams.put("interactionDescription", interactionDescription);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update interaction
     * Allows the user to update interaction. Returns the updated interaction
     * @param interactionId interactionId (required)
     * @param interactionTitle Interaction Title (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionDescription Describe Interaction (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteraction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteraction updateInteraction(Long interactionId, String interactionTitle, String requesterId, String clientToken, String interactionDescription, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteraction> resp = updateInteractionWithHttpInfo(interactionId, interactionTitle, requesterId, clientToken, interactionDescription, fields, accessToken);
        return resp.getData();
    }

    /**
     * Update interaction
     * Allows the user to update interaction. Returns the updated interaction
     * @param interactionId interactionId (required)
     * @param interactionTitle Interaction Title (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionDescription Describe Interaction (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteraction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteraction> updateInteractionWithHttpInfo(Long interactionId, String interactionTitle, String requesterId, String clientToken, String interactionDescription, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = updateInteractionCall(interactionId, interactionTitle, requesterId, clientToken, interactionDescription, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update interaction (asynchronously)
     * Allows the user to update interaction. Returns the updated interaction
     * @param interactionId interactionId (required)
     * @param interactionTitle Interaction Title (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param interactionDescription Describe Interaction (optional)
     * @param fields Filter fields in result list      /_*   **A) Default values -**        1)interactionId       2)interactionTitle       3)interactionDescription       4)createdDate       5)interactionType        **A) Available values-**        1)interactionId       2)interactionTitle       3)interactionDescription       4)issuer       5)noOfResponses       6)isClosed       7)createdDate       8)lastUpdatedDate       9)videoId       10)fileURL       11)isSubscribed       12)sentiment       13)entity       14)interactionType       15)categoryId       16)categoryName   *_/ (optional, default to interactionId,interactionTitle,interactionDescription,createdDate,interactionType,categoryName)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInteractionAsync(Long interactionId, String interactionTitle, String requesterId, String clientToken, String interactionDescription, String fields, String accessToken, final ApiCallback<VerveResponseInteraction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInteractionCall(interactionId, interactionTitle, requesterId, clientToken, interactionDescription, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteraction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateInteractionCategory */
    private com.squareup.okhttp.Call updateInteractionCategoryCall(Long categoryId, String categoryName, String requesterId, String clientToken, String categoryDescription, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateInteractionCategory(Async)");
        }
        
        // verify the required parameter 'categoryName' is set
        if (categoryName == null) {
            throw new ApiException("Missing the required parameter 'categoryName' when calling updateInteractionCategory(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling updateInteractionCategory(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateInteractionCategory(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/categories/{categoryId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "categoryId" + "\\}", apiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (categoryName != null)
        localVarFormParams.put("categoryName", categoryName);
        if (categoryDescription != null)
        localVarFormParams.put("categoryDescription", categoryDescription);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update interaction category
     * Allows the user to update the interaction category. Returns the updated interaction category
     * @param categoryId categoryId (required)
     * @param categoryName Category Name (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryDescription Describe category (optional)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionCategory updateInteractionCategory(Long categoryId, String categoryName, String requesterId, String clientToken, String categoryDescription, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionCategory> resp = updateInteractionCategoryWithHttpInfo(categoryId, categoryName, requesterId, clientToken, categoryDescription, fields, accessToken);
        return resp.getData();
    }

    /**
     * Update interaction category
     * Allows the user to update the interaction category. Returns the updated interaction category
     * @param categoryId categoryId (required)
     * @param categoryName Category Name (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryDescription Describe category (optional)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionCategory> updateInteractionCategoryWithHttpInfo(Long categoryId, String categoryName, String requesterId, String clientToken, String categoryDescription, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = updateInteractionCategoryCall(categoryId, categoryName, requesterId, clientToken, categoryDescription, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update interaction category (asynchronously)
     * Allows the user to update the interaction category. Returns the updated interaction category
     * @param categoryId categoryId (required)
     * @param categoryName Category Name (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param categoryDescription Describe category (optional)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)categoryId       2)categoryName       3)interactionType        **A) Available values -**         1)categoryId       2)categoryName       3)categoryDescription       4)createdDate       5)isSubscribed       6)interactionType   *_/ (optional, default to categoryId,categoryName,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInteractionCategoryAsync(Long categoryId, String categoryName, String requesterId, String clientToken, String categoryDescription, String fields, String accessToken, final ApiCallback<VerveResponseInteractionCategory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInteractionCategoryCall(categoryId, categoryName, requesterId, clientToken, categoryDescription, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionCategory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateResponse */
    private com.squareup.okhttp.Call updateResponseCall(Long responseId, String response, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'responseId' is set
        if (responseId == null) {
            throw new ApiException("Missing the required parameter 'responseId' when calling updateResponse(Async)");
        }
        
        // verify the required parameter 'response' is set
        if (response == null) {
            throw new ApiException("Missing the required parameter 'response' when calling updateResponse(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling updateResponse(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateResponse(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/interactions/responses/{responseId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "responseId" + "\\}", apiClient.escapeString(responseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (response != null)
        localVarFormParams.put("response", response);
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update response
     * Allows the user to update an response. Returns the updated response
     * @param responseId responseId (required)
     * @param response response (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseInteractionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseInteractionResponse updateResponse(Long responseId, String response, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseInteractionResponse> resp = updateResponseWithHttpInfo(responseId, response, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Update response
     * Allows the user to update an response. Returns the updated response
     * @param responseId responseId (required)
     * @param response response (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseInteractionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseInteractionResponse> updateResponseWithHttpInfo(Long responseId, String response, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = updateResponseCall(responseId, response, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update response (asynchronously)
     * Allows the user to update an response. Returns the updated response
     * @param responseId responseId (required)
     * @param response response (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionType        **A) Available values -**        1)responseId       2)responseDescription       3)createdDate       4)interactionId       5)respondingUser       6)isMarkedResponse       7)noOfLikes       8)noOfDislikes       9)replyCount       10)isLiked       11)isDisliked       12)interactionType   *_/ (optional, default to responseId,responseDescription,createdDate,interactionType)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateResponseAsync(Long responseId, String response, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseInteractionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateResponseCall(responseId, response, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseInteractionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
