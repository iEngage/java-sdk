/*
 * Stakeholder engagement API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiCallback;
import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.ApiResponse;
import com.iengage.Configuration;
import com.iengage.Pair;
import com.iengage.ProgressRequestBody;
import com.iengage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.iengage.client.model.VerveResponseUserPoints;
import com.iengage.client.model.VerveResponseUserPointsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RewardsApi {
    private ApiClient apiClient;

    public RewardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RewardsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getTopFriends */
    private com.squareup.okhttp.Call getTopFriendsCall(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rewards/points/top/friends".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "userId", userId));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTopFriendsValidateBeforeCall(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getTopFriends(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getTopFriends(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getTopFriends(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getTopFriends(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getTopFriends(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getTopFriends(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTopFriendsCall(userId, start, end, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of top friends
     * Returns the list top friends
     * @param userId userId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseUserPointsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseUserPointsList getTopFriends(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        ApiResponse<VerveResponseUserPointsList> resp = getTopFriendsWithHttpInfo(userId, start, end, loggedInUserId, accessToken, clientToken);
        return resp.getData();
    }

    /**
     * Get list of top friends
     * Returns the list top friends
     * @param userId userId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseUserPointsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseUserPointsList> getTopFriendsWithHttpInfo(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = getTopFriendsValidateBeforeCall(userId, start, end, loggedInUserId, accessToken, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseUserPointsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of top friends (asynchronously)
     * Returns the list top friends
     * @param userId userId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopFriendsAsync(Long userId, Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, final ApiCallback<VerveResponseUserPointsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopFriendsValidateBeforeCall(userId, start, end, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseUserPointsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTopUsers */
    private com.squareup.okhttp.Call getTopUsersCall(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rewards/points/top".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTopUsersValidateBeforeCall(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getTopUsers(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getTopUsers(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getTopUsers(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getTopUsers(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getTopUsers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTopUsersCall(start, end, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of top users
     * Returns the list of top users
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseUserPointsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseUserPointsList getTopUsers(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        ApiResponse<VerveResponseUserPointsList> resp = getTopUsersWithHttpInfo(start, end, loggedInUserId, accessToken, clientToken);
        return resp.getData();
    }

    /**
     * Get list of top users
     * Returns the list of top users
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseUserPointsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseUserPointsList> getTopUsersWithHttpInfo(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = getTopUsersValidateBeforeCall(start, end, loggedInUserId, accessToken, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseUserPointsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of top users (asynchronously)
     * Returns the list of top users
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTopUsersAsync(Integer start, Integer end, String loggedInUserId, String accessToken, String clientToken, final ApiCallback<VerveResponseUserPointsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTopUsersValidateBeforeCall(start, end, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseUserPointsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserPoints */
    private com.squareup.okhttp.Call getUserPointsCall(Long userId, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rewards/points/{userId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (loggedInUserId != null)
        localVarHeaderParams.put("loggedInUserId", apiClient.parameterToString(loggedInUserId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserPointsValidateBeforeCall(Long userId, String loggedInUserId, String accessToken, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserPoints(Async)");
        }
        
        // verify the required parameter 'loggedInUserId' is set
        if (loggedInUserId == null) {
            throw new ApiException("Missing the required parameter 'loggedInUserId' when calling getUserPoints(Async)");
        }
        
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling getUserPoints(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserPoints(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserPointsCall(userId, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of user points
     * Returns the list of user points
     * @param userId userId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseUserPoints
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseUserPoints getUserPoints(Long userId, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        ApiResponse<VerveResponseUserPoints> resp = getUserPointsWithHttpInfo(userId, loggedInUserId, accessToken, clientToken);
        return resp.getData();
    }

    /**
     * Get list of user points
     * Returns the list of user points
     * @param userId userId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseUserPoints&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseUserPoints> getUserPointsWithHttpInfo(Long userId, String loggedInUserId, String accessToken, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = getUserPointsValidateBeforeCall(userId, loggedInUserId, accessToken, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseUserPoints>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of user points (asynchronously)
     * Returns the list of user points
     * @param userId userId (required)
     * @param loggedInUserId User id of logged / authenticated user (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserPointsAsync(Long userId, String loggedInUserId, String accessToken, String clientToken, final ApiCallback<VerveResponseUserPoints> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserPointsValidateBeforeCall(userId, loggedInUserId, accessToken, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseUserPoints>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
