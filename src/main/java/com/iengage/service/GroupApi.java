/**
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.iengage.service;

import com.iengage.ApiCallback;
import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.ApiResponse;
import com.iengage.Configuration;
import com.iengage.Pair;
import com.iengage.ProgressRequestBody;
import com.iengage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.iengage.client.model.VerveResponseGroup;
import com.iengage.client.model.Group;
import com.iengage.client.model.VerveResponseUserList;
import com.iengage.client.model.VerveResponseIdeaList;
import com.iengage.client.model.VerveResponseGroupList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupApi {
    private ApiClient apiClient;

    public GroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createGroup */
    private com.squareup.okhttp.Call createGroupCall(String requesterId, String clientToken, Group body, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling createGroup(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling createGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create group
     * This service allows a user to create a group. The following fields(key:value) are required to be present in the Group JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. groupName      3. description      4. managerId [1,2,..]      5. accessType
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseGroup createGroup(String requesterId, String clientToken, Group body, String accessToken) throws ApiException {
        ApiResponse<VerveResponseGroup> resp = createGroupWithHttpInfo(requesterId, clientToken, body, accessToken);
        return resp.getData();
    }

    /**
     * Create group
     * This service allows a user to create a group. The following fields(key:value) are required to be present in the Group JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. groupName      3. description      4. managerId [1,2,..]      5. accessType
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseGroup> createGroupWithHttpInfo(String requesterId, String clientToken, Group body, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = createGroupCall(requesterId, clientToken, body, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create group (asynchronously)
     * This service allows a user to create a group. The following fields(key:value) are required to be present in the Group JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. groupName      3. description      4. managerId [1,2,..]      5. accessType
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGroupAsync(String requesterId, String clientToken, Group body, String accessToken, final ApiCallback<VerveResponseGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGroupCall(requesterId, clientToken, body, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteGroup */
    private com.squareup.okhttp.Call deleteGroupCall(Long groupId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteGroup(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling deleteGroup(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{groupId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete group
     * Allows the user to delete a group. Returns the deleted group
     * @param groupId groupId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseGroup deleteGroup(Long groupId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseGroup> resp = deleteGroupWithHttpInfo(groupId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Delete group
     * Allows the user to delete a group. Returns the deleted group
     * @param groupId groupId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseGroup> deleteGroupWithHttpInfo(Long groupId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteGroupCall(groupId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete group (asynchronously)
     * Allows the user to delete a group. Returns the deleted group
     * @param groupId groupId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGroupAsync(Long groupId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGroupCall(groupId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for followGroup */
    private com.squareup.okhttp.Call followGroupCall(Long groupId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling followGroup(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling followGroup(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling followGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{groupId}/follow".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Follow group
     * Allows the user to follow a group. Returns the followed group
     * @param groupId groupId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseGroup followGroup(Long groupId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseGroup> resp = followGroupWithHttpInfo(groupId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Follow group
     * Allows the user to follow a group. Returns the followed group
     * @param groupId groupId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseGroup> followGroupWithHttpInfo(Long groupId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = followGroupCall(groupId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Follow group (asynchronously)
     * Allows the user to follow a group. Returns the followed group
     * @param groupId groupId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followGroupAsync(Long groupId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followGroupCall(groupId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getGroupFollowers */
    private com.squareup.okhttp.Call getGroupFollowersCall(Long groupId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupFollowers(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getGroupFollowers(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getGroupFollowers(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getGroupFollowers(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getGroupFollowers(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{groupId}/followers".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the list of followers for the group
     * Returns the list of followers for the group
     * @param groupId groupId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)userId       2)firstName       3)lastName       4)profileImage        **A) Available values-**       1)userId       2)firstName       3)lastName       4)emailId       5)profileImage       6)birthDate        *_/ (optional, default to userId,firstName,lastName,profileImage)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseUserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseUserList getGroupFollowers(Long groupId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseUserList> resp = getGroupFollowersWithHttpInfo(groupId, start, end, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get the list of followers for the group
     * Returns the list of followers for the group
     * @param groupId groupId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)userId       2)firstName       3)lastName       4)profileImage        **A) Available values-**       1)userId       2)firstName       3)lastName       4)emailId       5)profileImage       6)birthDate        *_/ (optional, default to userId,firstName,lastName,profileImage)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseUserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseUserList> getGroupFollowersWithHttpInfo(Long groupId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getGroupFollowersCall(groupId, start, end, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseUserList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of followers for the group (asynchronously)
     * Returns the list of followers for the group
     * @param groupId groupId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)userId       2)firstName       3)lastName       4)profileImage        **A) Available values-**       1)userId       2)firstName       3)lastName       4)emailId       5)profileImage       6)birthDate        *_/ (optional, default to userId,firstName,lastName,profileImage)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGroupFollowersAsync(Long groupId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseUserList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGroupFollowersCall(groupId, start, end, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseUserList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getGroupIdeas */
    private com.squareup.okhttp.Call getGroupIdeasCall(Long groupId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupIdeas(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getGroupIdeas(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getGroupIdeas(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getGroupIdeas(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getGroupIdeas(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{groupId}/ideas".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of all ideas in a group
     * Returns the list of all ideas in a group
     * @param groupId groupId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseIdeaList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseIdeaList getGroupIdeas(Long groupId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseIdeaList> resp = getGroupIdeasWithHttpInfo(groupId, start, end, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of all ideas in a group
     * Returns the list of all ideas in a group
     * @param groupId groupId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseIdeaList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseIdeaList> getGroupIdeasWithHttpInfo(Long groupId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getGroupIdeasCall(groupId, start, end, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseIdeaList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of all ideas in a group (asynchronously)
     * Returns the list of all ideas in a group
     * @param groupId groupId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values-**      1)ideaId       2)ideaTitle       3)ideaDescription       4)ideaCreationDate        **A) Available values-**        1)ideaId       2)ideaTitle       3)group       4)ideaDescription       5)ideator       6)ideaCreationDate       7)lastModifiedDate       8)ideaStage       9)domain       10)technology       11)accessType       12)videoId       13)activeStatus       14)teamStatus       15)projectStatus       16)totalFollowers       17)totalComments       18)totalBlogs       19)averageRatingScore       20)numberOfRatings       21)currentUserFollowing       22)currentUserRating       23)ideaFileURL       24)sentiment       25)entity   *_/ (optional, default to ideaId,ideaTitle,ideaDescription,ideaCreationDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGroupIdeasAsync(Long groupId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseIdeaList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGroupIdeasCall(groupId, start, end, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseIdeaList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getGroups */
    private com.squareup.okhttp.Call getGroupsCall(Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getGroups(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getGroups(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getGroups(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getGroups(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get the list of groups visible for user
     * Returns the list of groups
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseGroupList getGroups(Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseGroupList> resp = getGroupsWithHttpInfo(start, end, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get the list of groups visible for user
     * Returns the list of groups
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseGroupList> getGroupsWithHttpInfo(Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getGroupsCall(start, end, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseGroupList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of groups visible for user (asynchronously)
     * Returns the list of groups
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGroupsAsync(Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseGroupList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGroupsCall(start, end, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseGroupList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRecommendationGroup */
    private com.squareup.okhttp.Call getRecommendationGroupCall(Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getRecommendationGroup(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getRecommendationGroup(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getRecommendationGroup(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getRecommendationGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/recommend".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of recommended groups
     * Returns the list of recommended groups
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseGroupList getRecommendationGroup(Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseGroupList> resp = getRecommendationGroupWithHttpInfo(start, end, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of recommended groups
     * Returns the list of recommended groups
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseGroupList> getRecommendationGroupWithHttpInfo(Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getRecommendationGroupCall(start, end, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseGroupList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of recommended groups (asynchronously)
     * Returns the list of recommended groups
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecommendationGroupAsync(Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseGroupList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecommendationGroupCall(start, end, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseGroupList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserFollowingGroups */
    private com.squareup.okhttp.Call getUserFollowingGroupsCall(Long userId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserFollowingGroups(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getUserFollowingGroups(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getUserFollowingGroups(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getUserFollowingGroups(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserFollowingGroups(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{userId}/following".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of groups that a user is following
     * Returns the list of groups the user is following
     * @param userId User Id whose groups want to get. (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseGroupList getUserFollowingGroups(Long userId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseGroupList> resp = getUserFollowingGroupsWithHttpInfo(userId, start, end, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of groups that a user is following
     * Returns the list of groups the user is following
     * @param userId User Id whose groups want to get. (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseGroupList> getUserFollowingGroupsWithHttpInfo(Long userId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getUserFollowingGroupsCall(userId, start, end, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseGroupList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of groups that a user is following (asynchronously)
     * Returns the list of groups the user is following
     * @param userId User Id whose groups want to get. (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserFollowingGroupsAsync(Long userId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseGroupList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserFollowingGroupsCall(userId, start, end, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseGroupList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for searchGroups */
    private com.squareup.okhttp.Call searchGroupsCall(String query, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchGroups(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling searchGroups(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling searchGroups(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling searchGroups(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling searchGroups(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/search".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "query", query));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of matching groups
     * Returns the list of matching group
     * @param query query (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseGroupList searchGroups(String query, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseGroupList> resp = searchGroupsWithHttpInfo(query, start, end, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of matching groups
     * Returns the list of matching group
     * @param query query (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseGroupList> searchGroupsWithHttpInfo(String query, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = searchGroupsCall(query, start, end, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseGroupList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of matching groups (asynchronously)
     * Returns the list of matching group
     * @param query query (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchGroupsAsync(String query, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseGroupList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchGroupsCall(query, start, end, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseGroupList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for unfollowGroup */
    private com.squareup.okhttp.Call unfollowGroupCall(Long groupId, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling unfollowGroup(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling unfollowGroup(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling unfollowGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{groupId}/unfollow".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fields != null)
        localVarFormParams.put("fields", fields);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Unfollow group
     * Allows the user to unfollow a group. Returns the unfollowed group
     * @param groupId groupId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseGroup unfollowGroup(Long groupId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseGroup> resp = unfollowGroupWithHttpInfo(groupId, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Unfollow group
     * Allows the user to unfollow a group. Returns the unfollowed group
     * @param groupId groupId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseGroup> unfollowGroupWithHttpInfo(Long groupId, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = unfollowGroupCall(groupId, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unfollow group (asynchronously)
     * Allows the user to unfollow a group. Returns the unfollowed group
     * @param groupId groupId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unfollowGroupAsync(Long groupId, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unfollowGroupCall(groupId, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateGroup */
    private com.squareup.okhttp.Call updateGroupCall(Long groupId, String title, String description, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateGroup(Async)");
        }
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling updateGroup(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling updateGroup(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling updateGroup(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateGroup(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/groups/{groupId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update group
     * Allows the user to update the group. Returns the updated group
     * @param groupId groupId (required)
     * @param title title (required)
     * @param description description (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseGroup updateGroup(Long groupId, String title, String description, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseGroup> resp = updateGroupWithHttpInfo(groupId, title, description, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Update group
     * Allows the user to update the group. Returns the updated group
     * @param groupId groupId (required)
     * @param title title (required)
     * @param description description (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseGroup> updateGroupWithHttpInfo(Long groupId, String title, String description, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = updateGroupCall(groupId, title, description, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseGroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update group (asynchronously)
     * Allows the user to update the group. Returns the updated group
     * @param groupId groupId (required)
     * @param title title (required)
     * @param description description (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)groupId       2)groupName       3)description       4)startDate        **A) Available values-**        1)groupId       2)groupName       3)description       4)startDate       5)ideasCount       6)followersCount       7)currentUserFollowing       8)dueDate       9)participantsCount       10)friendsParticipantsCount       11)friendsIdeasCount   *_/ (optional, default to groupId,groupName,description,startDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGroupAsync(Long groupId, String title, String description, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseGroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGroupCall(groupId, title, description, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseGroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
