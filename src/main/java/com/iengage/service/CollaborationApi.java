/**
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.iengage.service;

import com.iengage.ApiCallback;
import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.ApiResponse;
import com.iengage.Configuration;
import com.iengage.Pair;
import com.iengage.ProgressRequestBody;
import com.iengage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.iengage.client.model.VerveResponseComment;
import com.iengage.client.model.Comment;
import com.iengage.client.model.VerveResponseBlog;
import com.iengage.client.model.VerveResponseDiscussion;
import com.iengage.client.model.VerveResponseCommentList;
import com.iengage.client.model.VerveResponseBlogList;
import com.iengage.client.model.VerveResponseDiscussionList;
import com.iengage.client.model.Blog;
import com.iengage.client.model.Discussion;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CollaborationApi {
    private ApiClient apiClient;

    public CollaborationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CollaborationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addCommentBlog */
    private com.squareup.okhttp.Call addCommentBlogCall(Long blogId, String requesterId, String clientToken, Comment body, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'blogId' is set
        if (blogId == null) {
            throw new ApiException("Missing the required parameter 'blogId' when calling addCommentBlog(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling addCommentBlog(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addCommentBlog(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/blogs/{blogId}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "blogId" + "\\}", apiClient.escapeString(blogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Comment on posted blog
     * This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. blogId (Path Parameter)     2. commentText
     * @param blogId blogId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseComment addCommentBlog(Long blogId, String requesterId, String clientToken, Comment body, String accessToken) throws ApiException {
        ApiResponse<VerveResponseComment> resp = addCommentBlogWithHttpInfo(blogId, requesterId, clientToken, body, accessToken);
        return resp.getData();
    }

    /**
     * Comment on posted blog
     * This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. blogId (Path Parameter)     2. commentText
     * @param blogId blogId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseComment> addCommentBlogWithHttpInfo(Long blogId, String requesterId, String clientToken, Comment body, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = addCommentBlogCall(blogId, requesterId, clientToken, body, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Comment on posted blog (asynchronously)
     * This service allows a user to comment on a blog. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. blogId (Path Parameter)     2. commentText
     * @param blogId blogId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCommentBlogAsync(Long blogId, String requesterId, String clientToken, Comment body, String accessToken, final ApiCallback<VerveResponseComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCommentBlogCall(blogId, requesterId, clientToken, body, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addCommentDiscussion */
    private com.squareup.okhttp.Call addCommentDiscussionCall(Long discussionId, String requesterId, String clientToken, Comment body, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'discussionId' is set
        if (discussionId == null) {
            throw new ApiException("Missing the required parameter 'discussionId' when calling addCommentDiscussion(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling addCommentDiscussion(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addCommentDiscussion(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/discussions/{discussionId}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "discussionId" + "\\}", apiClient.escapeString(discussionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Comment on discussion
     * This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. discussionId (Path Parameter)     2. commentText
     * @param discussionId discussionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseComment addCommentDiscussion(Long discussionId, String requesterId, String clientToken, Comment body, String accessToken) throws ApiException {
        ApiResponse<VerveResponseComment> resp = addCommentDiscussionWithHttpInfo(discussionId, requesterId, clientToken, body, accessToken);
        return resp.getData();
    }

    /**
     * Comment on discussion
     * This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. discussionId (Path Parameter)     2. commentText
     * @param discussionId discussionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseComment> addCommentDiscussionWithHttpInfo(Long discussionId, String requesterId, String clientToken, Comment body, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = addCommentDiscussionCall(discussionId, requesterId, clientToken, body, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Comment on discussion (asynchronously)
     * This service allows a user to comment on a discussion. The following fields(key:value) are required to be present in the Comment JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. discussionId (Path Parameter)     2. commentText
     * @param discussionId discussionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCommentDiscussionAsync(Long discussionId, String requesterId, String clientToken, Comment body, String accessToken, final ApiCallback<VerveResponseComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCommentDiscussionCall(discussionId, requesterId, clientToken, body, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteBlog */
    private com.squareup.okhttp.Call deleteBlogCall(Long blogId, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'blogId' is set
        if (blogId == null) {
            throw new ApiException("Missing the required parameter 'blogId' when calling deleteBlog(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling deleteBlog(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteBlog(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/blogs/{blogId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "blogId" + "\\}", apiClient.escapeString(blogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete blog
     * Allows the user to delete blog. Returns the deleted blog
     * @param blogId blog Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseBlog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseBlog deleteBlog(Long blogId, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseBlog> resp = deleteBlogWithHttpInfo(blogId, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Delete blog
     * Allows the user to delete blog. Returns the deleted blog
     * @param blogId blog Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseBlog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseBlog> deleteBlogWithHttpInfo(Long blogId, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteBlogCall(blogId, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseBlog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete blog (asynchronously)
     * Allows the user to delete blog. Returns the deleted blog
     * @param blogId blog Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBlogAsync(Long blogId, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseBlog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBlogCall(blogId, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseBlog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteBlogComment */
    private com.squareup.okhttp.Call deleteBlogCommentCall(Long commentId, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteBlogComment(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling deleteBlogComment(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteBlogComment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/blogs/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete blog comment
     * Allows the user to delete blog comment.  Returns the deleted blog comment
     * @param commentId comment Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseComment deleteBlogComment(Long commentId, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseComment> resp = deleteBlogCommentWithHttpInfo(commentId, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Delete blog comment
     * Allows the user to delete blog comment.  Returns the deleted blog comment
     * @param commentId comment Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseComment> deleteBlogCommentWithHttpInfo(Long commentId, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteBlogCommentCall(commentId, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete blog comment (asynchronously)
     * Allows the user to delete blog comment.  Returns the deleted blog comment
     * @param commentId comment Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBlogCommentAsync(Long commentId, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBlogCommentCall(commentId, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteDiscussion */
    private com.squareup.okhttp.Call deleteDiscussionCall(Long discussionId, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'discussionId' is set
        if (discussionId == null) {
            throw new ApiException("Missing the required parameter 'discussionId' when calling deleteDiscussion(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling deleteDiscussion(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteDiscussion(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/discussions/{discussionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "discussionId" + "\\}", apiClient.escapeString(discussionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete discussion
     * Allows the user to delete discussion. Returns the deleted discussion
     * @param discussionId discussion Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseDiscussion deleteDiscussion(Long discussionId, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseDiscussion> resp = deleteDiscussionWithHttpInfo(discussionId, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Delete discussion
     * Allows the user to delete discussion. Returns the deleted discussion
     * @param discussionId discussion Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseDiscussion> deleteDiscussionWithHttpInfo(Long discussionId, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteDiscussionCall(discussionId, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete discussion (asynchronously)
     * Allows the user to delete discussion. Returns the deleted discussion
     * @param discussionId discussion Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDiscussionAsync(Long discussionId, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseDiscussion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDiscussionCall(discussionId, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteDiscussionComment */
    private com.squareup.okhttp.Call deleteDiscussionCommentCall(Long commentId, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteDiscussionComment(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling deleteDiscussionComment(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteDiscussionComment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/discussions/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete discussion comment
     * Allows the user to delete discussion comment. Returns the deleted discussion comment
     * @param commentId comment Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseComment deleteDiscussionComment(Long commentId, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseComment> resp = deleteDiscussionCommentWithHttpInfo(commentId, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Delete discussion comment
     * Allows the user to delete discussion comment. Returns the deleted discussion comment
     * @param commentId comment Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseComment> deleteDiscussionCommentWithHttpInfo(Long commentId, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteDiscussionCommentCall(commentId, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete discussion comment (asynchronously)
     * Allows the user to delete discussion comment. Returns the deleted discussion comment
     * @param commentId comment Id (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDiscussionCommentAsync(Long commentId, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDiscussionCommentCall(commentId, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBlogComments */
    private com.squareup.okhttp.Call getBlogCommentsCall(Long blogId, Integer start, Integer end, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'blogId' is set
        if (blogId == null) {
            throw new ApiException("Missing the required parameter 'blogId' when calling getBlogComments(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getBlogComments(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getBlogComments(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getBlogComments(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getBlogComments(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/blogs/{blogId}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "blogId" + "\\}", apiClient.escapeString(blogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of comments on blog
     * Returns the list of comments on blog
     * @param blogId blogId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseCommentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseCommentList getBlogComments(Long blogId, Integer start, Integer end, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseCommentList> resp = getBlogCommentsWithHttpInfo(blogId, start, end, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Get list of comments on blog
     * Returns the list of comments on blog
     * @param blogId blogId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseCommentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseCommentList> getBlogCommentsWithHttpInfo(Long blogId, Integer start, Integer end, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getBlogCommentsCall(blogId, start, end, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseCommentList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of comments on blog (asynchronously)
     * Returns the list of comments on blog
     * @param blogId blogId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBlogCommentsAsync(Long blogId, Integer start, Integer end, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseCommentList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBlogCommentsCall(blogId, start, end, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseCommentList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBlogs */
    private com.squareup.okhttp.Call getBlogsCall(Long association, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'association' is set
        if (association == null) {
            throw new ApiException("Missing the required parameter 'association' when calling getBlogs(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getBlogs(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getBlogs(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getBlogs(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getBlogs(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/blogs".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of blogs
     * Returns the list of blogs
     * @param association association (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseBlogList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseBlogList getBlogs(Long association, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseBlogList> resp = getBlogsWithHttpInfo(association, start, end, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of blogs
     * Returns the list of blogs
     * @param association association (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseBlogList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseBlogList> getBlogsWithHttpInfo(Long association, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getBlogsCall(association, start, end, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseBlogList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of blogs (asynchronously)
     * Returns the list of blogs
     * @param association association (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBlogsAsync(Long association, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseBlogList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBlogsCall(association, start, end, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseBlogList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDiscussionComments */
    private com.squareup.okhttp.Call getDiscussionCommentsCall(Long discussionId, Integer start, Integer end, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'discussionId' is set
        if (discussionId == null) {
            throw new ApiException("Missing the required parameter 'discussionId' when calling getDiscussionComments(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getDiscussionComments(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getDiscussionComments(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getDiscussionComments(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getDiscussionComments(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/discussions/{discussionId}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "discussionId" + "\\}", apiClient.escapeString(discussionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of comments on discussion
     * Returns the list of comments on discussion
     * @param discussionId discussionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseCommentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseCommentList getDiscussionComments(Long discussionId, Integer start, Integer end, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseCommentList> resp = getDiscussionCommentsWithHttpInfo(discussionId, start, end, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Get list of comments on discussion
     * Returns the list of comments on discussion
     * @param discussionId discussionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseCommentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseCommentList> getDiscussionCommentsWithHttpInfo(Long discussionId, Integer start, Integer end, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getDiscussionCommentsCall(discussionId, start, end, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseCommentList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of comments on discussion (asynchronously)
     * Returns the list of comments on discussion
     * @param discussionId discussionId (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscussionCommentsAsync(Long discussionId, Integer start, Integer end, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseCommentList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscussionCommentsCall(discussionId, start, end, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseCommentList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDiscussions */
    private com.squareup.okhttp.Call getDiscussionsCall(Long association, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'association' is set
        if (association == null) {
            throw new ApiException("Missing the required parameter 'association' when calling getDiscussions(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getDiscussions(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getDiscussions(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getDiscussions(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getDiscussions(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/discussions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (association != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "association", association));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of discussions
     * Returns the list of discussions
     * @param association association (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseDiscussionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseDiscussionList getDiscussions(Long association, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseDiscussionList> resp = getDiscussionsWithHttpInfo(association, start, end, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of discussions
     * Returns the list of discussions
     * @param association association (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseDiscussionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseDiscussionList> getDiscussionsWithHttpInfo(Long association, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getDiscussionsCall(association, start, end, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of discussions (asynchronously)
     * Returns the list of discussions
     * @param association association (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscussionsAsync(Long association, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseDiscussionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscussionsCall(association, start, end, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserSubscribedBlogs */
    private com.squareup.okhttp.Call getUserSubscribedBlogsCall(Long userId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserSubscribedBlogs(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getUserSubscribedBlogs(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getUserSubscribedBlogs(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getUserSubscribedBlogs(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserSubscribedBlogs(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/blogs/{userId}/subscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of blogs subscribed by user
     * Returns the list of blogs subscribed by user
     * @param userId User Id whose subcribtions want tp get.  (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseBlog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseBlog getUserSubscribedBlogs(Long userId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseBlog> resp = getUserSubscribedBlogsWithHttpInfo(userId, start, end, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of blogs subscribed by user
     * Returns the list of blogs subscribed by user
     * @param userId User Id whose subcribtions want tp get.  (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseBlog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseBlog> getUserSubscribedBlogsWithHttpInfo(Long userId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getUserSubscribedBlogsCall(userId, start, end, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseBlog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of blogs subscribed by user (asynchronously)
     * Returns the list of blogs subscribed by user
     * @param userId User Id whose subcribtions want tp get.  (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list       /_*   **A) Default values -**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate        **A )Available values-**        1)blogId       2)blogTitle       3)blogDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to blogId,blogTitle,blogDescription,createdDate)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserSubscribedBlogsAsync(Long userId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseBlog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserSubscribedBlogsCall(userId, start, end, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseBlog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserSubscribedDiscussions */
    private com.squareup.okhttp.Call getUserSubscribedDiscussionsCall(Long userId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserSubscribedDiscussions(Async)");
        }
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getUserSubscribedDiscussions(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getUserSubscribedDiscussions(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getUserSubscribedDiscussions(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getUserSubscribedDiscussions(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/discussions/{userId}/subscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end", end));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of discussions subscribed by user
     * Returns the list of discussions subscribed by user 
     * @param userId User Id whose subcribtions want tp get. (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseDiscussionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseDiscussionList getUserSubscribedDiscussions(Long userId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        ApiResponse<VerveResponseDiscussionList> resp = getUserSubscribedDiscussionsWithHttpInfo(userId, start, end, requesterId, clientToken, fields, accessToken);
        return resp.getData();
    }

    /**
     * Get list of discussions subscribed by user
     * Returns the list of discussions subscribed by user 
     * @param userId User Id whose subcribtions want tp get. (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseDiscussionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseDiscussionList> getUserSubscribedDiscussionsWithHttpInfo(Long userId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getUserSubscribedDiscussionsCall(userId, start, end, requesterId, clientToken, fields, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of discussions subscribed by user (asynchronously)
     * Returns the list of discussions subscribed by user 
     * @param userId User Id whose subcribtions want tp get. (required)
     * @param start start, initial value start from 0 (required)
     * @param end end (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param fields Filter fields in result list        /_*   **A) Default values -**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate        **A) Available values-**        1)discussionId       2)discussionSubject       3)discussionDescription       4)createdDate       5)user       6)sentiment       7)entity   *_/ (optional, default to discussionId,discussionSubject,discussionDescription,createdDate )
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserSubscribedDiscussionsAsync(Long userId, Integer start, Integer end, String requesterId, String clientToken, String fields, String accessToken, final ApiCallback<VerveResponseDiscussionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserSubscribedDiscussionsCall(userId, start, end, requesterId, clientToken, fields, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for postBlog */
    private com.squareup.okhttp.Call postBlogCall(String requesterId, String clientToken, Blog body, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling postBlog(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling postBlog(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/blogs".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Post blog
     * This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields** 1. association      2. title      3. description
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseBlog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseBlog postBlog(String requesterId, String clientToken, Blog body, String accessToken) throws ApiException {
        ApiResponse<VerveResponseBlog> resp = postBlogWithHttpInfo(requesterId, clientToken, body, accessToken);
        return resp.getData();
    }

    /**
     * Post blog
     * This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields** 1. association      2. title      3. description
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseBlog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseBlog> postBlogWithHttpInfo(String requesterId, String clientToken, Blog body, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = postBlogCall(requesterId, clientToken, body, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseBlog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Post blog (asynchronously)
     * This service allows a user to post a blog. The following fields(key:value) are required to be present in the Blog JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields** 1. association      2. title      3. description
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postBlogAsync(String requesterId, String clientToken, Blog body, String accessToken, final ApiCallback<VerveResponseBlog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postBlogCall(requesterId, clientToken, body, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseBlog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for startDiscussion */
    private com.squareup.okhttp.Call startDiscussionCall(String requesterId, String clientToken, Discussion body, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling startDiscussion(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling startDiscussion(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/discussions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Start discussion
     * This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. subject      3. description
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseDiscussion startDiscussion(String requesterId, String clientToken, Discussion body, String accessToken) throws ApiException {
        ApiResponse<VerveResponseDiscussion> resp = startDiscussionWithHttpInfo(requesterId, clientToken, body, accessToken);
        return resp.getData();
    }

    /**
     * Start discussion
     * This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. subject      3. description
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseDiscussion> startDiscussionWithHttpInfo(String requesterId, String clientToken, Discussion body, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = startDiscussionCall(requesterId, clientToken, body, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start discussion (asynchronously)
     * This service allows a user to post a discussion. The following fields(key:value) are required to be present in the Discussion JSON object. Refer to the Model &amp; Model Schema of the expected JSON Object for the body of this API. **Required fields**      1. association      2. subject      3. description
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param body  (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startDiscussionAsync(String requesterId, String clientToken, Discussion body, String accessToken, final ApiCallback<VerveResponseDiscussion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startDiscussionCall(requesterId, clientToken, body, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for subscribeBlog */
    private com.squareup.okhttp.Call subscribeBlogCall(Long blogId, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'blogId' is set
        if (blogId == null) {
            throw new ApiException("Missing the required parameter 'blogId' when calling subscribeBlog(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling subscribeBlog(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling subscribeBlog(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/blogs/{blogId}/subscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "blogId" + "\\}", apiClient.escapeString(blogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Subscribe blog
     * Allows the user to subscribe to blog. Returns the subscribed blog
     * @param blogId blogId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseBlog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseBlog subscribeBlog(Long blogId, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseBlog> resp = subscribeBlogWithHttpInfo(blogId, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Subscribe blog
     * Allows the user to subscribe to blog. Returns the subscribed blog
     * @param blogId blogId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseBlog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseBlog> subscribeBlogWithHttpInfo(Long blogId, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = subscribeBlogCall(blogId, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseBlog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Subscribe blog (asynchronously)
     * Allows the user to subscribe to blog. Returns the subscribed blog
     * @param blogId blogId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscribeBlogAsync(Long blogId, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseBlog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscribeBlogCall(blogId, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseBlog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for subscribeDiscussion */
    private com.squareup.okhttp.Call subscribeDiscussionCall(Long discussionId, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'discussionId' is set
        if (discussionId == null) {
            throw new ApiException("Missing the required parameter 'discussionId' when calling subscribeDiscussion(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling subscribeDiscussion(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling subscribeDiscussion(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/discussions/{discussionId}/subscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "discussionId" + "\\}", apiClient.escapeString(discussionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Subscribe discussion
     * Allows the user to subscribe to a discussion. Returns the subscribed discussion
     * @param discussionId discussionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseDiscussion subscribeDiscussion(Long discussionId, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseDiscussion> resp = subscribeDiscussionWithHttpInfo(discussionId, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Subscribe discussion
     * Allows the user to subscribe to a discussion. Returns the subscribed discussion
     * @param discussionId discussionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseDiscussion> subscribeDiscussionWithHttpInfo(Long discussionId, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = subscribeDiscussionCall(discussionId, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Subscribe discussion (asynchronously)
     * Allows the user to subscribe to a discussion. Returns the subscribed discussion
     * @param discussionId discussionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscribeDiscussionAsync(Long discussionId, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseDiscussion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscribeDiscussionCall(discussionId, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for unsubscribeBlog */
    private com.squareup.okhttp.Call unsubscribeBlogCall(Long blogId, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'blogId' is set
        if (blogId == null) {
            throw new ApiException("Missing the required parameter 'blogId' when calling unsubscribeBlog(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling unsubscribeBlog(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling unsubscribeBlog(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/blogs/{blogId}/unsubscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "blogId" + "\\}", apiClient.escapeString(blogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Unsubscribe blog
     * Allows the user to unsubscribe blog. Returns the unsubscribed blog
     * @param blogId blogId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseBlog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseBlog unsubscribeBlog(Long blogId, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseBlog> resp = unsubscribeBlogWithHttpInfo(blogId, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Unsubscribe blog
     * Allows the user to unsubscribe blog. Returns the unsubscribed blog
     * @param blogId blogId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseBlog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseBlog> unsubscribeBlogWithHttpInfo(Long blogId, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = unsubscribeBlogCall(blogId, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseBlog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unsubscribe blog (asynchronously)
     * Allows the user to unsubscribe blog. Returns the unsubscribed blog
     * @param blogId blogId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsubscribeBlogAsync(Long blogId, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseBlog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsubscribeBlogCall(blogId, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseBlog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for unsubscribeDiscussion */
    private com.squareup.okhttp.Call unsubscribeDiscussionCall(Long discussionId, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'discussionId' is set
        if (discussionId == null) {
            throw new ApiException("Missing the required parameter 'discussionId' when calling unsubscribeDiscussion(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling unsubscribeDiscussion(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling unsubscribeDiscussion(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/discussions/{discussionId}/unsubscribe".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "discussionId" + "\\}", apiClient.escapeString(discussionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Unsubscribe discussion
     * Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion
     * @param discussionId discussionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseDiscussion unsubscribeDiscussion(Long discussionId, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseDiscussion> resp = unsubscribeDiscussionWithHttpInfo(discussionId, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Unsubscribe discussion
     * Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion
     * @param discussionId discussionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseDiscussion> unsubscribeDiscussionWithHttpInfo(Long discussionId, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = unsubscribeDiscussionCall(discussionId, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unsubscribe discussion (asynchronously)
     * Allows the user to unsubscribe to a discussion. Returns the unsubscribed discussion
     * @param discussionId discussionId (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unsubscribeDiscussionAsync(Long discussionId, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseDiscussion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unsubscribeDiscussionCall(discussionId, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateBlog */
    private com.squareup.okhttp.Call updateBlogCall(Long blogId, String blogTitle, String blogDescription, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'blogId' is set
        if (blogId == null) {
            throw new ApiException("Missing the required parameter 'blogId' when calling updateBlog(Async)");
        }
        
        // verify the required parameter 'blogTitle' is set
        if (blogTitle == null) {
            throw new ApiException("Missing the required parameter 'blogTitle' when calling updateBlog(Async)");
        }
        
        // verify the required parameter 'blogDescription' is set
        if (blogDescription == null) {
            throw new ApiException("Missing the required parameter 'blogDescription' when calling updateBlog(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling updateBlog(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateBlog(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/blogs/{blogId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "blogId" + "\\}", apiClient.escapeString(blogId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (blogTitle != null)
        localVarFormParams.put("blogTitle", blogTitle);
        if (blogDescription != null)
        localVarFormParams.put("blogDescription", blogDescription);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update blog
     * Allows the user to update blog. Returns the updated blog
     * @param blogId blogId (required)
     * @param blogTitle blog title (required)
     * @param blogDescription blog description (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseBlog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseBlog updateBlog(Long blogId, String blogTitle, String blogDescription, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseBlog> resp = updateBlogWithHttpInfo(blogId, blogTitle, blogDescription, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Update blog
     * Allows the user to update blog. Returns the updated blog
     * @param blogId blogId (required)
     * @param blogTitle blog title (required)
     * @param blogDescription blog description (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseBlog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseBlog> updateBlogWithHttpInfo(Long blogId, String blogTitle, String blogDescription, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = updateBlogCall(blogId, blogTitle, blogDescription, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseBlog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update blog (asynchronously)
     * Allows the user to update blog. Returns the updated blog
     * @param blogId blogId (required)
     * @param blogTitle blog title (required)
     * @param blogDescription blog description (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBlogAsync(Long blogId, String blogTitle, String blogDescription, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseBlog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBlogCall(blogId, blogTitle, blogDescription, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseBlog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateBlogComment */
    private com.squareup.okhttp.Call updateBlogCommentCall(Long commentId, String commentText, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling updateBlogComment(Async)");
        }
        
        // verify the required parameter 'commentText' is set
        if (commentText == null) {
            throw new ApiException("Missing the required parameter 'commentText' when calling updateBlogComment(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling updateBlogComment(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateBlogComment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/blogs/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (commentText != null)
        localVarFormParams.put("commentText", commentText);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update blog comment
     * Allows the user to update blog comment. Returns the updated blog comment
     * @param commentId commentId (required)
     * @param commentText comment text (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseComment updateBlogComment(Long commentId, String commentText, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseComment> resp = updateBlogCommentWithHttpInfo(commentId, commentText, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Update blog comment
     * Allows the user to update blog comment. Returns the updated blog comment
     * @param commentId commentId (required)
     * @param commentText comment text (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseComment> updateBlogCommentWithHttpInfo(Long commentId, String commentText, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = updateBlogCommentCall(commentId, commentText, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update blog comment (asynchronously)
     * Allows the user to update blog comment. Returns the updated blog comment
     * @param commentId commentId (required)
     * @param commentText comment text (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBlogCommentAsync(Long commentId, String commentText, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBlogCommentCall(commentId, commentText, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateDiscussion */
    private com.squareup.okhttp.Call updateDiscussionCall(Long discussionId, String subject, String discussionDescription, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'discussionId' is set
        if (discussionId == null) {
            throw new ApiException("Missing the required parameter 'discussionId' when calling updateDiscussion(Async)");
        }
        
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling updateDiscussion(Async)");
        }
        
        // verify the required parameter 'discussionDescription' is set
        if (discussionDescription == null) {
            throw new ApiException("Missing the required parameter 'discussionDescription' when calling updateDiscussion(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling updateDiscussion(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateDiscussion(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/discussions/{discussionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "discussionId" + "\\}", apiClient.escapeString(discussionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (subject != null)
        localVarFormParams.put("subject", subject);
        if (discussionDescription != null)
        localVarFormParams.put("discussionDescription", discussionDescription);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update discussion
     * Allows the user to update discussion. Returns the updated discussion
     * @param discussionId discussionId (required)
     * @param subject subject (required)
     * @param discussionDescription discussion Description (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseDiscussion updateDiscussion(Long discussionId, String subject, String discussionDescription, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseDiscussion> resp = updateDiscussionWithHttpInfo(discussionId, subject, discussionDescription, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Update discussion
     * Allows the user to update discussion. Returns the updated discussion
     * @param discussionId discussionId (required)
     * @param subject subject (required)
     * @param discussionDescription discussion Description (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseDiscussion> updateDiscussionWithHttpInfo(Long discussionId, String subject, String discussionDescription, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = updateDiscussionCall(discussionId, subject, discussionDescription, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update discussion (asynchronously)
     * Allows the user to update discussion. Returns the updated discussion
     * @param discussionId discussionId (required)
     * @param subject subject (required)
     * @param discussionDescription discussion Description (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDiscussionAsync(Long discussionId, String subject, String discussionDescription, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseDiscussion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDiscussionCall(discussionId, subject, discussionDescription, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateDiscussionComment */
    private com.squareup.okhttp.Call updateDiscussionCommentCall(Long commentId, String commentText, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling updateDiscussionComment(Async)");
        }
        
        // verify the required parameter 'commentText' is set
        if (commentText == null) {
            throw new ApiException("Missing the required parameter 'commentText' when calling updateDiscussionComment(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling updateDiscussionComment(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling updateDiscussionComment(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/collaborations/discussions/comments/{commentId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "commentId" + "\\}", apiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (commentText != null)
        localVarFormParams.put("commentText", commentText);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update discussion comment
     * Allows the user to update discussion comment. Returns the updated discussion comment
     * @param commentId commentId (required)
     * @param commentText comment text (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseDiscussion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseDiscussion updateDiscussionComment(Long commentId, String commentText, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseDiscussion> resp = updateDiscussionCommentWithHttpInfo(commentId, commentText, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Update discussion comment
     * Allows the user to update discussion comment. Returns the updated discussion comment
     * @param commentId commentId (required)
     * @param commentText comment text (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseDiscussion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseDiscussion> updateDiscussionCommentWithHttpInfo(Long commentId, String commentText, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = updateDiscussionCommentCall(commentId, commentText, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update discussion comment (asynchronously)
     * Allows the user to update discussion comment. Returns the updated discussion comment
     * @param commentId commentId (required)
     * @param commentText comment text (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDiscussionCommentAsync(Long commentId, String commentText, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseDiscussion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDiscussionCommentCall(commentId, commentText, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseDiscussion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
