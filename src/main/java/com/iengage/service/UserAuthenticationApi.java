/*
 * iEngage 2.0 API
 * This API enables Intelligent Engagement for your Business. iEngage is a platform that combines process, augmented intelligence and rewards to help you intelligently engage customers.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.iengage.service;

import com.iengage.ApiCallback;
import com.iengage.ApiClient;
import com.iengage.ApiException;
import com.iengage.ApiResponse;
import com.iengage.Configuration;
import com.iengage.Pair;
import com.iengage.ProgressRequestBody;
import com.iengage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.iengage.client.model.User;
import com.iengage.client.model.VerveResponseAssociation;
import com.iengage.client.model.VerveResponseAssociationList;
import com.iengage.client.model.VerveResponseUser;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserAuthenticationApi {
    private ApiClient apiClient;

    public UserAuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserAuthenticationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addNotificationRegisteredId */
    private com.squareup.okhttp.Call addNotificationRegisteredIdCall(String registeredId, String type, String clientToken, String requesterId, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/devices".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (registeredId != null)
        localVarFormParams.put("registeredId", registeredId);
        if (type != null)
        localVarFormParams.put("type", type);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNotificationRegisteredIdValidateBeforeCall(String registeredId, String type, String clientToken, String requesterId, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'registeredId' is set
        if (registeredId == null) {
            throw new ApiException("Missing the required parameter 'registeredId' when calling addNotificationRegisteredId(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addNotificationRegisteredId(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addNotificationRegisteredId(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addNotificationRegisteredIdCall(registeredId, type, clientToken, requesterId, accessToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add device token
     * Add device token to push notification from server
     * @param registeredId Registered device token to be added (required)
     * @param type Type of device android, ios (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param requesterId requesterId can be user id OR email address. (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean addNotificationRegisteredId(String registeredId, String type, String clientToken, String requesterId, String accessToken) throws ApiException {
        ApiResponse<Boolean> resp = addNotificationRegisteredIdWithHttpInfo(registeredId, type, clientToken, requesterId, accessToken);
        return resp.getData();
    }

    /**
     * Add device token
     * Add device token to push notification from server
     * @param registeredId Registered device token to be added (required)
     * @param type Type of device android, ios (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param requesterId requesterId can be user id OR email address. (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> addNotificationRegisteredIdWithHttpInfo(String registeredId, String type, String clientToken, String requesterId, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = addNotificationRegisteredIdValidateBeforeCall(registeredId, type, clientToken, requesterId, accessToken, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add device token (asynchronously)
     * Add device token to push notification from server
     * @param registeredId Registered device token to be added (required)
     * @param type Type of device android, ios (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param requesterId requesterId can be user id OR email address. (optional)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNotificationRegisteredIdAsync(String registeredId, String type, String clientToken, String requesterId, String accessToken, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNotificationRegisteredIdValidateBeforeCall(registeredId, type, clientToken, requesterId, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addUser */
    private com.squareup.okhttp.Call addUserCall(String screenName, String emailId, String password, String clientToken, String firstName, String middleName, String lastName, Integer birthDay, Integer birthMonth, Integer birthYear, String additionInformation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (screenName != null)
        localVarFormParams.put("screenName", screenName);
        if (firstName != null)
        localVarFormParams.put("firstName", firstName);
        if (middleName != null)
        localVarFormParams.put("middleName", middleName);
        if (lastName != null)
        localVarFormParams.put("lastName", lastName);
        if (emailId != null)
        localVarFormParams.put("emailId", emailId);
        if (password != null)
        localVarFormParams.put("password", password);
        if (birthDay != null)
        localVarFormParams.put("birthDay", birthDay);
        if (birthMonth != null)
        localVarFormParams.put("birthMonth", birthMonth);
        if (birthYear != null)
        localVarFormParams.put("birthYear", birthYear);
        if (additionInformation != null)
        localVarFormParams.put("additionInformation", additionInformation);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addUserValidateBeforeCall(String screenName, String emailId, String password, String clientToken, String firstName, String middleName, String lastName, Integer birthDay, Integer birthMonth, Integer birthYear, String additionInformation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'screenName' is set
        if (screenName == null) {
            throw new ApiException("Missing the required parameter 'screenName' when calling addUser(Async)");
        }
        
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling addUser(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling addUser(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling addUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addUserCall(screenName, emailId, password, clientToken, firstName, middleName, lastName, birthDay, birthMonth, birthYear, additionInformation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add/Register new user
     * Add/Register new user. Returns the user
     * @param screenName unique ID of user (required)
     * @param emailId email ID (required)
     * @param password password (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param firstName first name (optional)
     * @param middleName middle name (optional)
     * @param lastName last name (optional)
     * @param birthDay birth day (optional)
     * @param birthMonth birth month (optional)
     * @param birthYear birth year (optional)
     * @param additionInformation addition information (optional)
     * @return VerveResponseUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseUser addUser(String screenName, String emailId, String password, String clientToken, String firstName, String middleName, String lastName, Integer birthDay, Integer birthMonth, Integer birthYear, String additionInformation) throws ApiException {
        ApiResponse<VerveResponseUser> resp = addUserWithHttpInfo(screenName, emailId, password, clientToken, firstName, middleName, lastName, birthDay, birthMonth, birthYear, additionInformation);
        return resp.getData();
    }

    /**
     * Add/Register new user
     * Add/Register new user. Returns the user
     * @param screenName unique ID of user (required)
     * @param emailId email ID (required)
     * @param password password (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param firstName first name (optional)
     * @param middleName middle name (optional)
     * @param lastName last name (optional)
     * @param birthDay birth day (optional)
     * @param birthMonth birth month (optional)
     * @param birthYear birth year (optional)
     * @param additionInformation addition information (optional)
     * @return ApiResponse&lt;VerveResponseUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseUser> addUserWithHttpInfo(String screenName, String emailId, String password, String clientToken, String firstName, String middleName, String lastName, Integer birthDay, Integer birthMonth, Integer birthYear, String additionInformation) throws ApiException {
        com.squareup.okhttp.Call call = addUserValidateBeforeCall(screenName, emailId, password, clientToken, firstName, middleName, lastName, birthDay, birthMonth, birthYear, additionInformation, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseUser>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add/Register new user (asynchronously)
     * Add/Register new user. Returns the user
     * @param screenName unique ID of user (required)
     * @param emailId email ID (required)
     * @param password password (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param firstName first name (optional)
     * @param middleName middle name (optional)
     * @param lastName last name (optional)
     * @param birthDay birth day (optional)
     * @param birthMonth birth month (optional)
     * @param birthYear birth year (optional)
     * @param additionInformation addition information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUserAsync(String screenName, String emailId, String password, String clientToken, String firstName, String middleName, String lastName, Integer birthDay, Integer birthMonth, Integer birthYear, String additionInformation, final ApiCallback<VerveResponseUser> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUserValidateBeforeCall(screenName, emailId, password, clientToken, firstName, middleName, lastName, birthDay, birthMonth, birthYear, additionInformation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseUser>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for authenticate */
    private com.squareup.okhttp.Call authenticateCall(String userName, String password, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/authenticate".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (userName != null)
        localVarHeaderParams.put("userName", apiClient.parameterToString(userName));
        if (password != null)
        localVarHeaderParams.put("password", apiClient.parameterToString(password));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authenticateValidateBeforeCall(String userName, String password, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling authenticate(Async)");
        }
        
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling authenticate(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling authenticate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = authenticateCall(userName, password, clientToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Authenticate User
     * Authenticate with username &amp; password
     * @param userName User name (required)
     * @param password Password (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User authenticate(String userName, String password, String clientToken) throws ApiException {
        ApiResponse<User> resp = authenticateWithHttpInfo(userName, password, clientToken);
        return resp.getData();
    }

    /**
     * Authenticate User
     * Authenticate with username &amp; password
     * @param userName User name (required)
     * @param password Password (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> authenticateWithHttpInfo(String userName, String password, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = authenticateValidateBeforeCall(userName, password, clientToken, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Authenticate User (asynchronously)
     * Authenticate with username &amp; password
     * @param userName User name (required)
     * @param password Password (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authenticateAsync(String userName, String password, String clientToken, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authenticateValidateBeforeCall(userName, password, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for changePassword */
    private com.squareup.okhttp.Call changePasswordCall(String currentPassword, String newPassword, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/password".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (currentPassword != null)
        localVarFormParams.put("currentPassword", currentPassword);
        if (newPassword != null)
        localVarFormParams.put("newPassword", newPassword);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call changePasswordValidateBeforeCall(String currentPassword, String newPassword, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'currentPassword' is set
        if (currentPassword == null) {
            throw new ApiException("Missing the required parameter 'currentPassword' when calling changePassword(Async)");
        }
        
        // verify the required parameter 'newPassword' is set
        if (newPassword == null) {
            throw new ApiException("Missing the required parameter 'newPassword' when calling changePassword(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling changePassword(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling changePassword(Async)");
        }
        
        
        com.squareup.okhttp.Call call = changePasswordCall(currentPassword, newPassword, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change password
     * Allows the user to change password. Returns true if successful
     * @param currentPassword Current password (required)
     * @param newPassword New password (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean changePassword(String currentPassword, String newPassword, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<Boolean> resp = changePasswordWithHttpInfo(currentPassword, newPassword, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Change password
     * Allows the user to change password. Returns true if successful
     * @param currentPassword Current password (required)
     * @param newPassword New password (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> changePasswordWithHttpInfo(String currentPassword, String newPassword, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = changePasswordValidateBeforeCall(currentPassword, newPassword, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change password (asynchronously)
     * Allows the user to change password. Returns true if successful
     * @param currentPassword Current password (required)
     * @param newPassword New password (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call changePasswordAsync(String currentPassword, String newPassword, String requesterId, String clientToken, String accessToken, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = changePasswordValidateBeforeCall(currentPassword, newPassword, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createAssociation */
    private com.squareup.okhttp.Call createAssociationCall(String name, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/associations".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAssociationValidateBeforeCall(String name, String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createAssociation(Async)");
        }
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling createAssociation(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling createAssociation(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createAssociationCall(name, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create association
     * Create association. Returns the association
     * @param name association name (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseAssociation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseAssociation createAssociation(String name, String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseAssociation> resp = createAssociationWithHttpInfo(name, requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Create association
     * Create association. Returns the association
     * @param name association name (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseAssociation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseAssociation> createAssociationWithHttpInfo(String name, String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = createAssociationValidateBeforeCall(name, requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseAssociation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create association (asynchronously)
     * Create association. Returns the association
     * @param name association name (required)
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAssociationAsync(String name, String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseAssociation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAssociationValidateBeforeCall(name, requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseAssociation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteUser */
    private com.squareup.okhttp.Call deleteUserCall(Long userId, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{userId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserValidateBeforeCall(Long userId, String clientToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUser(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling deleteUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteUserCall(userId, clientToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete user
     * Allows the user to delete user. Returns the deleted user
     * @param userId userId (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return VerveResponseUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseUser deleteUser(Long userId, String clientToken) throws ApiException {
        ApiResponse<VerveResponseUser> resp = deleteUserWithHttpInfo(userId, clientToken);
        return resp.getData();
    }

    /**
     * Delete user
     * Allows the user to delete user. Returns the deleted user
     * @param userId userId (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @return ApiResponse&lt;VerveResponseUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseUser> deleteUserWithHttpInfo(Long userId, String clientToken) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(userId, clientToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseUser>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete user (asynchronously)
     * Allows the user to delete user. Returns the deleted user
     * @param userId userId (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAsync(Long userId, String clientToken, final ApiCallback<VerveResponseUser> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(userId, clientToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseUser>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAssociations */
    private com.squareup.okhttp.Call getAssociationsCall(String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/associations".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAssociationsValidateBeforeCall(String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling getAssociations(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling getAssociations(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAssociationsCall(requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of associations
     * Return the list of association
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return VerveResponseAssociationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerveResponseAssociationList getAssociations(String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<VerveResponseAssociationList> resp = getAssociationsWithHttpInfo(requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Get list of associations
     * Return the list of association
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;VerveResponseAssociationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerveResponseAssociationList> getAssociationsWithHttpInfo(String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = getAssociationsValidateBeforeCall(requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<VerveResponseAssociationList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of associations (asynchronously)
     * Return the list of association
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAssociationsAsync(String requesterId, String clientToken, String accessToken, final ApiCallback<VerveResponseAssociationList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAssociationsValidateBeforeCall(requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerveResponseAssociationList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for logout */
    private com.squareup.okhttp.Call logoutCall(String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/logout".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (requesterId != null)
        localVarHeaderParams.put("requesterId", apiClient.parameterToString(requesterId));
        if (accessToken != null)
        localVarHeaderParams.put("accessToken", apiClient.parameterToString(accessToken));
        if (clientToken != null)
        localVarHeaderParams.put("clientToken", apiClient.parameterToString(clientToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "default" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call logoutValidateBeforeCall(String requesterId, String clientToken, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling logout(Async)");
        }
        
        // verify the required parameter 'clientToken' is set
        if (clientToken == null) {
            throw new ApiException("Missing the required parameter 'clientToken' when calling logout(Async)");
        }
        
        
        com.squareup.okhttp.Call call = logoutCall(requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Logout
     * Logout rest api session. Returns true if successful
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean logout(String requesterId, String clientToken, String accessToken) throws ApiException {
        ApiResponse<Boolean> resp = logoutWithHttpInfo(requesterId, clientToken, accessToken);
        return resp.getData();
    }

    /**
     * Logout
     * Logout rest api session. Returns true if successful
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> logoutWithHttpInfo(String requesterId, String clientToken, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = logoutValidateBeforeCall(requesterId, clientToken, accessToken, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Logout (asynchronously)
     * Logout rest api session. Returns true if successful
     * @param requesterId requesterId can be user id OR email address. (required)
     * @param clientToken Use the Client Token. Please generate it from the Applications section under the Production &amp; Sandbox tabs (required)
     * @param accessToken Unique session token for user. To get access token user will have to authenticate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logoutAsync(String requesterId, String clientToken, String accessToken, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logoutValidateBeforeCall(requesterId, clientToken, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
